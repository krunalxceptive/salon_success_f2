{"file_contents":{"TRIAL_BILLING_SYSTEM.md":{"content":"# 14-Day Free Trial to Subscription System\n\n## How It Works\n\n### 1. User Registration\n- New users automatically get 14 days of free access\n- Trial starts immediately upon signup\n- Full app functionality available during trial\n- Trial end date stored in database\n\n### 2. Stripe Integration\n- Subscription created with `trial_period_days: 14`\n- No payment required during trial period\n- Payment method collected for post-trial billing\n- Stripe handles automatic billing after trial ends\n\n### 3. Trial Status Tracking\n- Dashboard shows trial banner with days remaining\n- API endpoint `/api/user/trial-status` provides current status\n- Trial manager calculates access permissions\n- Visual indicators guide users to subscribe\n\n### 4. Automatic Billing (After 14 Days)\n- Stripe automatically charges £23.97/month\n- Webhook system updates user status in real-time\n- Payment failures revoke access immediately\n- Successful payments maintain active subscription\n\n### 5. Access Control\n- Trial users: Full access to all features\n- Active subscribers: Continued full access\n- Expired/failed payments: Access revoked until payment\n\n## Technical Components\n\n### Backend\n- TrialManager class handles trial logic\n- Stripe webhooks process billing events\n- Database tracks subscription status\n- API endpoints provide trial information\n\n### Frontend\n- Trial banner on dashboard\n- Subscription flow through Stripe\n- Real-time status updates\n- Clear upgrade prompts\n\n### Stripe Configuration\n- 14-day trial period built into subscription\n- £23.97/month recurring billing\n- Automatic payment processing\n- Webhook notifications for status changes\n\n## User Journey\n1. Sign up → Immediate 14-day trial access\n2. Use app freely for 14 days\n3. Trial expires → Automatic billing attempt\n4. Payment succeeds → Continued access\n5. Payment fails → Access revoked, retry billing\n\nThis creates a seamless trial-to-paid conversion flow with automatic billing handled by Stripe.","size_bytes":1955},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Salon Success Manager - Replit.md\n\n## Overview\n\nSalon Success Manager is a comprehensive business management platform designed specifically for salon and beauty business owners. The application provides tools for financial planning, expense tracking, profit analysis, and business growth insights. It features a 14-day free trial system with automatic billing through Stripe integration.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom theme configuration\n- **Forms**: React Hook Form with Zod validation\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Session Management**: Express-session with in-memory store (MemoryStore)\n- **Authentication**: Session-based authentication with bcrypt password hashing\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n\n### Key Components\n\n#### Database Schema\n- **Users**: Core user information with subscription status tracking\n- **Sessions**: Session storage for authentication\n- **Hourly Rate Calculations**: Business cost and hourly rate calculations\n- **Treatments**: Service offerings with profit margin analysis\n- **Expenses**: Business expense tracking with categorization\n- **Businesses**: Multi-business management support\n- **Weekly Incomes**: CEO numbers tracking system\n- **Income Goals**: Revenue target setting and tracking\n- **Stock Purchases**: Inventory and stock budget management\n\n#### Authentication System\n- Simple session-based authentication using express-session\n- Password reset functionality with email integration\n- Trial period management integrated with user accounts\n- Multiple email providers supported (SendGrid, Gmail SMTP, Ionos SMTP)\n\n#### Payment Integration\n- Stripe integration for subscription management\n- 14-day free trial system with automatic billing\n- Webhook handling for subscription status updates\n- £23.97/month recurring subscription model\n\n## Data Flow\n\n1. **User Registration**: Creates user account with 14-day trial period\n2. **Trial Management**: TrialManager class tracks access permissions\n3. **Business Tools**: Authenticated users access calculation and tracking tools\n4. **Subscription Flow**: Stripe handles payment processing and subscription management\n5. **Data Persistence**: All business data stored in PostgreSQL via Drizzle ORM\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe**: Subscription management, payment processing, and webhooks\n- **Stripe Elements**: Frontend payment form integration\n\n### Email Services\n- **SendGrid**: Primary email service for transactional emails\n- **Gmail SMTP**: Alternative email provider\n- **Ionos SMTP**: Additional email provider option\n\n### Database\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations\n- **WebSocket**: Real-time database connections\n\n### Development Tools\n- **Replit**: Development environment and deployment platform\n- **Vite**: Build tool with hot module replacement\n- **TypeScript**: Type safety across frontend and backend\n\n## Deployment Strategy\n\nThe application is configured for deployment on Replit's autoscale infrastructure:\n\n- **Build Command**: `npm run build` - Compiles both frontend and backend\n- **Start Command**: `npm run start` - Runs production server\n- **Development**: `npm run dev` - Runs development server with hot reload\n- **Port Configuration**: Internal port 5000, external port 80\n- **Database**: Automatic PostgreSQL provisioning through Replit\n\n## Changelog\n\nChangelog:\n- September 8, 2025. Enhanced ActiveCampaign integration with automatic tagging for new user signups. Users are now automatically tagged with \"salonsuccessmanager\" when they register or sign up, in addition to being added to the KG Business Mentor list. The system creates the tag if it doesn't exist and applies it to both new and existing contacts during signup process. Fixed critical list assignment issue where ACTIVECAMPAIGN_LIST_ID environment variable contained a full URL instead of numeric ID, causing 500 errors during list assignment. Successfully resolved session callback issues by moving ActiveCampaign integration to execute immediately after user creation rather than within session save callbacks. The integration now properly tags new users and adds them to the KG Business Mentor list as intended.\n- September 2, 2025. Implemented comprehensive developer notification system for new user registrations. Added email notifications to help@salonsuccessmanager.com for all user activities: registration, promo code usage (CLIENT6FREE), subscription creation, and payment success events. Notifications include user details, business type, signup method, and quick action items for follow-up.\n- September 2, 2025. Fixed hourly rate calculator number input formatting for Safari and international usage. Added support for comma-separated numbers (10,000), changed inputs from 'number' to 'text' type for Safari compatibility, implemented automatic comma formatting as users type, and updated parsing to handle commas properly when calculating rates. Calculator now works consistently across all browsers.\n- August 21, 2025. Fixed CLIENT6FREE promo code authentication flow completely. Resolved race condition where Stripe subscription creation was overriding promo code status by adding free_access check in create-subscription route. Updated frontend to avoid problematic redirects that lose session cookies. CLIENT6FREE users now get immediate dashboard access with 6 months free access to all business tools.\n- August 21, 2025. Enhanced registration page with password confirmation and visibility toggles. Added password confirmation field with matching validation, eye/eye-off icons for password visibility, and improved form security. Updated reset password page to use consistent help@salonsuccessmanager.com contact email.\n- August 21, 2025. Fixed stock budget calculator \"Add Purchase\" button not responding. Resolved identical schema validation issue where userId was required in insertStockPurchaseSchema but should be added by server. Updated insertStockPurchaseSchema to exclude userId from validation. Stock purchase creation now works properly with automatic budget calculations and purchase history tracking.\n- August 21, 2025. Fixed validation error in profit margin calculator preventing treatment creation. Resolved schema validation issue where userId was required in request body but should be added by server. Updated insertTreatmentSchema to exclude userId from validation. Treatment creation now works properly with automatic profit margin calculations.\n- August 20, 2025. Fixed critical payment system issue preventing subscription form loading. Resolved \"unable to load payment form\" error by implementing Setup Intent approach for payment method collection. Switched from payment intent-based subscriptions to Setup Intent + subscription model, ensuring proper client secret generation for Stripe Elements integration. Payment system now fully functional with proper recurring payment setup.\n- August 14, 2025. Updated application branding from \"Salon Growth Manager\" to \"Salon Success Manager\" across all pages, titles, and documentation. Added AED (UAE Dirham) currency support for international clients. Completed comprehensive currency context integration ensuring all pages respond to currency selection changes.\n- July 6, 2025. Fixed PDF and CSV export functionality in Reports page. Replaced browser print dialog with proper jsPDF library for direct PDF downloads. Removed \"opening email client\" notifications for cleaner user experience. Export buttons now generate downloadable files immediately without dialog popups.\n- June 15, 2025. Updated income goals system to work on individual businesses instead of brand-wide goals. Added business selection field to income goals form, implemented business-specific filtering and progress tracking, and fixed cache invalidation for proper goal updates.\n- June 15, 2025. Implemented customizable money pot system to replace fixed VAT/Tax and Profit allocations. Users can now create custom income categories with personalized names, percentages, and colors for flexible business income management.\n- June 14, 2025. Initial setup\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":8701},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"test-stripe.js":{"content":"// Simple test to verify Stripe key\nimport Stripe from 'stripe';\n\nconsole.log('Testing Stripe connection...');\nconsole.log('Secret key starts with:', process.env.STRIPE_SECRET_KEY?.substring(0, 8) + '...');\nconsole.log('Public key starts with:', process.env.VITE_STRIPE_PUBLIC_KEY?.substring(0, 8) + '...');\nconsole.log('Price ID:', process.env.STRIPE_PRICE_ID);\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.log('❌ STRIPE_SECRET_KEY not found');\n  process.exit(1);\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\ntry {\n  const price = await stripe.prices.retrieve(process.env.STRIPE_PRICE_ID);\n  console.log('✅ Stripe connection successful!');\n  console.log('Price:', price.unit_amount / 100, price.currency);\n} catch (error) {\n  console.log('❌ Stripe error:', error.message);\n}","size_bytes":835},"test-trial-system.js":{"content":"// Test script to verify 14-day trial enforcement\n\nconst BASE_URL = 'http://localhost:5000';\n\nasync function testTrialSystem() {\n  console.log('Testing 14-day trial enforcement system...\\n');\n\n  try {\n    // Test 1: Check current user status\n    console.log('1. Testing current user status:');\n    const userResponse = await fetch(`${BASE_URL}/api/user`);\n    const userData = await userResponse.json();\n    console.log('User data:', JSON.stringify(userData, null, 2));\n\n    // Test 2: Try accessing protected business tool endpoint\n    console.log('\\n2. Testing access to protected endpoint (hourly rate calculations):');\n    const calcResponse = await fetch(`${BASE_URL}/api/hourly-rate-calculations`);\n    console.log('Response status:', calcResponse.status);\n    \n    if (calcResponse.status === 402) {\n      console.log('✓ TRIAL EXPIRED - Access properly blocked');\n      const errorData = await calcResponse.json();\n      console.log('Error message:', errorData.message);\n    } else if (calcResponse.status === 200) {\n      console.log('✓ TRIAL ACTIVE - Access allowed');\n      const calcData = await calcResponse.json();\n      console.log('Data received:', calcData.length, 'records');\n    } else {\n      console.log('Unexpected status:', calcResponse.status);\n      const responseText = await calcResponse.text();\n      console.log('Response:', responseText);\n    }\n\n    // Test 3: Try accessing treatments endpoint\n    console.log('\\n3. Testing access to treatments endpoint:');\n    const treatmentResponse = await fetch(`${BASE_URL}/api/treatments`);\n    console.log('Response status:', treatmentResponse.status);\n    \n    if (treatmentResponse.status === 402) {\n      console.log('✓ TRIAL EXPIRED - Treatments access properly blocked');\n    } else if (treatmentResponse.status === 200) {\n      console.log('✓ TRIAL ACTIVE - Treatments access allowed');\n    }\n\n    // Test 4: Check trial status endpoint\n    console.log('\\n4. Testing trial status endpoint:');\n    const trialStatusResponse = await fetch(`${BASE_URL}/api/trial-status`);\n    if (trialStatusResponse.ok) {\n      const trialData = await trialStatusResponse.json();\n      console.log('Trial status:', JSON.stringify(trialData, null, 2));\n    }\n\n  } catch (error) {\n    console.error('Test failed:', error.message);\n  }\n}\n\n// Run the test\ntestTrialSystem();","size_bytes":2337},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/activecampaign.ts":{"content":"interface ActiveCampaignContact {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  fieldValues?: Array<{\n    field: string;\n    value: string;\n  }>;\n}\n\ninterface ActiveCampaignResponse {\n  contact?: {\n    id: string;\n    email: string;\n  };\n  contacts?: Array<{\n    id: string;\n    email: string;\n  }>;\n  tags?: Array<{\n    id: string;\n    tag: string;\n  }>;\n  tag?: {\n    id: string;\n    tag: string;\n  };\n}\n\nclass ActiveCampaignService {\n  private apiUrl: string;\n  private apiKey: string;\n  private listId: string;\n\n  constructor() {\n    if (!process.env.ACTIVECAMPAIGN_API_URL) {\n      throw new Error('ACTIVECAMPAIGN_API_URL environment variable is required');\n    }\n    if (!process.env.ACTIVECAMPAIGN_API_KEY) {\n      throw new Error('ACTIVECAMPAIGN_API_KEY environment variable is required');\n    }\n    if (!process.env.ACTIVECAMPAIGN_LIST_ID) {\n      throw new Error('ACTIVECAMPAIGN_LIST_ID environment variable is required');\n    }\n\n    this.apiUrl = process.env.ACTIVECAMPAIGN_API_URL;\n    this.apiKey = process.env.ACTIVECAMPAIGN_API_KEY;\n    \n    // Extract list ID from URL if it's a full URL\n    const listIdEnv = process.env.ACTIVECAMPAIGN_LIST_ID;\n    if (listIdEnv.includes('listid=')) {\n      // Extract numeric ID from URL like \"https://kgprofessional.activehosted.com/app/contacts?listid=15&status=1\"\n      const match = listIdEnv.match(/listid=(\\d+)/);\n      this.listId = match ? match[1] : listIdEnv;\n    } else {\n      this.listId = listIdEnv;\n    }\n    \n    console.log(`ActiveCampaign initialized with list ID: ${this.listId}`);\n  }\n\n  private async makeRequest(endpoint: string, method: string = 'GET', data?: any): Promise<any> {\n    const url = `${this.apiUrl}/api/3/${endpoint}`;\n    \n    const options: RequestInit = {\n      method,\n      headers: {\n        'Api-Token': this.apiKey,\n        'Content-Type': 'application/json',\n      },\n    };\n\n    if (data && (method === 'POST' || method === 'PUT')) {\n      options.body = JSON.stringify(data);\n    }\n\n    // Log important requests for debugging\n    if (method === 'POST') {\n      console.log(`ActiveCampaign ${method} request to: ${url}`);\n    }\n\n    try {\n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`ActiveCampaign API Error: ${response.status} - ${errorText}`);\n        console.error(`Failed request URL: ${url}`);\n        console.error(`Failed request method: ${method}`);\n        if (data) {\n          console.error(`Failed request payload:`, JSON.stringify(data, null, 2));\n        }\n        throw new Error(`ActiveCampaign API request failed: ${response.status} - ${errorText}`);\n      }\n\n      const responseData = await response.json();\n      return responseData;\n    } catch (error) {\n      console.error('ActiveCampaign API Error:', error);\n      throw error;\n    }\n  }\n\n  async addContact(contactData: ActiveCampaignContact): Promise<string | null> {\n    try {\n      // First, check if contact already exists\n      const existingContact = await this.findContactByEmail(contactData.email);\n      \n      if (existingContact) {\n        console.log(`Contact already exists in ActiveCampaign: ${contactData.email} (ID: ${existingContact})`);\n        await this.addContactToList(existingContact, this.listId);\n        \n        // Apply the salonsuccessmanager tag to existing contact\n        await this.applyTagToContact(existingContact, 'salonsuccessmanager');\n        \n        return existingContact;\n      }\n\n      // Create new contact with list subscription\n      console.log(`Creating new contact for: ${contactData.email}`);\n      const contactPayload = {\n        contact: {\n          email: contactData.email,\n          firstName: contactData.firstName || '',\n          lastName: contactData.lastName || '',\n          phone: contactData.phone || '',\n          fieldValues: contactData.fieldValues || [],\n          p: [this.listId] // Subscribe to list during creation\n        }\n      };\n\n      const response: ActiveCampaignResponse = await this.makeRequest('contacts', 'POST', contactPayload);\n      \n      if (response.contact?.id) {\n        console.log(`Contact created in ActiveCampaign: ${contactData.email} (ID: ${response.contact.id})`);\n        \n        // Apply the salonsuccessmanager tag\n        await this.applyTagToContact(response.contact.id, 'salonsuccessmanager');\n        \n        // Note: List assignment handled manually in ActiveCampaign\n        console.log(`Contact ready for list assignment: https://kgprofessional.activehosted.com/app/contacts/view/${response.contact.id}`);\n        \n        return response.contact.id;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error adding contact to ActiveCampaign:', error);\n      return null;\n    }\n  }\n\n  private async findContactByEmail(email: string): Promise<string | null> {\n    try {\n      const response: ActiveCampaignResponse = await this.makeRequest(`contacts?email=${encodeURIComponent(email)}`);\n      \n      if (response.contacts && response.contacts.length > 0) {\n        return response.contacts[0].id;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error finding contact by email:', error);\n      return null;\n    }\n  }\n\n  private async addContactToList(contactId: string, listId: string): Promise<void> {\n    const subscriptionPayload = {\n      contactList: {\n        list: listId,\n        contact: contactId,\n        status: 1\n      }\n    };\n\n    try {\n      // Add a small delay to ensure contact is fully created\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const response = await this.makeRequest('contactLists', 'POST', subscriptionPayload);\n      console.log(`Contact ${contactId} successfully added to list ${listId}`);\n      return;\n    } catch (error) {\n      console.error(`Failed to add contact ${contactId} to list ${listId}:`, error);\n      // Try one more time after delay\n      try {\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        const response = await this.makeRequest('contactLists', 'POST', subscriptionPayload);\n        console.log(`Contact ${contactId} added to list ${listId} on retry`);\n      } catch (retryError) {\n        console.error(`Retry failed for contact ${contactId}:`, retryError);\n        // Don't throw - contact creation is more important\n      }\n    }\n  }\n\n  private async findOrCreateTag(tagName: string): Promise<string | null> {\n    try {\n      // First, try to find existing tag\n      const response: ActiveCampaignResponse = await this.makeRequest(`tags?search=${encodeURIComponent(tagName)}`);\n      \n      if (response.tags && response.tags.length > 0) {\n        // Check if we have an exact match\n        const exactMatch = response.tags.find(tag => tag.tag.toLowerCase() === tagName.toLowerCase());\n        if (exactMatch) {\n          console.log(`Tag found: ${tagName} (ID: ${exactMatch.id})`);\n          return exactMatch.id;\n        }\n      }\n\n      // Tag doesn't exist, create it\n      const tagPayload = {\n        tag: {\n          tag: tagName,\n          tagType: 'contact',\n          description: `Auto-created tag for ${tagName}`\n        }\n      };\n\n      const createResponse: ActiveCampaignResponse = await this.makeRequest('tags', 'POST', tagPayload);\n      \n      if (createResponse.tag?.id) {\n        console.log(`Tag created: ${tagName} (ID: ${createResponse.tag.id})`);\n        return createResponse.tag.id;\n      }\n\n      return null;\n    } catch (error) {\n      console.error(`Error finding/creating tag ${tagName}:`, error);\n      return null;\n    }\n  }\n\n  private async applyTagToContact(contactId: string, tagName: string): Promise<void> {\n    try {\n      const tagId = await this.findOrCreateTag(tagName);\n      \n      if (!tagId) {\n        console.error(`Failed to find or create tag: ${tagName}`);\n        return;\n      }\n\n      const contactTagPayload = {\n        contactTag: {\n          contact: contactId,\n          tag: tagId\n        }\n      };\n\n      await this.makeRequest('contactTags', 'POST', contactTagPayload);\n      console.log(`Tag ${tagName} applied to contact ${contactId}`);\n    } catch (error) {\n      console.error(`Error applying tag ${tagName} to contact ${contactId}:`, error);\n      // Don't throw - contact creation is more important than tagging\n    }\n  }\n\n  async sendNotificationEmail(userEmail: string, userName: string, businessType: string, hasPromoCode: boolean): Promise<void> {\n    try {\n      // Add custom fields for business tracking\n      const fieldValues = [\n        {\n          field: 'businessType',\n          value: businessType\n        },\n        {\n          field: 'signupDate',\n          value: new Date().toISOString()\n        },\n        {\n          field: 'hasPromoCode',\n          value: hasPromoCode ? 'Yes' : 'No'\n        }\n      ];\n\n      const contactId = await this.addContact({\n        email: userEmail,\n        firstName: userName.split(' ')[0] || '',\n        lastName: userName.split(' ').slice(1).join(' ') || '',\n        fieldValues\n      });\n\n      console.log(`Signup notification processed for: ${userEmail}`);\n      if (contactId) {\n        console.log(`Contact ID: ${contactId}`);\n      }\n    } catch (error) {\n      console.error('Error sending notification email:', error);\n    }\n  }\n}\n\nexport const activeCampaign = new ActiveCampaignService();","size_bytes":9413},"server/auth.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { activeCampaign } from \"./activecampaign\";\nimport { sendDeveloperNotification } from \"./sendgrid\";\nimport { insertUserSchema, loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst pgStore = connectPg(session);\n\nexport function setupActiveCampaignTest(app: express.Application) {\n  // Test endpoint for ActiveCampaign\n  app.post(\"/api/test-activecampaign\", async (req, res) => {\n    try {\n      console.log('🧪 Testing ActiveCampaign integration...');\n      await activeCampaign.sendNotificationEmail(\n        'test@example.com',\n        'Test User',\n        'Test Business',\n        false\n      );\n      console.log('🧪 ActiveCampaign test SUCCESSFUL!');\n      res.json({ success: true, message: 'ActiveCampaign test completed' });\n    } catch (error) {\n      console.error('🧪 ActiveCampaign test FAILED:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n}\n\nexport function setupSession(app: express.Application) {\n  app.use(session({\n    store: new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || \"your-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    name: 'sessionId', // Explicit session name\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      sameSite: 'lax', // Prevent cross-site issues\n    },\n  }));\n}\n\nexport function requireAuth(req: express.Request, res: express.Response, next: express.NextFunction) {\n  console.log('requireAuth called - Session exists:', !!req.session, 'Session data:', req.session);\n  if (!req.session?.userId) {\n    console.log('No userId in session - rejecting');\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  console.log('requireAuth - User ID from session:', req.session.userId, 'Session ID:', req.sessionID);\n  next();\n}\n\nexport async function requireActiveSubscription(req: express.Request, res: express.Response, next: express.NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  try {\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    // Check if user has active subscription\n    if (user.subscriptionStatus === 'active') {\n      return next();\n    }\n\n    // Check if user has free access (CLIENT6FREE code)\n    if (user.subscriptionStatus === 'free_access' && user.subscriptionEndDate) {\n      const now = new Date();\n      const freeAccessEnd = new Date(user.subscriptionEndDate);\n      \n      if (now <= freeAccessEnd) {\n        return next(); // Free access still active\n      } else {\n        // Free access expired, update status\n        await storage.updateSubscriptionStatus(user.id, 'expired');\n        return res.status(402).json({ \n          message: \"Your 6-month free access has expired. Please subscribe to continue.\",\n          freeAccessExpired: true \n        });\n      }\n    }\n\n    // No valid subscription - redirect to payment\n    return res.status(402).json({ \n      message: \"Please subscribe to access business tools.\",\n      subscriptionRequired: true \n    });\n\n  } catch (error) {\n    console.error('Subscription check error:', error);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n}\n\nexport function setupAuthRoutes(app: express.Application) {\n  // Register new user\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const user = await storage.createUser(userData);\n      console.log('🔍 User created successfully, now updating subscription status...');\n      \n      // Set inactive status - users need to subscribe to access business tools\n      try {\n        await storage.updateSubscriptionStatus(user.id, 'inactive');\n        console.log('🔍 Successfully updated subscription status, now starting ActiveCampaign...');\n      } catch (error) {\n        console.error('❌ Failed to update subscription status:', error);\n        // Continue with ActiveCampaign integration anyway\n      }\n      \n      // Send ActiveCampaign notification immediately after user creation\n      console.log('🔍 About to start ActiveCampaign integration...');\n      console.log(`✅ Starting ActiveCampaign integration for: ${user.email}`);\n      try {\n        console.log('🔍 Calling activeCampaign.sendNotificationEmail...');\n        await activeCampaign.sendNotificationEmail(\n          user.email,\n          user.name,\n          user.businessType,\n          false\n        );\n        console.log(`✅ ActiveCampaign integration completed successfully for: ${user.email}`);\n        \n        console.log('🔍 Calling sendDeveloperNotification...');\n        // Send developer notification\n        await sendDeveloperNotification(\n          user.email,\n          user.name,\n          user.businessType,\n          'registration',\n          'New user registered'\n        );\n        console.log(`✅ Developer notification sent for: ${user.email}`);\n      } catch (error) {\n        console.error('❌ ActiveCampaign integration failed:', error);\n        // Don't fail registration if notification fails\n      }\n      \n      // Regenerate session for new user\n      req.session.regenerate(async (err) => {\n        if (err) {\n          console.error('Session regeneration error during registration:', err);\n          return res.status(500).json({ message: \"Registration failed\" });\n        }\n        \n        req.session.userId = user.id;\n        console.log('Registration successful - User ID:', user.id, 'Session ID:', req.sessionID, 'Email:', user.email);\n        \n        req.session.save(async (err) => {\n          if (err) {\n            console.error('Session save error during registration:', err);\n            return res.status(500).json({ message: \"Registration failed\" });\n          }\n          \n          // Get updated user data with subscription status\n          const updatedUser = await storage.getUser(user.id);\n          if (!updatedUser) {\n            return res.status(500).json({ message: \"Failed to retrieve user data\" });\n          }\n          \n          res.status(201).json({\n            id: updatedUser.id,\n            email: updatedUser.email,\n            name: updatedUser.name,\n            businessType: updatedUser.businessType,\n            subscriptionStatus: updatedUser.subscriptionStatus,\n            subscriptionEndDate: updatedUser.subscriptionEndDate,\n          });\n        });\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Login user\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      console.log('Login attempt received:', req.body);\n      const { email, password } = loginSchema.parse(req.body);\n      console.log('Parsed credentials - Email:', email, 'Password length:', password.length);\n      \n      const user = await storage.verifyPassword(email, password);\n      console.log('Password verification result:', user ? `User found: ${user.id}` : 'No user found');\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Store user ID directly in session\n      req.session.userId = user.id;\n      console.log('LOGIN SUCCESS - User ID:', user.id, 'Session ID:', req.sessionID, 'Email:', user.email);\n      \n      // Force session save and verify\n      req.session.save((err) => {\n        if (err) {\n          console.error('Session save failed:', err);\n          return res.status(500).json({ message: \"Session save failed\" });\n        }\n        \n        console.log('Session saved - Verifying userId stored:', req.session.userId);\n        \n        // Verify session was saved correctly\n        if (!req.session.userId) {\n          console.error('CRITICAL: Session userId not stored after save!');\n          return res.status(500).json({ message: \"Session storage failed\" });\n        }\n        \n        res.json({\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          businessType: user.businessType,\n          subscriptionStatus: user.subscriptionStatus,\n          subscriptionEndDate: user.subscriptionEndDate,\n        });\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Logout user\n  app.post(\"/api/auth/logout\", (req, res) => {\n    console.log('Logout request - User ID:', req.session?.userId, 'Session ID:', req.sessionID);\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Session destroy error:', err);\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.clearCookie('sessionId'); // Match the session name we set\n      res.clearCookie('connect.sid'); // Clear default cookie too\n      console.log('Logout successful - session destroyed');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        businessType: user.businessType,\n        subscriptionStatus: user.subscriptionStatus,\n        subscriptionEndDate: user.subscriptionEndDate,\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n}\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: number;\n  }\n}","size_bytes":10596},"server/database-storage.ts":{"content":"import { \n  users, \n  hourlyRateCalculations, \n  treatments, \n  expenses,\n  businesses,\n  weeklyIncomes,\n  incomeGoals,\n  stockPurchases,\n  moneyPots,\n  type User, \n  type InsertUser,\n  type HourlyRateCalculation,\n  type InsertHourlyRateCalculation,\n  type Treatment,\n  type InsertTreatment,\n  type Expense,\n  type InsertExpense,\n  type Business,\n  type InsertBusiness,\n  type WeeklyIncome,\n  type InsertWeeklyIncome,\n  type IncomeGoal,\n  type InsertIncomeGoal,\n  type StockPurchase,\n  type InsertStockPurchase,\n  type MoneyPot,\n  type InsertMoneyPot\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, gt } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\nimport type { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      businessType: users.businessType,\n      subscriptionStatus: users.subscriptionStatus,\n      subscriptionEndDate: users.subscriptionEndDate,\n      stripeCustomerId: users.stripeCustomerId,\n      stripeSubscriptionId: users.stripeSubscriptionId,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n    }).from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(userData.password, 12);\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        password: hashedPassword,\n        subscriptionStatus: \"inactive\", // Will be updated when Stripe subscription is created\n      })\n      .returning();\n    return user;\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) return null;\n    \n    // Return user without password for security\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword as User;\n  }\n\n  async updateUserStripeInfo(userId: number, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateSubscriptionStatus(userId: number, status: string, endDate?: Date): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        subscriptionStatus: status,\n        subscriptionEndDate: endDate,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const allUsers = await db.select({\n      id: users.id,\n      email: users.email,\n      name: users.name,\n      businessType: users.businessType,\n      subscriptionStatus: users.subscriptionStatus,\n      subscriptionEndDate: users.subscriptionEndDate,\n      stripeCustomerId: users.stripeCustomerId,\n      stripeSubscriptionId: users.stripeSubscriptionId,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt,\n    }).from(users).orderBy(desc(users.createdAt));\n    return allUsers;\n  }\n\n  async updateSubscriptionEndDate(userId: number, endDate: Date): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({\n        subscriptionEndDate: endDate,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Hourly rate calculation operations\n  async createHourlyRateCalculation(calculation: InsertHourlyRateCalculation): Promise<HourlyRateCalculation> {\n    // First, insert the new calculation\n    const [result] = await db\n      .insert(hourlyRateCalculations)\n      .values(calculation)\n      .returning();\n\n    // Then, keep only the last 5 calculations for this user\n    const allCalculations = await db\n      .select()\n      .from(hourlyRateCalculations)\n      .where(eq(hourlyRateCalculations.userId, calculation.userId))\n      .orderBy(desc(hourlyRateCalculations.createdAt));\n\n    // If we have more than 5 calculations, delete the oldest ones\n    if (allCalculations.length > 5) {\n      const calculationsToDelete = allCalculations.slice(5);\n      const idsToDelete = calculationsToDelete.map(calc => calc.id);\n      \n      for (const id of idsToDelete) {\n        await db\n          .delete(hourlyRateCalculations)\n          .where(eq(hourlyRateCalculations.id, id));\n      }\n    }\n\n    return result;\n  }\n\n  async getHourlyRateCalculationsByUserId(userId: number): Promise<HourlyRateCalculation[]> {\n    return await db\n      .select()\n      .from(hourlyRateCalculations)\n      .where(eq(hourlyRateCalculations.userId, userId))\n      .orderBy(desc(hourlyRateCalculations.createdAt))\n      .limit(5);\n  }\n\n  async getLatestHourlyRateCalculation(userId: number): Promise<HourlyRateCalculation | undefined> {\n    const [calculation] = await db\n      .select()\n      .from(hourlyRateCalculations)\n      .where(eq(hourlyRateCalculations.userId, userId))\n      .orderBy(desc(hourlyRateCalculations.createdAt))\n      .limit(1);\n    return calculation;\n  }\n\n  // Treatment operations\n  async createTreatment(treatment: InsertTreatment): Promise<Treatment> {\n    // Calculate profit margin (product cost is now included in overhead cost)\n    const price = parseFloat(treatment.price.toString());\n    const overheadCost = parseFloat(treatment.overheadCost.toString());\n    const profit = price - overheadCost;\n    const profitMargin = price > 0 ? (profit / price) * 100 : 0;\n    \n    const treatmentWithMargin = {\n      ...treatment,\n      profitMargin: profitMargin.toFixed(2)\n    };\n    \n    const [result] = await db\n      .insert(treatments)\n      .values(treatmentWithMargin)\n      .returning();\n    return result;\n  }\n\n  async getTreatmentsByUserId(userId: number): Promise<Treatment[]> {\n    return await db\n      .select()\n      .from(treatments)\n      .where(eq(treatments.userId, userId))\n      .orderBy(desc(treatments.createdAt));\n  }\n\n  async updateTreatment(id: number, treatment: Partial<InsertTreatment>): Promise<Treatment | undefined> {\n    const [result] = await db\n      .update(treatments)\n      .set(treatment)\n      .where(eq(treatments.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteTreatment(id: number): Promise<boolean> {\n    const result = await db\n      .delete(treatments)\n      .where(eq(treatments.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Expense operations\n  async createExpense(expense: InsertExpense): Promise<Expense> {\n    const [result] = await db\n      .insert(expenses)\n      .values(expense)\n      .returning();\n    return result;\n  }\n\n  async getExpensesByUserId(userId: number): Promise<Expense[]> {\n    return await db\n      .select()\n      .from(expenses)\n      .where(eq(expenses.userId, userId))\n      .orderBy(desc(expenses.date));\n  }\n\n  async getExpensesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<Expense[]> {\n    return await db\n      .select()\n      .from(expenses)\n      .where(\n        and(\n          eq(expenses.userId, userId),\n          gte(expenses.date, startDate),\n          lte(expenses.date, endDate)\n        )\n      )\n      .orderBy(desc(expenses.date));\n  }\n\n  async deleteExpense(id: number): Promise<boolean> {\n    const result = await db\n      .delete(expenses)\n      .where(eq(expenses.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Business operations\n  async createBusiness(business: InsertBusiness): Promise<Business> {\n    const [result] = await db\n      .insert(businesses)\n      .values(business)\n      .returning();\n    return result;\n  }\n\n  async getBusinessesByUserId(userId: number): Promise<Business[]> {\n    return await db\n      .select()\n      .from(businesses)\n      .where(eq(businesses.userId, userId))\n      .orderBy(desc(businesses.createdAt));\n  }\n\n  async updateBusiness(id: number, business: Partial<InsertBusiness>): Promise<Business | undefined> {\n    const [result] = await db\n      .update(businesses)\n      .set(business)\n      .where(eq(businesses.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteBusiness(id: number): Promise<boolean> {\n    const result = await db\n      .delete(businesses)\n      .where(eq(businesses.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Weekly income operations\n  async createOrUpdateWeeklyIncome(weeklyIncome: InsertWeeklyIncome): Promise<WeeklyIncome> {\n    const existing = await db\n      .select()\n      .from(weeklyIncomes)\n      .where(\n        and(\n          eq(weeklyIncomes.businessId, weeklyIncome.businessId),\n          eq(weeklyIncomes.weekStartDate, weeklyIncome.weekStartDate)\n        )\n      )\n      .limit(1);\n\n    if (existing.length > 0) {\n      const [result] = await db\n        .update(weeklyIncomes)\n        .set({ weeklyTotal: weeklyIncome.weeklyTotal })\n        .where(eq(weeklyIncomes.id, existing[0].id))\n        .returning();\n      return result;\n    } else {\n      const [result] = await db\n        .insert(weeklyIncomes)\n        .values(weeklyIncome)\n        .returning();\n      return result;\n    }\n  }\n\n  async getWeeklyIncomesByBusinessId(businessId: number): Promise<WeeklyIncome[]> {\n    return await db\n      .select()\n      .from(weeklyIncomes)\n      .where(eq(weeklyIncomes.businessId, businessId))\n      .orderBy(desc(weeklyIncomes.weekStartDate));\n  }\n\n  async getWeeklyIncomesByUserId(userId: number): Promise<WeeklyIncome[]> {\n    return await db\n      .select({\n        id: weeklyIncomes.id,\n        businessId: weeklyIncomes.businessId,\n        weekStartDate: weeklyIncomes.weekStartDate,\n        weeklyTotal: weeklyIncomes.weeklyTotal,\n      })\n      .from(weeklyIncomes)\n      .innerJoin(businesses, eq(weeklyIncomes.businessId, businesses.id))\n      .where(eq(businesses.userId, userId))\n      .orderBy(desc(weeklyIncomes.weekStartDate));\n  }\n\n  async getWeeklyIncomeByWeek(businessId: number, weekStartDate: Date): Promise<WeeklyIncome | undefined> {\n    const [result] = await db\n      .select()\n      .from(weeklyIncomes)\n      .where(\n        and(\n          eq(weeklyIncomes.businessId, businessId),\n          eq(weeklyIncomes.weekStartDate, weekStartDate)\n        )\n      )\n      .limit(1);\n    return result;\n  }\n\n  // Income goal operations\n  async createIncomeGoal(goal: InsertIncomeGoal & { userId: number }): Promise<IncomeGoal> {\n    const [result] = await db\n      .insert(incomeGoals)\n      .values(goal)\n      .returning();\n    return result;\n  }\n\n  async getIncomeGoalsByUserId(userId: number): Promise<IncomeGoal[]> {\n    return await db\n      .select()\n      .from(incomeGoals)\n      .where(eq(incomeGoals.userId, userId))\n      .orderBy(desc(incomeGoals.createdAt));\n  }\n\n  async getIncomeGoalsByBusinessId(businessId: number): Promise<IncomeGoal[]> {\n    return await db\n      .select()\n      .from(incomeGoals)\n      .where(eq(incomeGoals.businessId, businessId))\n      .orderBy(desc(incomeGoals.createdAt));\n  }\n\n  async updateIncomeGoal(id: number, goal: Partial<InsertIncomeGoal>): Promise<IncomeGoal | undefined> {\n    const [result] = await db\n      .update(incomeGoals)\n      .set(goal)\n      .where(eq(incomeGoals.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteIncomeGoal(id: number): Promise<boolean> {\n    const result = await db\n      .delete(incomeGoals)\n      .where(eq(incomeGoals.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Stock purchase operations\n  async createStockPurchase(purchase: InsertStockPurchase): Promise<StockPurchase> {\n    const purchaseData = {\n      ...purchase,\n      purchaseDate: new Date(purchase.purchaseDate),\n    };\n    \n    const [result] = await db\n      .insert(stockPurchases)\n      .values(purchaseData)\n      .returning();\n    return result;\n  }\n\n  async getStockPurchasesByUserId(userId: number): Promise<StockPurchase[]> {\n    return await db\n      .select()\n      .from(stockPurchases)\n      .where(eq(stockPurchases.userId, userId))\n      .orderBy(desc(stockPurchases.createdAt));\n  }\n\n  async getStockPurchasesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<StockPurchase[]> {\n    return await db\n      .select()\n      .from(stockPurchases)\n      .where(\n        and(\n          eq(stockPurchases.userId, userId),\n          gte(stockPurchases.purchaseDate, startDate),\n          lte(stockPurchases.purchaseDate, endDate)\n        )\n      )\n      .orderBy(desc(stockPurchases.purchaseDate));\n  }\n\n  async deleteStockPurchase(id: number): Promise<boolean> {\n    const result = await db\n      .delete(stockPurchases)\n      .where(eq(stockPurchases.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Password reset operations\n  async setPasswordResetToken(userId: number, token: string, expires: Date): Promise<User | undefined> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({\n          passwordResetToken: token,\n          passwordResetExpires: expires,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return user;\n    } catch (error) {\n      console.error('Error setting password reset token:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    try {\n      const [user] = await db\n        .select()\n        .from(users)\n        .where(and(\n          eq(users.passwordResetToken, token),\n          gt(users.passwordResetExpires, new Date())\n        ));\n      return user;\n    } catch (error) {\n      console.error('Error getting user by reset token:', error);\n      return undefined;\n    }\n  }\n\n  async clearPasswordResetToken(userId: number): Promise<User | undefined> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({\n          passwordResetToken: null,\n          passwordResetExpires: null,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return user;\n    } catch (error) {\n      console.error('Error clearing password reset token:', error);\n      return undefined;\n    }\n  }\n\n  async updatePassword(userId: number, hashedPassword: string): Promise<User | undefined> {\n    try {\n      const [user] = await db\n        .update(users)\n        .set({\n          password: hashedPassword,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return user;\n    } catch (error) {\n      console.error('Error updating password:', error);\n      return undefined;\n    }\n  }\n\n  // Money pot operations\n  async createMoneyPot(pot: InsertMoneyPot): Promise<MoneyPot> {\n    const [result] = await db\n      .insert(moneyPots)\n      .values({\n        ...pot,\n        userId: pot.userId,\n      })\n      .returning();\n    return result;\n  }\n\n  async getMoneyPotsByUserId(userId: number): Promise<MoneyPot[]> {\n    return await db\n      .select()\n      .from(moneyPots)\n      .where(and(eq(moneyPots.userId, userId), eq(moneyPots.isActive, true)))\n      .orderBy(moneyPots.sortOrder, moneyPots.name);\n  }\n\n  async getMoneyPotsByBusinessId(businessId: number): Promise<MoneyPot[]> {\n    return await db\n      .select()\n      .from(moneyPots)\n      .where(and(eq(moneyPots.businessId, businessId), eq(moneyPots.isActive, true)))\n      .orderBy(moneyPots.sortOrder, moneyPots.name);\n  }\n\n  async updateMoneyPot(id: number, pot: Partial<InsertMoneyPot>): Promise<MoneyPot | undefined> {\n    try {\n      const [result] = await db\n        .update(moneyPots)\n        .set({\n          ...pot,\n          updatedAt: new Date(),\n        })\n        .where(eq(moneyPots.id, id))\n        .returning();\n      return result;\n    } catch (error) {\n      console.error('Error updating money pot:', error);\n      return undefined;\n    }\n  }\n\n  async deleteMoneyPot(id: number): Promise<boolean> {\n    try {\n      await db\n        .update(moneyPots)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(eq(moneyPots.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting money pot:', error);\n      return false;\n    }\n  }\n}","size_bytes":16588},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gmail-smtp.ts":{"content":"import nodemailer from 'nodemailer';\n\ninterface GmailConfig {\n  email: string;\n  password: string;\n}\n\ninterface EmailParams {\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendPasswordResetEmailViaGmail(\n  recipientEmail: string, \n  resetToken: string, \n  baseUrl: string,\n  gmailConfig: GmailConfig\n): Promise<boolean> {\n  const resetLink = `${baseUrl}/reset-password?token=${resetToken}`;\n  \n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Reset Your Password - Katie Godfrey Business Coach</title>\n        <style>\n            body { \n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                line-height: 1.6;\n                color: #333;\n                max-width: 600px;\n                margin: 0 auto;\n                padding: 20px;\n                background-color: #f8f9fa;\n            }\n            .container {\n                background: white;\n                padding: 40px;\n                border-radius: 8px;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 30px;\n                padding-bottom: 20px;\n                border-bottom: 2px solid #f1f3f4;\n            }\n            .logo {\n                font-size: 24px;\n                font-weight: bold;\n                color: #d946ef;\n                margin-bottom: 10px;\n            }\n            .button {\n                display: inline-block;\n                background: linear-gradient(135deg, #d946ef 0%, #a855f7 100%);\n                color: white;\n                padding: 15px 30px;\n                text-decoration: none;\n                border-radius: 6px;\n                font-weight: 600;\n                margin: 20px 0;\n            }\n            .footer {\n                margin-top: 30px;\n                padding-top: 20px;\n                border-top: 1px solid #e5e7eb;\n                font-size: 14px;\n                color: #6b7280;\n                text-align: center;\n            }\n            .warning {\n                background-color: #fef3cd;\n                border: 1px solid #fde68a;\n                border-radius: 6px;\n                padding: 15px;\n                margin: 20px 0;\n                color: #92400e;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">Katie Godfrey Business Coach</div>\n                <h1 style=\"margin: 0; color: #1f2937;\">Reset Your Password</h1>\n            </div>\n            \n            <p>Hello,</p>\n            \n            <p>You recently requested to reset your password for your Salon Growth Manager account. Click the button below to reset it:</p>\n            \n            <div style=\"text-align: center;\">\n                <a href=\"${resetLink}\" class=\"button\">Reset My Password</a>\n            </div>\n            \n            <div class=\"warning\">\n                <strong>Important:</strong> This link will expire in 1 hour for security reasons. If you don't reset your password within this time, you'll need to request a new reset link.\n            </div>\n            \n            <p>If the button doesn't work, you can copy and paste this link into your browser:</p>\n            <p style=\"word-break: break-all; background: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace;\">\n                ${resetLink}\n            </p>\n            \n            <p><strong>If you didn't request this password reset, please ignore this email.</strong> Your password will remain unchanged.</p>\n            \n            <div class=\"footer\">\n                <p>This email was sent by Katie Godfrey Business Coach<br>\n                Need help? Contact support at <a href=\"mailto:support@katiegodfrey.com\">support@katiegodfrey.com</a></p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n\n  const textContent = `\nReset Your Password - Katie Godfrey Business Coach\n\nHello,\n\nYou recently requested to reset your password for your Salon Growth Manager account.\n\nTo reset your password, click this link or copy it into your browser:\n${resetLink}\n\nIMPORTANT: This link will expire in 1 hour for security reasons.\n\nIf you didn't request this password reset, please ignore this email. Your password will remain unchanged.\n\nNeed help? Contact support at support@katiegodfrey.com\n\n---\nKatie Godfrey Business Coach\n  `;\n\n  try {\n    // Create transporter for Ionos email\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.ionos.co.uk',\n      port: 587,\n      secure: false,\n      auth: {\n        user: gmailConfig.email,\n        pass: gmailConfig.password\n      }\n    });\n\n    // Send email\n    await transporter.sendMail({\n      from: `\"Katie Godfrey Business Coach\" <${gmailConfig.email}>`,\n      to: recipientEmail,\n      subject: 'Reset Your Password - Katie Godfrey Business Coach',\n      text: textContent,\n      html: htmlContent,\n    });\n\n    console.log(`Password reset email sent successfully to: ${recipientEmail}`);\n    return true;\n  } catch (error: any) {\n    console.error('Gmail SMTP email error:', error);\n    return false;\n  }\n}","size_bytes":5359},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { sessionConfig, setupSimpleAuth } from \"./simple-auth\";\nimport { setupStripeWebhooks } from \"./stripe-webhooks\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Setup session management FIRST\napp.use(sessionConfig);\n\n// Debug middleware to track all requests (after session setup)\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.url} - Session ID: ${req.sessionID}, User ID: ${req.session?.userId}`);\n  next();\n});\n\n// Setup authentication routes\nsetupSimpleAuth(app);\n\n// Setup Stripe webhooks (before other middleware)\nsetupStripeWebhooks(app);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Prevent sending response if headers already sent\n    if (res.headersSent) {\n      return next(err);\n    }\n\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2546},"server/ionos-smtp.ts":{"content":"import nodemailer from 'nodemailer';\n\ninterface IonosConfig {\n  email: string;\n  password: string;\n}\n\ninterface EmailParams {\n  to: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendPasswordResetEmailViaIonos(\n  email: string,\n  resetToken: string,\n  baseUrl: string,\n  ionosConfig: IonosConfig\n): Promise<boolean> {\n  const resetLink = `${baseUrl}/reset-password?token=${resetToken}`;\n  \n  const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Password Reset - Katie Godfrey Business Coach</title>\n</head>\n<body style=\"margin: 0; padding: 0; font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n  <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;\">\n    <div style=\"background-color: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);\">\n      \n      <!-- Header -->\n      <div style=\"text-align: center; margin-bottom: 30px;\">\n        <h1 style=\"color: #2c3e50; margin: 0; font-size: 28px;\">Katie Godfrey</h1>\n        <p style=\"color: #7f8c8d; margin: 5px 0 0 0; font-size: 16px;\">Business Coach</p>\n      </div>\n      \n      <!-- Main Content -->\n      <div style=\"margin-bottom: 30px;\">\n        <h2 style=\"color: #2c3e50; margin: 0 0 20px 0; font-size: 24px;\">Reset Your Password</h2>\n        \n        <p style=\"margin: 0 0 20px 0; font-size: 16px;\">\n          Hello,\n        </p>\n        \n        <p style=\"margin: 0 0 20px 0; font-size: 16px;\">\n          We received a request to reset your password for your Salon Growth Manager account. Click the button below to create a new password:\n        </p>\n        \n        <!-- Reset Button -->\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${resetLink}\" style=\"display: inline-block; background-color: #3498db; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; font-weight: bold;\">Reset Password</a>\n        </div>\n        \n        <p style=\"margin: 0 0 20px 0; font-size: 16px;\">\n          If the button doesn't work, copy and paste this link into your browser:\n        </p>\n        \n        <p style=\"margin: 0 0 20px 0; font-size: 14px; word-break: break-all; background-color: #f8f9fa; padding: 10px; border-radius: 4px;\">\n          ${resetLink}\n        </p>\n        \n        <p style=\"margin: 0 0 20px 0; font-size: 16px;\">\n          This link will expire in 1 hour for security reasons.\n        </p>\n        \n        <p style=\"margin: 0 0 20px 0; font-size: 16px;\">\n          If you didn't request this password reset, please ignore this email. Your password will remain unchanged.\n        </p>\n      </div>\n      \n      <!-- Footer -->\n      <div style=\"border-top: 1px solid #eee; padding-top: 20px; text-align: center;\">\n        <p style=\"margin: 0; font-size: 14px; color: #7f8c8d;\">\n          Best regards,<br>\n          Katie Godfrey Business Coach\n        </p>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n  `;\n\n  const textContent = `\nPassword Reset Request\n\nHello,\n\nWe received a request to reset your password for your Salon Growth Manager account.\n\nTo reset your password, please visit this link:\n${resetLink}\n\nThis link will expire in 1 hour for security reasons.\n\nIf you didn't request this password reset, please ignore this email. Your password will remain unchanged.\n\n---\nBest regards,\nKatie Godfrey Business Coach\n  `;\n\n  try {\n    // Create transporter for Ionos email\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.ionos.co.uk',\n      port: 587,\n      secure: false,\n      auth: {\n        user: ionosConfig.email,\n        pass: ionosConfig.password\n      }\n    });\n\n    // Send email\n    await transporter.sendMail({\n      from: `\"Katie Godfrey Business Coach\" <${ionosConfig.email}>`,\n      to: email,\n      subject: 'Reset Your Password - Salon Growth Manager',\n      text: textContent,\n      html: htmlContent\n    });\n\n    console.log(`✓ Password reset email sent successfully to: ${email}`);\n    return true;\n  } catch (error) {\n    console.error('Ionos SMTP email error:', error);\n    return false;\n  }\n}\n\nexport async function sendEmail(params: EmailParams, ionosConfig: IonosConfig): Promise<boolean> {\n  try {\n    // Create transporter for Ionos email\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.ionos.co.uk',\n      port: 587,\n      secure: false,\n      auth: {\n        user: ionosConfig.email,\n        pass: ionosConfig.password\n      }\n    });\n\n    await transporter.sendMail({\n      from: `\"Katie Godfrey Business Coach\" <${ionosConfig.email}>`,\n      to: params.to,\n      subject: params.subject,\n      text: params.text,\n      html: params.html\n    });\n\n    return true;\n  } catch (error) {\n    console.error('Ionos email error:', error);\n    return false;\n  }\n}","size_bytes":4908},"server/new-auth.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport bcrypt from \"bcryptjs\";\nimport crypto from \"crypto\";\nimport { storage } from \"./storage\";\nimport { activeCampaign } from \"./activecampaign\";\nimport { insertUserSchema, loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst pgStore = connectPg(session);\n\nexport function setupNewSession(app: express.Application) {\n  app.use(session({\n    store: new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n      tableName: 'user_sessions',\n    }),\n    secret: process.env.SESSION_SECRET || \"your-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    name: 'salon_growth_sid',\n    cookie: {\n      secure: false,\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      sameSite: 'lax',\n    },\n    genid: function(req) {\n      return require('crypto').randomBytes(32).toString('hex');\n    },\n  }));\n}\n\nexport function newRequireAuth(req: express.Request, res: express.Response, next: express.NextFunction) {\n  console.log('NEW AUTH CHECK - Session:', req.sessionID, 'User ID:', req.session?.userId);\n  \n  if (!req.session?.userId) {\n    console.log('Authentication failed - no userId in session');\n    return res.status(401).json({ message: \"Please log in to continue\" });\n  }\n  \n  console.log('Authentication successful for user:', req.session.userId);\n  next();\n}\n\nexport async function newRequireActiveSubscription(req: express.Request, res: express.Response, next: express.NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ message: \"Please log in to continue\" });\n  }\n\n  try {\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    // Check subscription status\n    if (user.subscriptionStatus === 'active') {\n      return next();\n    }\n\n    // Check for free access with valid end date\n    if (user.subscriptionStatus === 'free_access' && user.subscriptionEndDate) {\n      if (new Date() <= new Date(user.subscriptionEndDate)) {\n        return next();\n      } else {\n        await storage.updateSubscriptionStatus(user.id, 'expired');\n        return res.status(402).json({ \n          message: \"Your free access has expired. Please subscribe to continue.\",\n          subscriptionRequired: true \n        });\n      }\n    }\n\n    return res.status(402).json({ \n      message: \"Please subscribe to access business tools.\",\n      subscriptionRequired: true \n    });\n\n  } catch (error) {\n    console.error('Subscription check error:', error);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n}\n\nexport function setupNewAuthRoutes(app: express.Application) {\n  // Register new user\n  app.post(\"/api/v2/auth/register\", async (req, res) => {\n    try {\n      console.log('NEW REGISTRATION REQUEST:', req.body);\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      const user = await storage.createUser(userData);\n      await storage.updateSubscriptionStatus(user.id, 'inactive');\n      \n      // Create new session\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error('Session regeneration failed:', err);\n          return res.status(500).json({ message: \"Registration failed\" });\n        }\n        \n        req.session.userId = user.id;\n        console.log('NEW REGISTRATION SUCCESS - User:', user.id, 'Session:', req.sessionID);\n        \n        req.session.save((err) => {\n          if (err) {\n            console.error('Session save failed:', err);\n            return res.status(500).json({ message: \"Registration failed\" });\n          }\n          \n          console.log('Session saved successfully, sending response');\n          \n          // Send response immediately\n          res.status(201).json({\n            message: \"Registration successful\",\n            user: {\n              id: user.id,\n              email: user.email,\n              name: user.name,\n              businessType: user.businessType,\n              subscriptionStatus: 'inactive',\n              subscriptionEndDate: null,\n            }\n          });\n        });\n      });\n      \n      // Send ActiveCampaign notification outside of session callbacks to avoid blocking\n      setImmediate(async () => {\n        try {\n          console.log(`Sending ActiveCampaign notification for: ${user.email}`);\n          await activeCampaign.sendNotificationEmail(\n            user.email,\n            user.name,\n            user.businessType,\n            false\n          );\n          console.log(`ActiveCampaign notification completed for: ${user.email}`);\n        } catch (error) {\n          console.error('ActiveCampaign notification failed:', error);\n        }\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login user\n  app.post(\"/api/v2/auth/login\", async (req, res) => {\n    try {\n      console.log('NEW LOGIN REQUEST:', req.body);\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.verifyPassword(email, password);\n      console.log('Password verification:', user ? `User ${user.id} found` : 'Invalid credentials');\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Create fresh session\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error('Login session regeneration failed:', err);\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        \n        req.session.userId = user.id;\n        console.log('NEW LOGIN SUCCESS - User:', user.id, 'Session:', req.sessionID);\n        \n        req.session.save((err) => {\n          if (err) {\n            console.error('Login session save failed:', err);\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          \n          console.log('Login session saved successfully');\n          res.json({\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            businessType: user.businessType,\n            subscriptionStatus: user.subscriptionStatus,\n            subscriptionEndDate: user.subscriptionEndDate,\n          });\n        });\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Logout user\n  app.post(\"/api/v2/auth/logout\", (req, res) => {\n    console.log('LOGOUT REQUEST - User:', req.session?.userId, 'Session:', req.sessionID);\n    \n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout failed:', err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      \n      res.clearCookie('salon_session');\n      console.log('Logout successful');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/v2/auth/user\", newRequireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        businessType: user.businessType,\n        subscriptionStatus: user.subscriptionStatus,\n        subscriptionEndDate: user.subscriptionEndDate,\n      });\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Password reset request\n  app.post(\"/api/v2/auth/reset-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists\n        return res.json({ message: \"If that email exists, you'll receive reset instructions\" });\n      }\n      \n      // Generate reset token\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n      \n      // Store reset token (you'll need to add these fields to user schema)\n      // await storage.setPasswordResetToken(user.id, resetToken, resetExpires);\n      \n      // For now, just return success (implement email sending later)\n      console.log('Password reset requested for:', email, 'Token:', resetToken);\n      res.json({ message: \"If that email exists, you'll receive reset instructions\" });\n      \n    } catch (error) {\n      console.error('Password reset error:', error);\n      res.status(500).json({ message: \"Password reset failed\" });\n    }\n  });\n}","size_bytes":9457},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { activeCampaign } from \"./activecampaign\";\nimport { TrialManager } from \"./trial-manager\";\nimport { requireAuth } from \"./simple-auth\";\nimport { sendDeveloperNotification } from \"./sendgrid\";\nimport { \n  insertHourlyRateCalculationSchema, \n  insertTreatmentSchema, \n  insertExpenseSchema,\n  insertBusinessSchema,\n  insertWeeklyIncomeSchema,\n  insertIncomeGoalSchema,\n  insertStockPurchaseSchema,\n  insertMoneyPotSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-05-28.basil\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Remove old auth setup completely\n  // setupSession(app);\n  // setupAuthRoutes(app);\n\n  // Password reset request\n  app.post(\"/api/v2/auth/reset-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return res.json({ message: \"If that email exists, you'll receive reset instructions\" });\n      }\n      \n      // Generate reset token\n      const crypto = await import('crypto');\n      const resetToken = crypto.randomBytes(32).toString('hex');\n      const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n      \n      // Store reset token in database\n      await storage.setPasswordResetToken(user.id, resetToken, resetExpires);\n      \n      // Send automated password reset email via Gmail\n      const baseUrl = `${req.protocol}://${req.get('host')}`;\n      \n      // Ionos email configuration\n      const gmailConfig = {\n        email: process.env.GMAIL_EMAIL || 'Info@kgbusinessmentor.com', // Your Ionos email address\n        password: process.env.GMAIL_PASSWORD || 'Katielola15!' // Your Ionos email password\n      };\n      \n      // Log reset request for monitoring\n      console.log(`✓ Password reset requested for: ${email}`);\n      \n      // Return reset link directly for immediate use\n      const resetUrl = `${baseUrl}/reset-password?token=${resetToken}`;\n      res.json({ \n        message: \"Password reset link generated\", \n        resetLink: resetUrl,\n        expires: resetExpires.toISOString()\n      });\n      \n    } catch (error) {\n      console.error('Password reset error:', error);\n      res.status(500).json({ message: \"Password reset failed\" });\n    }\n  });\n\n  // Handle password reset form submission\n  app.post(\"/api/v2/auth/confirm-reset\", async (req, res) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      if (!token || !newPassword) {\n        return res.status(400).json({ message: \"Token and new password are required\" });\n      }\n      \n      const user = await storage.getUserByResetToken(token);\n      if (!user) {\n        return res.status(400).json({ message: \"Invalid or expired reset token\" });\n      }\n      \n      // Update password\n      const bcrypt = await import('bcryptjs');\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update password and clear reset token\n      await storage.updatePassword(user.id, hashedPassword);\n      await storage.clearPasswordResetToken(user.id);\n      \n      console.log(`✓ Password successfully reset for user: ${user.email}`);\n      res.json({ message: \"Password reset successful\" });\n      \n    } catch (error) {\n      console.error('Password reset confirmation error:', error);\n      res.status(500).json({ message: \"Password reset failed\" });\n    }\n  });\n\n  // Force redirect all auth requests to new v2 system\n  app.get(\"/api/auth/user\", (req, res) => {\n    res.redirect(301, \"/api/v2/auth/user\");\n  });\n\n  app.post(\"/api/auth/login\", (req, res) => {\n    res.redirect(307, \"/api/v2/auth/login\");\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.redirect(307, \"/api/v2/auth/logout\");\n  });\n\n  // Test endpoint to verify trial enforcement without session auth\n  app.get(\"/api/test-trial-enforcement\", async (req, res) => {\n    try {\n      const user = await storage.getUser(1); // Demo user\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if user has active subscription\n      if (user.subscriptionStatus === 'active') {\n        return res.json({ \n          status: 'allowed', \n          reason: 'Active subscription',\n          subscriptionStatus: user.subscriptionStatus,\n          subscriptionEndDate: user.subscriptionEndDate\n        });\n      }\n\n      // Check if user has free access\n      if (user.subscriptionStatus === 'free_access') {\n        return res.json({ \n          status: 'allowed', \n          reason: 'Free access (CLIENT6FREE)',\n          subscriptionStatus: user.subscriptionStatus \n        });\n      }\n\n      // Check if trial is still active\n      if (user.subscriptionStatus === 'trial' && user.subscriptionEndDate) {\n        const now = new Date();\n        const trialEnd = new Date(user.subscriptionEndDate);\n        \n        if (now <= trialEnd) {\n          const daysLeft = Math.ceil((trialEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n          return res.json({ \n            status: 'allowed', \n            reason: 'Trial still active',\n            subscriptionStatus: user.subscriptionStatus,\n            daysLeft: daysLeft,\n            trialEnd: trialEnd\n          });\n        } else {\n          // Trial expired\n          await storage.updateSubscriptionStatus(user.id, 'expired');\n          return res.status(402).json({ \n            status: 'blocked',\n            reason: \"Trial period has expired. Please subscribe to continue.\",\n            trialExpired: true,\n            subscriptionStatus: 'expired'\n          });\n        }\n      }\n\n      // No valid subscription or trial\n      return res.status(402).json({ \n        status: 'blocked',\n        reason: \"Subscription required to access this feature.\",\n        subscriptionRequired: true,\n        subscriptionStatus: user.subscriptionStatus || 'none'\n      });\n\n    } catch (error) {\n      console.error('Trial enforcement test error:', error);\n      return res.status(500).json({ message: \"Server error\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Apply promo code endpoint\n  app.post('/api/apply-promo-code', requireAuth, async (req, res) => {\n    try {\n      const { code } = req.body;\n      const userId = req.session.userId!;\n      \n      if (!code || typeof code !== 'string') {\n        return res.status(400).json({ \n          success: false, \n          message: 'Please enter a valid promo code.' \n        });\n      }\n      \n      // Check for CLIENT6FREE promo code\n      if (code.toUpperCase() === 'CLIENT6FREE') {\n        // Grant 6 months free access\n        const sixMonthsEndDate = new Date();\n        sixMonthsEndDate.setMonth(sixMonthsEndDate.getMonth() + 6);\n        \n        await storage.updateSubscriptionStatus(userId, 'free_access', sixMonthsEndDate);\n        \n        const user = await storage.getUser(userId);\n        console.log(`CLIENT6FREE promo code used by user: ${user?.email} - 6 months free access until ${sixMonthsEndDate}`);\n        \n        // Send notifications about promo code usage\n        if (user) {\n          try {\n            // Send to ActiveCampaign\n            await activeCampaign.sendNotificationEmail(\n              user.email,\n              user.name,\n              user.businessType,\n              true\n            );\n            \n            // Send developer notification\n            await sendDeveloperNotification(\n              user.email,\n              user.name,\n              user.businessType,\n              'promo_code',\n              'CLIENT6FREE - 6 months free access'\n            );\n          } catch (error) {\n            console.error('Failed to send promo code notification:', error);\n          }\n        }\n        \n        return res.json({\n          success: true,\n          message: 'Congratulations! You now have 6 months of free access to all business tools.'\n        });\n      } else {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid promo code. Please check your code and try again.'\n        });\n      }\n    } catch (error) {\n      console.error('Error applying promo code:', error);\n      res.status(500).json({\n        success: false,\n        message: 'An error occurred while applying the promo code. Please try again.'\n      });\n    }\n  });\n\n  // Test endpoint to update user status for testing trial enforcement\n  app.post(\"/api/test-update-user-status\", async (req, res) => {\n    try {\n      const { subscriptionStatus, subscriptionEndDate } = req.body;\n      const user = await storage.updateSubscriptionStatus(1, subscriptionStatus, subscriptionEndDate ? new Date(subscriptionEndDate) : undefined);\n      res.json({ message: \"User status updated\", user });\n    } catch (error) {\n      console.error('Error updating user status:', error);\n      res.status(500).json({ message: \"Error updating user status\", error: (error as Error).message });\n    }\n  });\n\n  // Get user trial status\n  app.get(\"/api/user/trial-status\", requireAuth, async (req, res) => {\n    const userId = req.session.userId!;\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    const trialStatus = TrialManager.getAccessStatus(user);\n    res.json(trialStatus);\n  });\n\n  // Hourly rate calculations - NEW AUTH\n  app.post(\"/api/hourly-rate-calculations\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      console.log('NEW AUTH: Creating hourly rate calculation for user ID:', userId);\n      const data = insertHourlyRateCalculationSchema.parse({\n        ...req.body,\n        userId: userId\n      });\n      const calculation = await storage.createHourlyRateCalculation(data);\n      res.json(calculation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/hourly-rate-calculations\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      console.log('GET hourly-rate-calculations for user ID:', userId);\n      const calculations = await storage.getHourlyRateCalculationsByUserId(userId);\n      console.log('Found calculations:', calculations.length, 'for user:', userId);\n      res.json(calculations);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/hourly-rate-calculations/latest\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const calculation = await storage.getLatestHourlyRateCalculation(userId);\n      res.json(calculation || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Treatments\n  app.post(\"/api/treatments\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      console.log('Creating treatment for user:', userId);\n      console.log('Request body:', req.body);\n      \n      const validation = insertTreatmentSchema.safeParse(req.body);\n      if (!validation.success) {\n        console.log('Validation errors:', validation.error.errors);\n        console.log('Request body structure:', JSON.stringify(req.body, null, 2));\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: validation.error.errors \n        });\n      }\n\n      const treatment = await storage.createTreatment({\n        ...validation.data,\n        userId: userId,\n        profitMargin: \"0\"\n      } as any);\n      console.log('Created treatment:', treatment);\n      res.json(treatment);\n    } catch (error) {\n      console.error('Error creating treatment:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\", error: (error as Error).message });\n    }\n  });\n\n  app.get(\"/api/treatments\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const treatments = await storage.getTreatmentsByUserId(userId);\n      res.json(treatments);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/treatments/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const data = insertTreatmentSchema.partial().parse(req.body);\n      const treatment = await storage.updateTreatment(id, data);\n      if (!treatment) {\n        return res.status(404).json({ message: \"Treatment not found\" });\n      }\n      res.json(treatment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/treatments/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteTreatment(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Treatment not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Expenses\n  app.post(\"/api/expenses\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const data = insertExpenseSchema.parse({\n        ...req.body,\n        userId: userId,\n        date: new Date(req.body.date)\n      });\n      const expense = await storage.createExpense(data);\n      res.json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/expenses\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const { startDate, endDate } = req.query;\n      let expenses;\n      \n      if (startDate && endDate) {\n        expenses = await storage.getExpensesByUserIdAndDateRange(\n          userId,\n          new Date(startDate as string),\n          new Date(endDate as string)\n        );\n      } else {\n        expenses = await storage.getExpensesByUserId(userId);\n      }\n      \n      res.json(expenses);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteExpense(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Business metrics\n  app.get(\"/api/metrics\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const treatments = await storage.getTreatmentsByUserId(userId);\n      const expenses = await storage.getExpensesByUserId(userId);\n      const latestHourlyRate = await storage.getLatestHourlyRateCalculation(userId);\n\n      // Calculate metrics\n      const totalTreatments = treatments.length;\n      const avgProfitMargin = treatments.length > 0 \n        ? treatments.reduce((sum, t) => sum + parseFloat(t.profitMargin), 0) / treatments.length \n        : 0;\n      \n      const currentMonth = new Date();\n      const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n      const monthlyExpenses = await storage.getExpensesByUserIdAndDateRange(userId, firstDayOfMonth, currentMonth);\n      const totalMonthlyExpenses = monthlyExpenses.reduce((sum, e) => sum + parseFloat(e.amount.toString()), 0);\n      \n      // Calculate monthly revenue based on user's actual treatments\n      const estimatedMonthlyRevenue = treatments.length > 0 \n        ? treatments.reduce((sum, t) => sum + parseFloat(t.price.toString()), 0) * 0.7 // Assuming 70% booking rate\n        : 0;\n\n      const metrics = {\n        hourlyRate: latestHourlyRate?.calculatedRate || \"0\",\n        avgProfitMargin: avgProfitMargin.toFixed(1),\n        monthlyRevenue: estimatedMonthlyRevenue.toFixed(2),\n        activeTreatments: totalTreatments,\n        monthlyExpenses: totalMonthlyExpenses.toFixed(2)\n      };\n\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Business routes\n  app.get(\"/api/businesses\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const businesses = await storage.getBusinessesByUserId(userId);\n      res.json(businesses);\n    } catch (error) {\n      console.error(\"Error fetching businesses:\", error);\n      res.status(500).json({ message: \"Failed to fetch businesses\" });\n    }\n  });\n\n  app.post(\"/api/businesses\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const validation = insertBusinessSchema.safeParse({\n        ...req.body,\n        userId: userId\n      });\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid business data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const business = await storage.createBusiness(validation.data);\n      res.json(business);\n    } catch (error) {\n      console.error(\"Error creating business:\", error);\n      res.status(500).json({ message: \"Failed to create business\" });\n    }\n  });\n\n  app.put(\"/api/businesses/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validation = insertBusinessSchema.partial().safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid business data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const business = await storage.updateBusiness(id, validation.data);\n      if (!business) {\n        return res.status(404).json({ message: \"Business not found\" });\n      }\n      \n      res.json(business);\n    } catch (error) {\n      console.error(\"Error updating business:\", error);\n      res.status(500).json({ message: \"Failed to update business\" });\n    }\n  });\n\n  app.delete(\"/api/businesses/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteBusiness(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Business not found\" });\n      }\n      \n      res.json({ message: \"Business deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting business:\", error);\n      res.status(500).json({ message: \"Failed to delete business\" });\n    }\n  });\n\n  // Stock purchase routes\n  app.post(\"/api/stock-purchases\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const validation = insertStockPurchaseSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: validation.error.errors \n        });\n      }\n\n      const stockPurchase = await storage.createStockPurchase({\n        ...validation.data,\n        userId: userId\n      });\n      res.json(stockPurchase);\n    } catch (error) {\n      console.error(\"Error creating stock purchase:\", error);\n      res.status(500).json({ message: \"Failed to create stock purchase\" });\n    }\n  });\n\n  app.get(\"/api/stock-purchases\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const stockPurchases = await storage.getStockPurchasesByUserId(userId);\n      res.json(stockPurchases);\n    } catch (error) {\n      console.error(\"Error fetching stock purchases:\", error);\n      res.status(500).json({ message: \"Failed to fetch stock purchases\" });\n    }\n  });\n\n  app.delete(\"/api/stock-purchases/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteStockPurchase(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Stock purchase not found\" });\n      }\n      \n      res.json({ message: \"Stock purchase deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting stock purchase:\", error);\n      res.status(500).json({ message: \"Failed to delete stock purchase\" });\n    }\n  });\n\n  // Weekly income routes\n  app.get(\"/api/weekly-incomes\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const businessId = req.query.businessId ? parseInt(req.query.businessId as string) : undefined;\n      \n      let weeklyIncomes;\n      if (businessId) {\n        weeklyIncomes = await storage.getWeeklyIncomesByBusinessId(businessId);\n      } else {\n        weeklyIncomes = await storage.getWeeklyIncomesByUserId(userId);\n      }\n      \n      res.json(weeklyIncomes);\n    } catch (error) {\n      console.error(\"Error fetching weekly incomes:\", error);\n      res.status(500).json({ message: \"Failed to fetch weekly incomes\" });\n    }\n  });\n\n  app.post(\"/api/weekly-incomes\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const validation = insertWeeklyIncomeSchema.safeParse({\n        ...req.body,\n        userId: userId\n      });\n      if (!validation.success) {\n        console.error(\"Weekly income validation failed:\", validation.error.errors);\n        console.error(\"Request body:\", req.body);\n        return res.status(400).json({ \n          message: \"Invalid weekly income data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const weeklyIncome = await storage.createOrUpdateWeeklyIncome(validation.data);\n      res.json(weeklyIncome);\n    } catch (error) {\n      console.error(\"Error creating/updating weekly income:\", error);\n      res.status(500).json({ message: \"Failed to save weekly income\" });\n    }\n  });\n\n  // Income goal routes\n  app.get(\"/api/income-goals\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const businessId = req.query.businessId ? parseInt(req.query.businessId as string) : undefined;\n      \n      let goals;\n      if (businessId) {\n        goals = await storage.getIncomeGoalsByBusinessId(businessId);\n      } else {\n        goals = await storage.getIncomeGoalsByUserId(userId);\n      }\n      \n      res.json(goals);\n    } catch (error) {\n      console.error(\"Error fetching income goals:\", error);\n      res.status(500).json({ message: \"Failed to fetch income goals\" });\n    }\n  });\n\n  app.post(\"/api/income-goals\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const validation = insertIncomeGoalSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid income goal data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const goal = await storage.createIncomeGoal({\n        ...validation.data,\n        userId: userId\n      });\n      res.json(goal);\n    } catch (error) {\n      console.error(\"Error creating income goal:\", error);\n      res.status(500).json({ message: \"Failed to create income goal\" });\n    }\n  });\n\n  app.put(\"/api/income-goals/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validation = insertIncomeGoalSchema.partial().safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid income goal data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const goal = await storage.updateIncomeGoal(id, validation.data);\n      if (!goal) {\n        return res.status(404).json({ message: \"Income goal not found\" });\n      }\n      \n      res.json(goal);\n    } catch (error) {\n      console.error(\"Error updating income goal:\", error);\n      res.status(500).json({ message: \"Failed to update income goal\" });\n    }\n  });\n\n  app.delete(\"/api/income-goals/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteIncomeGoal(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Income goal not found\" });\n      }\n      \n      res.json({ message: \"Income goal deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting income goal:\", error);\n      res.status(500).json({ message: \"Failed to delete income goal\" });\n    }\n  });\n\n  // Money pot routes\n  app.get(\"/api/money-pots\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const businessId = req.query.businessId ? parseInt(req.query.businessId as string) : undefined;\n      \n      let moneyPots;\n      if (businessId) {\n        moneyPots = await storage.getMoneyPotsByBusinessId(businessId);\n      } else {\n        moneyPots = await storage.getMoneyPotsByUserId(userId);\n      }\n      \n      res.json(moneyPots);\n    } catch (error) {\n      console.error(\"Error fetching money pots:\", error);\n      res.status(500).json({ message: \"Failed to fetch money pots\" });\n    }\n  });\n\n  app.post(\"/api/money-pots\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const validation = insertMoneyPotSchema.safeParse({\n        ...req.body,\n        userId: userId\n      });\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid money pot data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const moneyPot = await storage.createMoneyPot(validation.data);\n      res.json(moneyPot);\n    } catch (error) {\n      console.error(\"Error creating money pot:\", error);\n      res.status(500).json({ message: \"Failed to create money pot\" });\n    }\n  });\n\n  app.put(\"/api/money-pots/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validation = insertMoneyPotSchema.partial().safeParse(req.body);\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid money pot data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const moneyPot = await storage.updateMoneyPot(id, validation.data);\n      \n      if (!moneyPot) {\n        return res.status(404).json({ message: \"Money pot not found\" });\n      }\n      \n      res.json(moneyPot);\n    } catch (error) {\n      console.error(\"Error updating money pot:\", error);\n      res.status(500).json({ message: \"Failed to update money pot\" });\n    }\n  });\n\n  app.delete(\"/api/money-pots/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteMoneyPot(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Money pot not found\" });\n      }\n      \n      res.json({ message: \"Money pot deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting money pot:\", error);\n      res.status(500).json({ message: \"Failed to delete money pot\" });\n    }\n  });\n\n  // Test endpoint to verify Stripe keys\n  app.get('/api/stripe-test', async (req, res) => {\n    try {\n      console.log('Testing Stripe with keys:');\n      console.log('Secret key starts with:', process.env.STRIPE_SECRET_KEY?.substring(0, 8));\n      console.log('Public key starts with:', process.env.VITE_STRIPE_PUBLIC_KEY?.substring(0, 8));\n      console.log('Price ID:', process.env.STRIPE_PRICE_ID);\n      \n      const testStripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n        apiVersion: \"2025-05-28.basil\",\n      });\n      \n      const price = await testStripe.prices.retrieve(process.env.STRIPE_PRICE_ID!);\n      res.json({ \n        success: true, \n        price: price.unit_amount ? price.unit_amount / 100 : 0, \n        currency: price.currency,\n        message: 'Stripe connection successful'\n      });\n    } catch (error: any) {\n      res.status(400).json({ \n        success: false, \n        error: error.message \n      });\n    }\n  });\n\n  // Stripe subscription routes\n  app.post('/api/create-subscription', requireAuth, async (req, res) => {\n    try {\n      if (!process.env.STRIPE_SECRET_KEY) {\n        return res.status(500).json({ message: \"Stripe configuration missing\" });\n      }\n\n      const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n        apiVersion: \"2025-05-28.basil\",\n      });\n\n      const userId = req.session.userId!;\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if user has free access from promo code - no subscription needed\n      if (user.subscriptionStatus === 'free_access') {\n        return res.json({\n          subscriptionId: 'free_access',\n          clientSecret: null,\n          status: 'active'\n        });\n      }\n\n      // Check if user already has an active subscription\n      if (user.stripeSubscriptionId) {\n        try {\n          const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n          if (subscription.status === 'active' || subscription.status === 'trialing') {\n            return res.json({\n              subscriptionId: subscription.id,\n              clientSecret: null, // No payment needed for active subscription\n            });\n          }\n        } catch (err) {\n          console.log('Existing subscription not found, creating new one');\n        }\n      }\n\n      // Create or retrieve Stripe customer\n      let customer;\n      if (user.stripeCustomerId) {\n        try {\n          customer = await stripe.customers.retrieve(user.stripeCustomerId);\n        } catch (err) {\n          customer = null;\n        }\n      }\n      \n      if (!customer) {\n        customer = await stripe.customers.create({\n          email: user.email,\n          name: user.name,\n          metadata: {\n            userId: user.id.toString(),\n          }\n        });\n        await storage.updateUserStripeInfo(user.id, customer.id);\n      }\n\n      // Create subscription\n      if (!process.env.STRIPE_PRICE_ID) {\n        return res.status(500).json({ message: \"Stripe price ID not configured\" });\n      }\n\n      // Create setup intent for payment method\n      const setupIntent = await stripe.setupIntents.create({\n        customer: customer.id,\n        payment_method_types: ['card'],\n        usage: 'off_session'\n      });\n\n      // Create subscription without immediate payment\n      const subscription = await stripe.subscriptions.create({\n        customer: customer.id,\n        items: [{\n          price: process.env.STRIPE_PRICE_ID,\n        }],\n        payment_behavior: 'default_incomplete',\n        payment_settings: {\n          payment_method_types: ['card'],\n          save_default_payment_method: 'on_subscription'\n        },\n        expand: ['latest_invoice.payment_intent'],\n      });\n\n      await storage.updateUserStripeInfo(user.id, customer.id, subscription.id);\n      await storage.updateSubscriptionStatus(user.id, 'pending');\n\n      console.log('Setup Intent created:', {\n        id: setupIntent.id,\n        status: setupIntent.status,\n        client_secret: setupIntent.client_secret ? 'exists' : 'null'\n      });\n\n      console.log('Subscription created:', {\n        id: subscription.id,\n        status: subscription.status,\n        latest_invoice: subscription.latest_invoice ? 'exists' : 'null'\n      });\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: setupIntent.client_secret,\n        status: subscription.status\n      });\n    } catch (error: any) {\n      console.error('Stripe subscription error:', error);\n      return res.status(400).json({ error: { message: error.message || 'Subscription creation failed. Please check Stripe configuration.' } });\n    }\n  });\n\n  // Check subscription status\n  app.get('/api/subscription-status', async (req, res) => {\n    try {\n      const user = await storage.getUser(1); // Demo user\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let subscriptionStatus = {\n        active: false,\n        status: user.subscriptionStatus,\n        endDate: user.subscriptionEndDate\n      };\n\n      if (user.stripeSubscriptionId) {\n        try {\n          const testStripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n            apiVersion: \"2025-05-28.basil\",\n          });\n          \n          const subscription = await testStripe.subscriptions.retrieve(user.stripeSubscriptionId);\n          subscriptionStatus.active = subscription.status === 'active' || subscription.status === 'trialing';\n          subscriptionStatus.status = subscription.status;\n          const endDate = new Date((subscription as any).current_period_end * 1000);\n          subscriptionStatus.endDate = endDate;\n          \n          // Update local storage only if date is valid\n          if (!isNaN(endDate.getTime())) {\n            await storage.updateSubscriptionStatus(\n              user.id, \n              subscription.status, \n              endDate\n            );\n          } else {\n            console.error('Invalid subscription end date:', (subscription as any).current_period_end);\n            await storage.updateSubscriptionStatus(\n              user.id, \n              subscription.status\n            );\n          }\n        } catch (err) {\n          console.log('Error checking subscription status:', err);\n        }\n      }\n\n      res.json(subscriptionStatus);\n    } catch (error: any) {\n      console.error('Subscription status error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Reset demo user for testing\n  app.post('/api/reset-demo-user', async (req, res) => {\n    try {\n      const user = await storage.getUser(1);\n      if (user) {\n        await storage.updateUserStripeInfo(user.id, \"\", \"\");\n        await storage.updateSubscriptionStatus(user.id, \"\");\n      }\n      res.json({ success: true, message: 'Demo user reset successfully' });\n    } catch (error: any) {\n      res.status(400).json({ success: false, error: error.message });\n    }\n  });\n\n  // Create promotional code for 6 months free\n  app.post('/api/create-promo-code', async (req, res) => {\n    try {\n      const testStripe = new Stripe('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', {\n        apiVersion: \"2025-05-28.basil\",\n      });\n\n      // First create a coupon for 100% off for 6 months\n      const coupon = await testStripe.coupons.create({\n        percent_off: 100,\n        duration: 'repeating',\n        duration_in_months: 6,\n        name: '6 Months Free for Clients',\n      });\n\n      // Then create a promotion code\n      const promotionCode = await testStripe.promotionCodes.create({\n        coupon: coupon.id,\n        code: 'CLIENT6FREE',\n        active: true,\n        max_redemptions: 100, // Limit to 100 uses\n      });\n\n      res.json({\n        success: true,\n        couponId: coupon.id,\n        promotionCodeId: promotionCode.id,\n        code: promotionCode.code,\n        message: 'Promo code CLIENT6FREE created successfully - 6 months free!'\n      });\n    } catch (error: any) {\n      console.error('Promo code creation error:', error);\n      res.status(400).json({ \n        success: false, \n        error: error.message \n      });\n    }\n  });\n\n  app.post('/api/subscription-status', async (req, res) => {\n    try {\n      const { subscriptionId, status } = req.body;\n      const user = await storage.getUser(1); // Demo user\n      \n      if (!user || user.stripeSubscriptionId !== subscriptionId) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n\n      const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n      const endDate = new Date((subscription as any).current_period_end * 1000);\n      \n      await storage.updateSubscriptionStatus(user.id, status, endDate);\n      \n      res.json({ message: \"Subscription status updated\" });\n    } catch (error: any) {\n      console.error('Subscription status update error:', error);\n      res.status(400).json({ error: { message: error.message } });\n    }\n  });\n\n  app.get('/api/subscription', async (req, res) => {\n    try {\n      const user = await storage.getUser(1); // Demo user\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!user.stripeSubscriptionId) {\n        return res.json({ subscriptionStatus: 'inactive' });\n      }\n\n      const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n      \n      res.json({\n        subscriptionStatus: subscription.status,\n        currentPeriodEnd: new Date((subscription as any).current_period_end * 1000),\n        cancelAtPeriodEnd: subscription.cancel_at_period_end,\n      });\n    } catch (error: any) {\n      console.error('Get subscription error:', error);\n      res.status(400).json({ error: { message: error.message } });\n    }\n  });\n\n  // Email report endpoint\n  app.post('/api/email-report', requireAuth, async (req, res) => {\n    try {\n      const userId = req.session.userId!;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get user's business data\n      const treatments = await storage.getTreatmentsByUserId(userId);\n      const expenses = await storage.getExpensesByUserId(userId);\n      const hourlyRateCalc = await storage.getLatestHourlyRateCalculation(userId);\n      const businesses = await storage.getBusinessesByUserId(userId);\n      const weeklyIncomes = await storage.getWeeklyIncomesByUserId(userId);\n\n      // Calculate metrics\n      const totalExpenses = expenses.reduce((sum, e) => sum + parseFloat(e.amount.toString()), 0);\n      const avgTreatmentPrice = treatments.length > 0 \n        ? treatments.reduce((sum, t) => sum + parseFloat(t.price?.toString() || '0'), 0) / treatments.length \n        : 0;\n      const totalMonthlyRevenue = weeklyIncomes.reduce((sum, w) => sum + parseFloat(w.weeklyTotal.toString()), 0) * 4.33;\n\n      // Generate HTML email content\n      const emailHTML = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Business Report - ${new Date().toLocaleDateString()}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; color: #333; line-height: 1.6; }\n            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #e91e63; padding-bottom: 15px; }\n            .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\n            .metric-card { border: 1px solid #ddd; border-radius: 8px; padding: 15px; background: #f8f9fa; }\n            .metric-value { font-size: 24px; font-weight: bold; color: #e91e63; }\n            .metric-label { font-size: 14px; color: #666; margin-top: 5px; }\n            .section { margin-bottom: 30px; }\n            .section-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; color: #333; }\n            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            th { background-color: #f5f5f5; font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Business Performance Report</h1>\n            <p>Generated on ${new Date().toLocaleDateString()}</p>\n          </div>\n          \n          <div class=\"metrics\">\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">£${hourlyRateCalc?.calculatedRate || '0'}/hr</div>\n              <div class=\"metric-label\">Current Hourly Rate</div>\n            </div>\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">£${totalMonthlyRevenue.toFixed(2)}</div>\n              <div class=\"metric-label\">Monthly Revenue</div>\n            </div>\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">£${totalExpenses.toFixed(2)}</div>\n              <div class=\"metric-label\">Total Expenses</div>\n            </div>\n            <div class=\"metric-card\">\n              <div class=\"metric-value\">${treatments.length}</div>\n              <div class=\"metric-label\">Active Treatments</div>\n            </div>\n          </div>\n\n          <div class=\"section\">\n            <h2 class=\"section-title\">Treatment Summary</h2>\n            <table>\n              <thead>\n                <tr>\n                  <th>Treatment</th>\n                  <th>Price</th>\n                  <th>Duration</th>\n                  <th>Profit Margin</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${treatments.map(t => `\n                  <tr>\n                    <td>${t.name}</td>\n                    <td>£${parseFloat(t.price?.toString() || '0').toFixed(2)}</td>\n                    <td>${t.duration || 0} min</td>\n                    <td>${parseFloat(t.profitMargin?.toString() || '0').toFixed(1)}%</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n\n          <div class=\"section\">\n            <h2 class=\"section-title\">Recent Expenses</h2>\n            <table>\n              <thead>\n                <tr>\n                  <th>Category</th>\n                  <th>Amount</th>\n                  <th>Date</th>\n                  <th>Description</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${expenses.slice(0, 10).map(e => `\n                  <tr>\n                    <td>${e.category}</td>\n                    <td>£${parseFloat(e.amount.toString()).toFixed(2)}</td>\n                    <td>${new Date(e.date).toLocaleDateString()}</td>\n                    <td>${e.description || ''}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n        </body>\n        </html>\n      `;\n\n      // Try to send email using SendGrid, fallback to mailto if it fails\n      try {\n        const { sendEmail } = await import('./sendgrid');\n        const emailSent = await sendEmail({\n          to: user.email,\n          from: user.email, // Use user's own email as sender to avoid verification issues\n          subject: `Business Report - ${new Date().toLocaleDateString()}`,\n          html: emailHTML\n        });\n\n        if (emailSent) {\n          res.json({ success: true, message: 'Report emailed successfully' });\n        } else {\n          // Fallback to mailto approach\n          res.json({ \n            success: true, \n            message: 'Email service unavailable. Opening your email client instead.',\n            fallback: true,\n            emailData: {\n              subject: `Business Report - ${new Date().toLocaleDateString()}`,\n              body: `Please find your business performance report below:\\n\\nKey Metrics:\\n- Current Hourly Rate: £${hourlyRateCalc?.calculatedRate || '0'}/hr\\n- Monthly Revenue: £${totalMonthlyRevenue.toFixed(2)}\\n- Total Treatments: ${treatments.length}\\n- Total Expenses: £${totalExpenses.toFixed(2)}\\n\\nGenerated on ${new Date().toLocaleDateString()}`\n            }\n          });\n        }\n      } catch (emailError) {\n        console.log('SendGrid error, using fallback:', emailError);\n        // Fallback to mailto approach\n        res.json({ \n          success: true, \n          message: 'Email service unavailable. Opening your email client instead.',\n          fallback: true,\n          emailData: {\n            subject: `Business Report - ${new Date().toLocaleDateString()}`,\n            body: `Please find your business performance report below:\\n\\nKey Metrics:\\n- Current Hourly Rate: £${hourlyRateCalc?.calculatedRate || '0'}/hr\\n- Monthly Revenue: £${totalMonthlyRevenue.toFixed(2)}\\n- Total Treatments: ${treatments.length}\\n- Total Expenses: £${totalExpenses.toFixed(2)}\\n\\nGenerated on ${new Date().toLocaleDateString()}`\n          }\n        });\n      }\n\n    } catch (error: any) {\n      console.error('Email report error:', error);\n      res.status(500).json({ success: false, message: 'Failed to generate email report' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":45154},"server/secure-storage.ts":{"content":"import bcrypt from 'bcryptjs';\nimport type { \n  User, \n  InsertUser, \n  HourlyRateCalculation, \n  InsertHourlyRateCalculation,\n  Treatment,\n  InsertTreatment,\n  Expense,\n  InsertExpense,\n  Business,\n  InsertBusiness,\n  WeeklyIncome,\n  InsertWeeklyIncome,\n  IncomeGoal,\n  InsertIncomeGoal,\n  StockPurchase,\n  InsertStockPurchase\n} from \"@shared/schema\";\nimport type { IStorage } from \"./storage\";\n\nexport class SecureStorage implements IStorage {\n  private users: Map<number, User>;\n  private hourlyRateCalculations: Map<number, HourlyRateCalculation>;\n  private treatments: Map<number, Treatment>;\n  private expenses: Map<number, Expense>;\n  private businesses: Map<number, Business>;\n  private weeklyIncomes: Map<number, WeeklyIncome>;\n  private incomeGoals: Map<number, IncomeGoal>;\n  private stockPurchases: Map<number, StockPurchase>;\n  private currentUserId: number;\n  private currentHourlyRateId: number;\n  private currentTreatmentId: number;\n  private currentExpenseId: number;\n  private currentBusinessId: number;\n  private currentWeeklyIncomeId: number;\n  private currentIncomeGoalId: number;\n  private currentStockPurchaseId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.hourlyRateCalculations = new Map();\n    this.treatments = new Map();\n    this.expenses = new Map();\n    this.businesses = new Map();\n    this.weeklyIncomes = new Map();\n    this.incomeGoals = new Map();\n    this.stockPurchases = new Map();\n    this.currentUserId = 1;\n    this.currentHourlyRateId = 1;\n    this.currentTreatmentId = 1;\n    this.currentExpenseId = 1;\n    this.currentBusinessId = 1;\n    this.currentWeeklyIncomeId = 1;\n    this.currentIncomeGoalId = 1;\n    this.currentStockPurchaseId = 1;\n  }\n\n  // User operations with proper security\n  async getUser(id: number): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    // Always exclude password from returned user data\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword as User;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const usersArray = Array.from(this.users.values());\n    for (const user of usersArray) {\n      if (user.email === email) {\n        // Always exclude password from returned user data\n        const { password: _, ...userWithoutPassword } = user;\n        return userWithoutPassword as User;\n      }\n    }\n    return undefined;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const hashedPassword = await bcrypt.hash(userData.password, 12);\n    \n    const user: User = {\n      ...userData,\n      id,\n      password: hashedPassword,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      subscriptionStatus: \"trial\",\n      subscriptionEndDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days trial\n      emailVerified: false,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n    };\n    \n    this.users.set(id, user);\n    console.log(`SECURE STORAGE: Created user ${id} with email ${user.email}`);\n    \n    // Return user without password\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword as User;\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const usersArray = Array.from(this.users.values());\n    for (const user of usersArray) {\n      if (user.email === email) {\n        const isValid = await bcrypt.compare(password, user.password);\n        if (isValid) {\n          console.log(`SECURE STORAGE: Password verified for user ${user.id}`);\n          // Return user without password\n          const { password: _, ...userWithoutPassword } = user;\n          return userWithoutPassword as User;\n        }\n      }\n    }\n    console.log(`SECURE STORAGE: Password verification failed for email ${email}`);\n    return null;\n  }\n\n  async updateUserStripeInfo(userId: number, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n\n    const updated: User = {\n      ...user,\n      stripeCustomerId,\n      stripeSubscriptionId: stripeSubscriptionId || user.stripeSubscriptionId,\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(userId, updated);\n    const { password: _, ...userWithoutPassword } = updated;\n    return userWithoutPassword as User;\n  }\n\n  async updateSubscriptionStatus(userId: number, status: string, endDate?: Date): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n\n    const updated: User = {\n      ...user,\n      subscriptionStatus: status,\n      subscriptionEndDate: endDate || user.subscriptionEndDate,\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(userId, updated);\n    console.log(`SECURE STORAGE: Updated subscription for user ${userId} to ${status}`);\n    const { password: _, ...userWithoutPassword } = updated;\n    return userWithoutPassword as User;\n  }\n\n  // Hourly rate calculations - USER ISOLATED\n  async createHourlyRateCalculation(calculation: InsertHourlyRateCalculation): Promise<HourlyRateCalculation> {\n    const id = this.currentHourlyRateId++;\n    const hourlyRateCalculation: HourlyRateCalculation = {\n      ...calculation,\n      id,\n      staffCount: calculation.staffCount || 0,\n      staffTargetPerPerson: calculation.staffTargetPerPerson || null,\n      createdAt: new Date(),\n    };\n    this.hourlyRateCalculations.set(id, hourlyRateCalculation);\n    console.log(`SECURE STORAGE: Created hourly rate calculation for user ${calculation.userId}`);\n    return hourlyRateCalculation;\n  }\n\n  async getHourlyRateCalculationsByUserId(userId: number): Promise<HourlyRateCalculation[]> {\n    const calculations = Array.from(this.hourlyRateCalculations.values())\n      .filter(calc => calc.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, 5);\n    console.log(`SECURE STORAGE: Retrieved ${calculations.length} calculations for user ${userId}`);\n    return calculations;\n  }\n\n  async getLatestHourlyRateCalculation(userId: number): Promise<HourlyRateCalculation | undefined> {\n    const calculations = await this.getHourlyRateCalculationsByUserId(userId);\n    return calculations.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())[0];\n  }\n\n  // Treatments - USER ISOLATED\n  async createTreatment(treatment: InsertTreatment): Promise<Treatment> {\n    const id = this.currentTreatmentId++;\n    const price = parseFloat(treatment.price.toString());\n    const productCost = parseFloat(treatment.productCost.toString());\n    const overheadCost = parseFloat(treatment.overheadCost.toString());\n    const totalCosts = productCost + overheadCost;\n    const profit = price - totalCosts;\n    const profitMargin = price > 0 ? (profit / price) * 100 : 0;\n    \n    const treatmentRecord: Treatment = {\n      ...treatment,\n      id,\n      profitMargin: profitMargin.toString(),\n      createdAt: new Date(),\n    };\n    this.treatments.set(id, treatmentRecord);\n    console.log(`SECURE STORAGE: Created treatment for user ${treatment.userId}`);\n    return treatmentRecord;\n  }\n\n  async getTreatmentsByUserId(userId: number): Promise<Treatment[]> {\n    const treatments = Array.from(this.treatments.values())\n      .filter(treatment => treatment.userId === userId);\n    console.log(`SECURE STORAGE: Retrieved ${treatments.length} treatments for user ${userId}`);\n    return treatments;\n  }\n\n  async updateTreatment(id: number, treatment: Partial<InsertTreatment>): Promise<Treatment | undefined> {\n    const existing = this.treatments.get(id);\n    if (!existing) return undefined;\n\n    const updated: Treatment = {\n      ...existing,\n      ...treatment,\n    };\n    this.treatments.set(id, updated);\n    return updated;\n  }\n\n  async deleteTreatment(id: number): Promise<boolean> {\n    return this.treatments.delete(id);\n  }\n\n  // Expenses - USER ISOLATED\n  async createExpense(expense: InsertExpense): Promise<Expense> {\n    const id = this.currentExpenseId++;\n    const expenseRecord: Expense = {\n      ...expense,\n      id,\n      createdAt: new Date(),\n    };\n    this.expenses.set(id, expenseRecord);\n    console.log(`SECURE STORAGE: Created expense for user ${expense.userId}`);\n    return expenseRecord;\n  }\n\n  async getExpensesByUserId(userId: number): Promise<Expense[]> {\n    const expenses = Array.from(this.expenses.values())\n      .filter(expense => expense.userId === userId);\n    console.log(`SECURE STORAGE: Retrieved ${expenses.length} expenses for user ${userId}`);\n    return expenses;\n  }\n\n  async getExpensesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<Expense[]> {\n    return Array.from(this.expenses.values())\n      .filter(expense => \n        expense.userId === userId &&\n        expense.date >= startDate &&\n        expense.date <= endDate\n      );\n  }\n\n  async deleteExpense(id: number): Promise<boolean> {\n    return this.expenses.delete(id);\n  }\n\n  // Businesses - USER ISOLATED\n  async createBusiness(business: InsertBusiness): Promise<Business> {\n    const id = this.currentBusinessId++;\n    const businessRecord: Business = {\n      ...business,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.businesses.set(id, businessRecord);\n    console.log(`SECURE STORAGE: Created business for user ${business.userId}`);\n    return businessRecord;\n  }\n\n  async getBusinessesByUserId(userId: number): Promise<Business[]> {\n    const businesses = Array.from(this.businesses.values())\n      .filter(business => business.userId === userId);\n    console.log(`SECURE STORAGE: Retrieved ${businesses.length} businesses for user ${userId}`);\n    return businesses;\n  }\n\n  async updateBusiness(id: number, business: Partial<InsertBusiness>): Promise<Business | undefined> {\n    const existing = this.businesses.get(id);\n    if (!existing) return undefined;\n\n    const updated: Business = {\n      ...existing,\n      ...business,\n      updatedAt: new Date(),\n    };\n    this.businesses.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusiness(id: number): Promise<boolean> {\n    return this.businesses.delete(id);\n  }\n\n  // Weekly incomes - USER ISOLATED\n  async createOrUpdateWeeklyIncome(weeklyIncome: InsertWeeklyIncome): Promise<WeeklyIncome> {\n    // Check if exists for this business and week\n    const existing = Array.from(this.weeklyIncomes.values())\n      .find(wi => \n        wi.businessId === weeklyIncome.businessId &&\n        wi.weekStartDate.getTime() === weeklyIncome.weekStartDate.getTime()\n      );\n\n    if (existing) {\n      const updated: WeeklyIncome = {\n        ...existing,\n        weeklyTotal: weeklyIncome.weeklyTotal,\n        updatedAt: new Date(),\n      };\n      this.weeklyIncomes.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = this.currentWeeklyIncomeId++;\n      const record: WeeklyIncome = {\n        ...weeklyIncome,\n        id,\n        userId: 0, // Will be set by caller\n        vatAmount: \"0\",\n        profitAmount: \"0\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.weeklyIncomes.set(id, record);\n      return record;\n    }\n  }\n\n  async getWeeklyIncomesByBusinessId(businessId: number): Promise<WeeklyIncome[]> {\n    return Array.from(this.weeklyIncomes.values())\n      .filter(wi => wi.businessId === businessId);\n  }\n\n  async getWeeklyIncomesByUserId(userId: number): Promise<WeeklyIncome[]> {\n    const weeklyIncomes = Array.from(this.weeklyIncomes.values())\n      .filter(wi => wi.userId === userId);\n    console.log(`SECURE STORAGE: Retrieved ${weeklyIncomes.length} weekly incomes for user ${userId}`);\n    return weeklyIncomes;\n  }\n\n  async getWeeklyIncomeByWeek(businessId: number, weekStartDate: Date): Promise<WeeklyIncome | undefined> {\n    return Array.from(this.weeklyIncomes.values())\n      .find(wi => \n        wi.businessId === businessId &&\n        wi.weekStartDate.getTime() === weekStartDate.getTime()\n      );\n  }\n\n  // Income goals - USER ISOLATED\n  async createIncomeGoal(goal: InsertIncomeGoal): Promise<IncomeGoal> {\n    const id = this.currentIncomeGoalId++;\n    const goalRecord: IncomeGoal = {\n      ...goal,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.incomeGoals.set(id, goalRecord);\n    console.log(`SECURE STORAGE: Created income goal for user ${goal.userId}`);\n    return goalRecord;\n  }\n\n  async getIncomeGoalsByUserId(userId: number): Promise<IncomeGoal[]> {\n    const goals = Array.from(this.incomeGoals.values())\n      .filter(goal => goal.userId === userId);\n    console.log(`SECURE STORAGE: Retrieved ${goals.length} income goals for user ${userId}`);\n    return goals;\n  }\n\n  async getIncomeGoalsByBusinessId(businessId: number): Promise<IncomeGoal[]> {\n    return Array.from(this.incomeGoals.values())\n      .filter(goal => goal.businessId === businessId);\n  }\n\n  async updateIncomeGoal(id: number, goal: Partial<InsertIncomeGoal>): Promise<IncomeGoal | undefined> {\n    const existing = this.incomeGoals.get(id);\n    if (!existing) return undefined;\n\n    const updated: IncomeGoal = {\n      ...existing,\n      ...goal,\n      updatedAt: new Date(),\n    };\n    this.incomeGoals.set(id, updated);\n    return updated;\n  }\n\n  async deleteIncomeGoal(id: number): Promise<boolean> {\n    return this.incomeGoals.delete(id);\n  }\n\n  // Stock purchases - USER ISOLATED\n  async createStockPurchase(purchase: InsertStockPurchase): Promise<StockPurchase> {\n    const id = this.currentStockPurchaseId++;\n    const stockPurchase: StockPurchase = {\n      ...purchase,\n      id,\n      createdAt: new Date(),\n    };\n    this.stockPurchases.set(id, stockPurchase);\n    console.log(`SECURE STORAGE: Created stock purchase for user ${purchase.userId}`);\n    return stockPurchase;\n  }\n\n  async getStockPurchasesByUserId(userId: number): Promise<StockPurchase[]> {\n    const purchases = Array.from(this.stockPurchases.values())\n      .filter(purchase => purchase.userId === userId);\n    console.log(`SECURE STORAGE: Retrieved ${purchases.length} stock purchases for user ${userId}`);\n    return purchases;\n  }\n\n  async getStockPurchasesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<StockPurchase[]> {\n    return Array.from(this.stockPurchases.values())\n      .filter(purchase => \n        purchase.userId === userId &&\n        new Date(purchase.purchaseDate) >= startDate &&\n        new Date(purchase.purchaseDate) <= endDate\n      );\n  }\n\n  async deleteStockPurchase(id: number): Promise<boolean> {\n    return this.stockPurchases.delete(id);\n  }\n\n  // Password reset operations\n  async setPasswordResetToken(userId: number, token: string, expires: Date): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n\n    const updated: User = {\n      ...user,\n      passwordResetToken: token,\n      passwordResetExpires: expires,\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(userId, updated);\n    const { password: _, ...userWithoutPassword } = updated;\n    return userWithoutPassword as User;\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.passwordResetToken === token && \n          user.passwordResetExpires && \n          user.passwordResetExpires > new Date()) {\n        const { password: _, ...userWithoutPassword } = user;\n        return userWithoutPassword as User;\n      }\n    }\n    return undefined;\n  }\n\n  async clearPasswordResetToken(userId: number): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n\n    const updated: User = {\n      ...user,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n      updatedAt: new Date(),\n    };\n    \n    this.users.set(userId, updated);\n    const { password: _, ...userWithoutPassword } = updated;\n    return userWithoutPassword as User;\n  }\n}","size_bytes":16085},"server/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\n// Use the SendGrid API key directly since environment variable isn't being set properly\nconst SENDGRID_API_KEY = process.env.SENDGRID_API_KEY || \"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\";\n\nif (!SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY must be provided\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    console.log(`Email sent successfully to ${params.to}`);\n    return true;\n  } catch (error: any) {\n    console.error('SendGrid email error:', error);\n    if (error.response && error.response.body) {\n      console.error('SendGrid error details:', JSON.stringify(error.response.body, null, 2));\n    }\n    return false;\n  }\n}\n\nexport async function sendDeveloperNotification(\n  userEmail: string,\n  userName: string,\n  businessType: string,\n  signupType: 'registration' | 'promo_code' | 'subscription',\n  additionalInfo?: string\n): Promise<boolean> {\n  const subject = `🚀 New User Joined Salon Success Manager - ${userName}`;\n  \n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>New User Alert - Salon Success Manager</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n            .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n            .header { background: #e91e63; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }\n            .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }\n            .info-box { background: white; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #e91e63; }\n            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>New User Alert!</h1>\n                <p>Someone just joined Salon Success Manager</p>\n            </div>\n            <div class=\"content\">\n                <div class=\"info-box\">\n                    <h3>👤 User Details</h3>\n                    <p><strong>Name:</strong> ${userName}</p>\n                    <p><strong>Email:</strong> ${userEmail}</p>\n                    <p><strong>Business Type:</strong> ${businessType}</p>\n                    <p><strong>Signup Type:</strong> ${signupType}</p>\n                    <p><strong>Date:</strong> ${new Date().toLocaleString('en-GB', { timeZone: 'Europe/London' })}</p>\n                    ${additionalInfo ? `<p><strong>Additional Info:</strong> ${additionalInfo}</p>` : ''}\n                </div>\n                \n                <div class=\"info-box\">\n                    <h3>📊 Quick Actions</h3>\n                    <p>• Check ActiveCampaign for contact details</p>\n                    <p>• Monitor user onboarding progress</p>\n                    <p>• Follow up if needed</p>\n                </div>\n            </div>\n            <div class=\"footer\">\n                <p>Salon Success Manager - Developer Notification System</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n\n  return await sendEmail({\n    to: 'help@salonsuccessmanager.com', // Your developer email\n    from: 'help@salonsuccessmanager.com',\n    subject,\n    html: htmlContent,\n    text: `New user joined: ${userName} (${userEmail}) - Business: ${businessType} - Type: ${signupType}`\n  });\n}\n\nexport async function sendPasswordResetEmail(\n  email: string, \n  resetToken: string, \n  baseUrl: string\n): Promise<boolean> {\n  const resetLink = `${baseUrl}/reset-password?token=${resetToken}`;\n  \n  const htmlContent = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Reset Your Password - Katie Godfrey Business Coach</title>\n        <style>\n            body { \n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                line-height: 1.6;\n                color: #333;\n                max-width: 600px;\n                margin: 0 auto;\n                padding: 20px;\n                background-color: #f8f9fa;\n            }\n            .container {\n                background: white;\n                padding: 40px;\n                border-radius: 8px;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 30px;\n                padding-bottom: 20px;\n                border-bottom: 2px solid #f1f3f4;\n            }\n            .logo {\n                font-size: 24px;\n                font-weight: bold;\n                color: #d946ef;\n                margin-bottom: 10px;\n            }\n            .button {\n                display: inline-block;\n                background: linear-gradient(135deg, #d946ef 0%, #a855f7 100%);\n                color: white;\n                padding: 15px 30px;\n                text-decoration: none;\n                border-radius: 6px;\n                font-weight: 600;\n                margin: 20px 0;\n            }\n            .footer {\n                margin-top: 30px;\n                padding-top: 20px;\n                border-top: 1px solid #e5e7eb;\n                font-size: 14px;\n                color: #6b7280;\n                text-align: center;\n            }\n            .warning {\n                background-color: #fef3cd;\n                border: 1px solid #fde68a;\n                border-radius: 6px;\n                padding: 15px;\n                margin: 20px 0;\n                color: #92400e;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">Katie Godfrey Business Coach</div>\n                <h1 style=\"margin: 0; color: #1f2937;\">Reset Your Password</h1>\n            </div>\n            \n            <p>Hello,</p>\n            \n            <p>You recently requested to reset your password for your Salon Growth Manager account. Click the button below to reset it:</p>\n            \n            <div style=\"text-align: center;\">\n                <a href=\"${resetLink}\" class=\"button\">Reset My Password</a>\n            </div>\n            \n            <div class=\"warning\">\n                <strong>Important:</strong> This link will expire in 1 hour for security reasons. If you don't reset your password within this time, you'll need to request a new reset link.\n            </div>\n            \n            <p>If the button doesn't work, you can copy and paste this link into your browser:</p>\n            <p style=\"word-break: break-all; background: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace;\">\n                ${resetLink}\n            </p>\n            \n            <p><strong>If you didn't request this password reset, please ignore this email.</strong> Your password will remain unchanged.</p>\n            \n            <div class=\"footer\">\n                <p>This email was sent by Katie Godfrey Business Coach<br>\n                Need help? Contact support at <a href=\"mailto:support@katiegodfrey.com\">support@katiegodfrey.com</a></p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n\n  const textContent = `\nReset Your Password - Katie Godfrey Business Coach\n\nHello,\n\nYou recently requested to reset your password for your Salon Growth Manager account.\n\nTo reset your password, click this link or copy it into your browser:\n${resetLink}\n\nIMPORTANT: This link will expire in 1 hour for security reasons.\n\nIf you didn't request this password reset, please ignore this email. Your password will remain unchanged.\n\nNeed help? Contact support at support@katiegodfrey.com\n\n---\nKatie Godfrey Business Coach\n  `;\n\n  return await sendEmail({\n    to: email,\n    from: 'noreply@katiegodfrey.biz', // Using your verified sender email\n    subject: 'Reset Your Password - Katie Godfrey Business Coach',\n    text: textContent,\n    html: htmlContent,\n  });\n}","size_bytes":8534},"server/simple-auth.ts":{"content":"import express from 'express';\nimport session from 'express-session';\nimport MemoryStore from 'memorystore';\nimport bcrypt from 'bcryptjs';\nimport { storage } from './storage';\nimport { setupActiveCampaignTest } from './auth';\n\nconst MemStoreSession = MemoryStore(session);\n\n// Simple, secure session configuration\nexport const sessionConfig = session({\n  store: new MemStoreSession({\n    checkPeriod: 86400000 // prune expired entries every 24h\n  }),\n  secret: process.env.SESSION_SECRET || 'fallback-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  },\n  name: 'sessionId'\n});\n\n// Authentication middleware - simple and secure\nexport const requireAuth = async (req: any, res: any, next: any) => {\n  const userId = req.session?.userId;\n  console.log(`SIMPLE AUTH: Checking auth for session ${req.sessionID}, userId: ${userId}`);\n  \n  if (!userId) {\n    console.log(`SIMPLE AUTH: No userId in session - authentication failed`);\n    return res.status(401).json({ message: 'Please log in to continue' });\n  }\n\n  try {\n    const user = await storage.getUser(userId);\n    if (!user) {\n      console.log(`SIMPLE AUTH: User ${userId} not found in storage`);\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    req.user = user;\n    console.log(`SIMPLE AUTH: Authentication successful for user ${userId}`);\n    next();\n  } catch (error) {\n    console.error(`SIMPLE AUTH: Error checking user ${userId}:`, error);\n    return res.status(401).json({ message: 'Authentication error' });\n  }\n};\n\n// Register routes with simple auth\nexport function setupSimpleAuth(app: express.Application) {\n  console.log('SIMPLE AUTH: Setting up authentication routes');\n  \n  // Setup ActiveCampaign test endpoint\n  setupActiveCampaignTest(app);\n\n  // Login endpoint\n  app.post('/api/v2/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      console.log(`SIMPLE AUTH: Login attempt for email: ${email}`);\n\n      if (!email || !password) {\n        return res.status(400).json({ message: 'Email and password required' });\n      }\n\n      const user = await storage.verifyPassword(email, password);\n      if (!user) {\n        console.log(`SIMPLE AUTH: Invalid credentials for ${email}`);\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Create new session\n      req.session.userId = user.id;\n      req.session.save((err: any) => {\n        if (err) {\n          console.error(`SIMPLE AUTH: Session save error:`, err);\n          return res.status(500).json({ message: 'Session creation failed' });\n        }\n        \n        console.log(`SIMPLE AUTH: Login successful for user ${user.id}, session: ${req.sessionID}`);\n        res.json({ \n          message: 'Login successful',\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            businessType: user.businessType,\n            subscriptionStatus: user.subscriptionStatus,\n            subscriptionEndDate: user.subscriptionEndDate\n          }\n        });\n      });\n    } catch (error) {\n      console.error('SIMPLE AUTH: Login error:', error);\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Register endpoint (legacy)\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { email, password, name, businessType, promoCode } = req.body;\n      console.log(`SIMPLE AUTH: Registration attempt for email: ${email}`);\n\n      if (!email || !password || !name || !businessType) {\n        return res.status(400).json({ message: 'All fields are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists with this email' });\n      }\n\n      // Create new user\n      const newUser = await storage.createUser({\n        email,\n        password,\n        name,\n        businessType\n      });\n\n      // Set trial period subscription status\n      await storage.updateSubscriptionStatus(newUser.id, 'trial');\n\n      // Create session\n      req.session.userId = newUser.id;\n      req.session.save((err: any) => {\n        if (err) {\n          console.error(`SIMPLE AUTH: Session save error:`, err);\n          return res.status(500).json({ message: 'Session creation failed' });\n        }\n        \n        console.log(`SIMPLE AUTH: Registration successful for user ${newUser.id}, session: ${req.sessionID}`);\n        res.status(201).json({\n          id: newUser.id,\n          email: newUser.email,\n          name: newUser.name,\n          businessType: newUser.businessType,\n          subscriptionStatus: 'trial',\n          subscriptionEndDate: newUser.subscriptionEndDate\n        });\n      });\n    } catch (error) {\n      console.error('SIMPLE AUTH: Registration error:', error);\n      res.status(500).json({ message: 'Registration failed' });\n    }\n  });\n\n  // Register endpoint (v2)\n  app.post('/api/v2/auth/register', async (req, res) => {\n    try {\n      const { email, password, name, businessType, promoCode } = req.body;\n      console.log(`SIMPLE AUTH: Registration attempt for email: ${email}`);\n\n      if (!email || !password || !name || !businessType) {\n        return res.status(400).json({ message: 'All fields are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists with this email' });\n      }\n\n      // Create new user\n      const newUser = await storage.createUser({\n        email,\n        password,\n        name,\n        businessType\n      });\n\n      // Create session\n      req.session.userId = newUser.id;\n      req.session.save((err: any) => {\n        if (err) {\n          console.error(`SIMPLE AUTH: Session save error:`, err);\n          return res.status(500).json({ message: 'Session creation failed' });\n        }\n        \n        console.log(`SIMPLE AUTH: Registration successful for user ${newUser.id}, session: ${req.sessionID}`);\n        res.json({ \n          message: 'Registration successful',\n          user: {\n            id: newUser.id,\n            email: newUser.email,\n            name: newUser.name,\n            businessType: newUser.businessType,\n            subscriptionStatus: newUser.subscriptionStatus,\n            subscriptionEndDate: newUser.subscriptionEndDate\n          }\n        });\n      });\n    } catch (error) {\n      console.error('SIMPLE AUTH: Registration error:', error);\n      res.status(500).json({ message: 'Registration failed' });\n    }\n  });\n\n  // Get current user\n  app.get('/api/v2/auth/user', requireAuth, async (req: any, res) => {\n    try {\n      console.log(`SIMPLE AUTH: Getting user data for user ${req.user.id}`);\n      res.json({\n        id: req.user.id,\n        email: req.user.email,\n        name: req.user.name,\n        businessType: req.user.businessType,\n        subscriptionStatus: req.user.subscriptionStatus,\n        subscriptionEndDate: req.user.subscriptionEndDate\n      });\n    } catch (error) {\n      console.error('SIMPLE AUTH: Get user error:', error);\n      res.status(500).json({ message: 'Failed to get user data' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/v2/auth/logout', (req: any, res) => {\n    const sessionId = req.sessionID;\n    const userId = req.session?.userId;\n    \n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(`SIMPLE AUTH: Logout error for session ${sessionId}:`, err);\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      \n      console.log(`SIMPLE AUTH: Logout successful for user ${userId}, session ${sessionId} destroyed`);\n      res.clearCookie('sessionId');\n      res.json({ message: 'Logout successful' });\n    });\n  });\n\n  // Admin authentication middleware\n  const requireAdmin = async (req: any, res: any, next: any) => {\n    const adminPassword = req.headers['x-admin-password'];\n    const expectedPassword = process.env.ADMIN_PASSWORD || 'admin123'; // Default for development\n    \n    if (adminPassword !== expectedPassword) {\n      return res.status(401).json({ message: 'Admin access required' });\n    }\n    next();\n  };\n\n  // Admin endpoints for user management\n  app.get('/api/admin/users', requireAdmin, async (req: any, res) => {\n    try {\n      const page = parseInt(req.query.page) || 1;\n      const limit = parseInt(req.query.limit) || 50;\n      const search = req.query.search || '';\n      \n      const users = await storage.getAllUsers();\n      \n      // Filter users by search term\n      let filteredUsers = users;\n      if (search) {\n        filteredUsers = users.filter(user => \n          user.email.toLowerCase().includes(search.toLowerCase()) ||\n          user.name.toLowerCase().includes(search.toLowerCase()) ||\n          user.businessType.toLowerCase().includes(search.toLowerCase())\n        );\n      }\n      \n      // Paginate results\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedUsers = filteredUsers.slice(startIndex, endIndex);\n      \n      res.json({\n        users: paginatedUsers,\n        total: filteredUsers.length,\n        page,\n        totalPages: Math.ceil(filteredUsers.length / limit)\n      });\n    } catch (error) {\n      console.error('Admin get users error:', error);\n      res.status(500).json({ message: 'Failed to get users' });\n    }\n  });\n\n  // Get user statistics\n  app.get('/api/admin/stats', requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      \n      const stats = {\n        totalUsers: users.length,\n        activeSubscriptions: users.filter(u => u.subscriptionStatus === 'active').length,\n        trialUsers: users.filter(u => u.subscriptionStatus === 'trial').length,\n        inactiveUsers: users.filter(u => u.subscriptionStatus === 'inactive').length,\n        freeUsers: users.filter(u => u.subscriptionStatus === 'free').length,\n        recentUsers: users.filter(u => {\n          const createdAt = new Date(u.createdAt || 0);\n          const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n          return createdAt > weekAgo;\n        }).length,\n        businessTypes: users.reduce((acc: any, user) => {\n          acc[user.businessType] = (acc[user.businessType] || 0) + 1;\n          return acc;\n        }, {})\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error('Admin get stats error:', error);\n      res.status(500).json({ message: 'Failed to get statistics' });\n    }\n  });\n\n  // Update user subscription status (for support)\n  app.put('/api/admin/users/:userId/subscription', requireAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { status, endDate } = req.body;\n      \n      await storage.updateSubscriptionStatus(parseInt(userId), status);\n      if (endDate) {\n        await storage.updateSubscriptionEndDate(parseInt(userId), new Date(endDate));\n      }\n      \n      const updatedUser = await storage.getUser(parseInt(userId));\n      res.json({ user: updatedUser });\n    } catch (error) {\n      console.error('Admin update user error:', error);\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  // Get individual user details\n  app.get('/api/admin/users/:userId', requireAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(parseInt(userId));\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      console.error('Admin get user error:', error);\n      res.status(500).json({ message: 'Failed to get user' });\n    }\n  });\n}","size_bytes":11978},"server/storage.ts":{"content":"import { \n  users, \n  hourlyRateCalculations, \n  treatments, \n  expenses,\n  businesses,\n  weeklyIncomes,\n  incomeGoals,\n  stockPurchases,\n  moneyPots,\n  type User, \n  type InsertUser,\n  type HourlyRateCalculation,\n  type InsertHourlyRateCalculation,\n  type Treatment,\n  type InsertTreatment,\n  type Expense,\n  type InsertExpense,\n  type Business,\n  type InsertBusiness,\n  type WeeklyIncome,\n  type InsertWeeklyIncome,\n  type IncomeGoal,\n  type InsertIncomeGoal,\n  type StockPurchase,\n  type InsertStockPurchase,\n  type MoneyPot,\n  type InsertMoneyPot\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  verifyPassword(email: string, password: string): Promise<User | null>;\n  updateUserStripeInfo(userId: number, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User | undefined>;\n  updateSubscriptionStatus(userId: number, status: string, endDate?: Date): Promise<User | undefined>;\n  updateSubscriptionEndDate(userId: number, endDate: Date): Promise<User | undefined>;\n\n  // Password reset operations\n  setPasswordResetToken(userId: number, token: string, expires: Date): Promise<User | undefined>;\n  getUserByResetToken(token: string): Promise<User | undefined>;\n  clearPasswordResetToken(userId: number): Promise<User | undefined>;\n  updatePassword(userId: number, hashedPassword: string): Promise<User | undefined>;\n\n  // Hourly rate calculation operations\n  createHourlyRateCalculation(calculation: InsertHourlyRateCalculation): Promise<HourlyRateCalculation>;\n  getHourlyRateCalculationsByUserId(userId: number): Promise<HourlyRateCalculation[]>;\n  getLatestHourlyRateCalculation(userId: number): Promise<HourlyRateCalculation | undefined>;\n\n  // Treatment operations\n  createTreatment(treatment: InsertTreatment): Promise<Treatment>;\n  getTreatmentsByUserId(userId: number): Promise<Treatment[]>;\n  updateTreatment(id: number, treatment: Partial<InsertTreatment>): Promise<Treatment | undefined>;\n  deleteTreatment(id: number): Promise<boolean>;\n\n  // Expense operations\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  getExpensesByUserId(userId: number): Promise<Expense[]>;\n  getExpensesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<Expense[]>;\n  deleteExpense(id: number): Promise<boolean>;\n\n  // Business operations\n  createBusiness(business: InsertBusiness): Promise<Business>;\n  getBusinessesByUserId(userId: number): Promise<Business[]>;\n  updateBusiness(id: number, business: Partial<InsertBusiness>): Promise<Business | undefined>;\n  deleteBusiness(id: number): Promise<boolean>;\n\n  // Weekly income operations\n  createOrUpdateWeeklyIncome(weeklyIncome: InsertWeeklyIncome): Promise<WeeklyIncome>;\n  getWeeklyIncomesByBusinessId(businessId: number): Promise<WeeklyIncome[]>;\n  getWeeklyIncomesByUserId(userId: number): Promise<WeeklyIncome[]>;\n  getWeeklyIncomeByWeek(businessId: number, weekStartDate: Date): Promise<WeeklyIncome | undefined>;\n\n  // Income goal operations\n  createIncomeGoal(goal: InsertIncomeGoal & { userId: number }): Promise<IncomeGoal>;\n  getIncomeGoalsByUserId(userId: number): Promise<IncomeGoal[]>;\n  getIncomeGoalsByBusinessId(businessId: number): Promise<IncomeGoal[]>;\n  updateIncomeGoal(id: number, goal: Partial<InsertIncomeGoal>): Promise<IncomeGoal | undefined>;\n  deleteIncomeGoal(id: number): Promise<boolean>;\n\n  // Stock purchase operations\n  createStockPurchase(purchase: InsertStockPurchase): Promise<StockPurchase>;\n  getStockPurchasesByUserId(userId: number): Promise<StockPurchase[]>;\n  getStockPurchasesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<StockPurchase[]>;\n  deleteStockPurchase(id: number): Promise<boolean>;\n\n  // Money pot operations\n  createMoneyPot(pot: InsertMoneyPot): Promise<MoneyPot>;\n  getMoneyPotsByUserId(userId: number): Promise<MoneyPot[]>;\n  getMoneyPotsByBusinessId(businessId: number): Promise<MoneyPot[]>;\n  updateMoneyPot(id: number, pot: Partial<InsertMoneyPot>): Promise<MoneyPot | undefined>;\n  deleteMoneyPot(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private hourlyRateCalculations: Map<number, HourlyRateCalculation>;\n  private treatments: Map<number, Treatment>;\n  private expenses: Map<number, Expense>;\n  private businesses: Map<number, Business>;\n  private weeklyIncomes: Map<number, WeeklyIncome>;\n  private incomeGoals: Map<number, IncomeGoal>;\n  private stockPurchases: Map<number, StockPurchase>;\n  private moneyPots: Map<number, MoneyPot>;\n  private currentUserId: number;\n  private currentHourlyRateId: number;\n  private currentTreatmentId: number;\n  private currentExpenseId: number;\n  private currentBusinessId: number;\n  private currentWeeklyIncomeId: number;\n  private currentIncomeGoalId: number;\n  private currentStockPurchaseId: number;\n  private currentMoneyPotId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.hourlyRateCalculations = new Map();\n    this.treatments = new Map();\n    this.expenses = new Map();\n    this.businesses = new Map();\n    this.weeklyIncomes = new Map();\n    this.incomeGoals = new Map();\n    this.stockPurchases = new Map();\n    this.moneyPots = new Map();\n    this.currentUserId = 1;\n    this.currentHourlyRateId = 1;\n    this.currentTreatmentId = 1;\n    this.currentExpenseId = 1;\n    this.currentBusinessId = 1;\n    this.currentWeeklyIncomeId = 1;\n    this.currentIncomeGoalId = 1;\n    this.currentStockPurchaseId = 1;\n    this.currentMoneyPotId = 1;\n\n    // Add a demo user\n    this.users.set(1, {\n      id: 1,\n      email: \"katie@kgsalon.com\",\n      password: \"$2a$10$PjOv2qGk7Q8QV4K9G0K9Pezr9PmxQ8QZPjOv2qGk7Q8QV4K9G0K9Pe\", // \"Test123!\"\n      name: \"Katie Godfrey\",\n      businessType: \"Hair Salon\",\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      subscriptionStatus: \"trial\",\n      subscriptionEndDate: null,\n      emailVerified: true,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n    this.currentUserId = 2;\n\n    // Add a demo business\n    this.businesses.set(1, {\n      id: 1,\n      userId: 1,\n      name: \"Main Salon\",\n      location: \"City Center\",\n      isActive: 1,\n      createdAt: new Date(),\n    });\n    this.currentBusinessId = 2;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async setPasswordResetToken(userId: number, token: string, expires: Date): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      passwordResetToken: token,\n      passwordResetExpires: expires,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.passwordResetToken === token && \n                user.passwordResetExpires && \n                user.passwordResetExpires > new Date()\n    );\n  }\n\n  async clearPasswordResetToken(userId: number): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updatePassword(userId: number, hashedPassword: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      password: hashedPassword,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateUserStripeInfo(userId: number, stripeCustomerId: string, stripeSubscriptionId?: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      stripeCustomerId,\n      stripeSubscriptionId: stripeSubscriptionId || user.stripeSubscriptionId,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateSubscriptionStatus(userId: number, status: string, endDate?: Date): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      subscriptionStatus: status,\n      subscriptionEndDate: endDate || user.subscriptionEndDate,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async updateSubscriptionEndDate(userId: number, endDate: Date): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updatedUser = {\n      ...user,\n      subscriptionEndDate: endDate,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updatedUser);\n    return updatedUser;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = { \n      ...insertUser, \n      id,\n      password: hashedPassword,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      subscriptionStatus: \"trial\",\n      subscriptionEndDate: null,\n      emailVerified: false,\n      passwordResetToken: null,\n      passwordResetExpires: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createHourlyRateCalculation(calculation: InsertHourlyRateCalculation): Promise<HourlyRateCalculation> {\n    const id = this.currentHourlyRateId++;\n    const hourlyRateCalculation: HourlyRateCalculation = {\n      ...calculation,\n      id,\n      staffCount: calculation.staffCount || 0,\n      staffTargetPerPerson: calculation.staffTargetPerPerson || null,\n      createdAt: new Date(),\n    };\n    this.hourlyRateCalculations.set(id, hourlyRateCalculation);\n    return hourlyRateCalculation;\n  }\n\n  async getHourlyRateCalculationsByUserId(userId: number): Promise<HourlyRateCalculation[]> {\n    return Array.from(this.hourlyRateCalculations.values())\n      .filter(calc => calc.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, 5);\n  }\n\n  async getLatestHourlyRateCalculation(userId: number): Promise<HourlyRateCalculation | undefined> {\n    const calculations = await this.getHourlyRateCalculationsByUserId(userId);\n    return calculations[0];\n  }\n\n  async createTreatment(treatment: InsertTreatment & { userId: number, profitMargin: string }): Promise<Treatment> {\n    const id = this.currentTreatmentId++;\n    const price = parseFloat(treatment.price.toString());\n    const overheadCost = parseFloat(treatment.overheadCost.toString());\n    const totalCosts = overheadCost;\n    const profit = price - totalCosts;\n    const profitMargin = price > 0 ? (profit / price) * 100 : 0;\n    \n    const treatmentRecord: Treatment = {\n      ...treatment,\n      id,\n      profitMargin: profitMargin.toString(),\n      createdAt: new Date(),\n    };\n    this.treatments.set(id, treatmentRecord);\n    return treatmentRecord;\n  }\n\n  async getTreatmentsByUserId(userId: number): Promise<Treatment[]> {\n    return Array.from(this.treatments.values())\n      .filter(treatment => treatment.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async updateTreatment(id: number, treatment: Partial<InsertTreatment>): Promise<Treatment | undefined> {\n    const existing = this.treatments.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...treatment };\n    \n    if (treatment.price || treatment.overheadCost) {\n      const price = parseFloat(updated.price.toString());\n      const overheadCost = parseFloat(updated.overheadCost.toString());\n      const totalCosts = overheadCost;\n      const profit = price - totalCosts;\n      const profitMargin = price > 0 ? (profit / price) * 100 : 0;\n      updated.profitMargin = profitMargin.toString();\n    }\n\n    this.treatments.set(id, updated);\n    return updated;\n  }\n\n  async deleteTreatment(id: number): Promise<boolean> {\n    return this.treatments.delete(id);\n  }\n\n  async createExpense(expense: InsertExpense): Promise<Expense> {\n    const id = this.currentExpenseId++;\n    const expenseRecord: Expense = {\n      ...expense,\n      id,\n      createdAt: new Date(),\n    };\n    this.expenses.set(id, expenseRecord);\n    return expenseRecord;\n  }\n\n  async getExpensesByUserId(userId: number): Promise<Expense[]> {\n    return Array.from(this.expenses.values())\n      .filter(expense => expense.userId === userId)\n      .sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n\n  async getExpensesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<Expense[]> {\n    return Array.from(this.expenses.values())\n      .filter(expense => \n        expense.userId === userId && \n        expense.date >= startDate && \n        expense.date <= endDate\n      )\n      .sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n\n  async deleteExpense(id: number): Promise<boolean> {\n    return this.expenses.delete(id);\n  }\n\n  // Business operations\n  async createBusiness(business: InsertBusiness): Promise<Business> {\n    const id = this.currentBusinessId++;\n    const businessRecord: Business = {\n      id,\n      name: business.name,\n      location: business.location || null,\n      userId: 1, // Hardcoded for now\n      isActive: 1,\n      createdAt: new Date(),\n    };\n    this.businesses.set(id, businessRecord);\n    return businessRecord;\n  }\n\n  async getBusinessesByUserId(userId: number): Promise<Business[]> {\n    return Array.from(this.businesses.values())\n      .filter(business => business.userId === userId && business.isActive === 1)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async updateBusiness(id: number, business: Partial<InsertBusiness>): Promise<Business | undefined> {\n    const existing = this.businesses.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...business };\n    this.businesses.set(id, updated);\n    return updated;\n  }\n\n  async deleteBusiness(id: number): Promise<boolean> {\n    const business = this.businesses.get(id);\n    if (!business) return false;\n    \n    // Soft delete\n    business.isActive = 0;\n    this.businesses.set(id, business);\n    return true;\n  }\n\n  // Weekly income operations\n  async createOrUpdateWeeklyIncome(weeklyIncome: InsertWeeklyIncome): Promise<WeeklyIncome> {\n    // Check if record exists for this business and week\n    const existing = Array.from(this.weeklyIncomes.values()).find(\n      income => income.businessId === weeklyIncome.businessId &&\n                income.weekStartDate.getTime() === weeklyIncome.weekStartDate.getTime()\n    );\n\n    const weeklyTotal = parseFloat((weeklyIncome.weeklyTotal || \"0\").toString());\n    const vatAmount = weeklyTotal * 0.20; // 20% VAT\n    const profitAmount = weeklyTotal * 0.05; // 5% profit\n\n    if (existing) {\n      // Update existing record\n      const updated: WeeklyIncome = {\n        ...existing,\n        ...weeklyIncome,\n        weeklyTotal: weeklyTotal.toString(),\n        vatAmount: vatAmount.toString(),\n        profitAmount: profitAmount.toString(),\n        updatedAt: new Date(),\n      };\n      this.weeklyIncomes.set(existing.id, updated);\n      return updated;\n    } else {\n      // Create new record\n      const id = this.currentWeeklyIncomeId++;\n      const record: WeeklyIncome = {\n        ...weeklyIncome,\n        id,\n        userId: weeklyIncome.userId,\n        weeklyTotal: weeklyTotal.toString(),\n        vatAmount: vatAmount.toString(),\n        profitAmount: profitAmount.toString(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.weeklyIncomes.set(id, record);\n      return record;\n    }\n  }\n\n  async getWeeklyIncomesByBusinessId(businessId: number): Promise<WeeklyIncome[]> {\n    return Array.from(this.weeklyIncomes.values())\n      .filter(income => income.businessId === businessId)\n      .sort((a, b) => b.weekStartDate.getTime() - a.weekStartDate.getTime());\n  }\n\n  async getWeeklyIncomesByUserId(userId: number): Promise<WeeklyIncome[]> {\n    const userBusinesses = await this.getBusinessesByUserId(userId);\n    const businessIds = userBusinesses.map(b => b.id);\n    \n    return Array.from(this.weeklyIncomes.values())\n      .filter(income => businessIds.includes(income.businessId))\n      .sort((a, b) => b.weekStartDate.getTime() - a.weekStartDate.getTime());\n  }\n\n  async getWeeklyIncomeByWeek(businessId: number, weekStartDate: Date): Promise<WeeklyIncome | undefined> {\n    return Array.from(this.weeklyIncomes.values()).find(\n      income => income.businessId === businessId &&\n                income.weekStartDate.getTime() === weekStartDate.getTime()\n    );\n  }\n\n  // Income goal operations\n  async createIncomeGoal(goal: InsertIncomeGoal): Promise<IncomeGoal> {\n    const id = this.currentIncomeGoalId++;\n    const goalRecord: IncomeGoal = {\n      id,\n      userId: 1, // Hardcoded for now\n      businessId: goal.businessId || null,\n      goalType: goal.goalType,\n      targetAmount: goal.targetAmount,\n      year: goal.year,\n      month: goal.month || null,\n      isActive: 1,\n      createdAt: new Date(),\n    };\n    this.incomeGoals.set(id, goalRecord);\n    return goalRecord;\n  }\n\n  async getIncomeGoalsByUserId(userId: number): Promise<IncomeGoal[]> {\n    return Array.from(this.incomeGoals.values())\n      .filter(goal => goal.userId === userId && goal.isActive === 1)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getIncomeGoalsByBusinessId(businessId: number): Promise<IncomeGoal[]> {\n    return Array.from(this.incomeGoals.values())\n      .filter(goal => goal.businessId === businessId && goal.isActive === 1)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async updateIncomeGoal(id: number, goal: Partial<InsertIncomeGoal>): Promise<IncomeGoal | undefined> {\n    const existing = this.incomeGoals.get(id);\n    if (!existing) return undefined;\n\n    const updated = { ...existing, ...goal };\n    this.incomeGoals.set(id, updated);\n    return updated;\n  }\n\n  async deleteIncomeGoal(id: number): Promise<boolean> {\n    const goal = this.incomeGoals.get(id);\n    if (!goal) return false;\n    \n    // Soft delete\n    goal.isActive = 0;\n    this.incomeGoals.set(id, goal);\n    return true;\n  }\n\n  // Stock purchase operations\n  async createStockPurchase(purchase: InsertStockPurchase & { userId: number }): Promise<StockPurchase> {\n    const stockPurchase: StockPurchase = {\n      id: this.currentStockPurchaseId++,\n      userId: purchase.userId,\n      supplier: purchase.supplier,\n      purchaseDate: new Date(purchase.purchaseDate),\n      totalAmount: purchase.totalAmount,\n      description: purchase.description || null,\n      category: purchase.category,\n      createdAt: new Date(),\n    };\n    this.stockPurchases.set(stockPurchase.id, stockPurchase);\n    return stockPurchase;\n  }\n\n  async getStockPurchasesByUserId(userId: number): Promise<StockPurchase[]> {\n    return Array.from(this.stockPurchases.values())\n      .filter(purchase => purchase.userId === userId)\n      .sort((a, b) => new Date(b.purchaseDate).getTime() - new Date(a.purchaseDate).getTime());\n  }\n\n  async getStockPurchasesByUserIdAndDateRange(userId: number, startDate: Date, endDate: Date): Promise<StockPurchase[]> {\n    return Array.from(this.stockPurchases.values())\n      .filter(purchase => \n        purchase.userId === userId &&\n        purchase.purchaseDate >= startDate &&\n        purchase.purchaseDate <= endDate\n      )\n      .sort((a, b) => new Date(b.purchaseDate).getTime() - new Date(a.purchaseDate).getTime());\n  }\n\n  async deleteStockPurchase(id: number): Promise<boolean> {\n    return this.stockPurchases.delete(id);\n  }\n\n  // Money pot operations\n  async createMoneyPot(pot: InsertMoneyPot): Promise<MoneyPot> {\n    const moneyPot: MoneyPot = {\n      id: this.currentMoneyPotId++,\n      ...pot,\n      businessId: pot.businessId || null,\n      isActive: pot.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.moneyPots.set(moneyPot.id, moneyPot);\n    return moneyPot;\n  }\n\n  async getMoneyPotsByUserId(userId: number): Promise<MoneyPot[]> {\n    return Array.from(this.moneyPots.values())\n      .filter(pot => pot.userId === userId && pot.isActive)\n      .sort((a, b) => (a.sortOrder || 0) - (b.sortOrder || 0));\n  }\n\n  async getMoneyPotsByBusinessId(businessId: number): Promise<MoneyPot[]> {\n    return Array.from(this.moneyPots.values())\n      .filter(pot => pot.businessId === businessId && pot.isActive)\n      .sort((a, b) => (a.sortOrder || 0) - (b.sortOrder || 0));\n  }\n\n  async updateMoneyPot(id: number, pot: Partial<InsertMoneyPot>): Promise<MoneyPot | undefined> {\n    const existing = this.moneyPots.get(id);\n    if (!existing) return undefined;\n\n    const updated = { \n      ...existing, \n      ...pot, \n      updatedAt: new Date() \n    };\n    this.moneyPots.set(id, updated);\n    return updated;\n  }\n\n  async deleteMoneyPot(id: number): Promise<boolean> {\n    const pot = this.moneyPots.get(id);\n    if (!pot) return false;\n    \n    pot.isActive = false;\n    pot.updatedAt = new Date();\n    this.moneyPots.set(id, pot);\n    return true;\n  }\n\n\n}\n\nimport { DatabaseStorage } from \"./database-storage\";\n\nexport const storage = new DatabaseStorage();\n","size_bytes":22483},"server/stripe-webhooks.ts":{"content":"import type { Express } from \"express\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { sendDeveloperNotification } from \"./sendgrid\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2023-10-16\",\n});\n\nexport function setupStripeWebhooks(app: Express) {\n  // Stripe webhook to handle subscription events\n  app.post('/api/stripe-webhook', async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    \n    if (!sig || !process.env.STRIPE_WEBHOOK_SECRET) {\n      return res.status(400).send('Webhook signature missing');\n    }\n\n    let event: Stripe.Event;\n\n    try {\n      event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);\n    } catch (err) {\n      console.log(`Webhook signature verification failed.`, err);\n      return res.status(400).send(`Webhook Error: ${err}`);\n    }\n\n    // Handle the event\n    switch (event.type) {\n      case 'customer.subscription.created':\n        await handleSubscriptionCreated(event.data.object as Stripe.Subscription);\n        break;\n      case 'customer.subscription.updated':\n        await handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\n        break;\n      case 'customer.subscription.deleted':\n        await handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\n        break;\n      case 'invoice.payment_succeeded':\n        await handlePaymentSucceeded(event.data.object as Stripe.Invoice);\n        break;\n      case 'invoice.payment_failed':\n        await handlePaymentFailed(event.data.object as Stripe.Invoice);\n        break;\n      default:\n        console.log(`Unhandled event type ${event.type}`);\n    }\n\n    res.json({ received: true });\n  });\n}\n\nasync function handleSubscriptionCreated(subscription: Stripe.Subscription) {\n  console.log('Subscription created:', subscription.id);\n  \n  const customer = await stripe.customers.retrieve(subscription.customer as string);\n  if ('deleted' in customer) return;\n  \n  // Find user by email or customer ID\n  const user = await storage.getUserByEmail(customer.email!);\n  if (!user) return;\n\n  // Update user subscription status\n  await storage.updateUserStripeInfo(\n    user.id, \n    customer.id, \n    subscription.id\n  );\n\n  // Set status based on trial\n  const status = subscription.status === 'trialing' ? 'trial' : 'active';\n  const endDate = subscription.status === 'trialing' \n    ? new Date(subscription.trial_end! * 1000)\n    : new Date(subscription.current_period_end * 1000);\n\n  await storage.updateSubscriptionStatus(user.id, status, endDate);\n  \n  // Send developer notification for new subscription\n  try {\n    await sendDeveloperNotification(\n      user.email,\n      user.name,\n      user.businessType,\n      'subscription',\n      `New subscription created - Status: ${status}`\n    );\n  } catch (error) {\n    console.error('Failed to send subscription creation notification:', error);\n  }\n}\n\nasync function handleSubscriptionUpdated(subscription: Stripe.Subscription) {\n  console.log('Subscription updated:', subscription.id);\n  \n  const customer = await stripe.customers.retrieve(subscription.customer as string);\n  if ('deleted' in customer) return;\n  \n  const user = await storage.getUserByEmail(customer.email!);\n  if (!user) return;\n\n  let status = 'inactive';\n  let endDate: Date | undefined;\n\n  switch (subscription.status) {\n    case 'trialing':\n      status = 'trial';\n      endDate = new Date(subscription.trial_end! * 1000);\n      break;\n    case 'active':\n      status = 'active';\n      endDate = new Date(subscription.current_period_end * 1000);\n      break;\n    case 'past_due':\n      status = 'past_due';\n      endDate = new Date(subscription.current_period_end * 1000);\n      break;\n    case 'canceled':\n    case 'unpaid':\n      status = 'inactive';\n      break;\n  }\n\n  await storage.updateSubscriptionStatus(user.id, status, endDate);\n}\n\nasync function handleSubscriptionDeleted(subscription: Stripe.Subscription) {\n  console.log('Subscription deleted:', subscription.id);\n  \n  const customer = await stripe.customers.retrieve(subscription.customer as string);\n  if ('deleted' in customer) return;\n  \n  const user = await storage.getUserByEmail(customer.email!);\n  if (!user) return;\n\n  await storage.updateSubscriptionStatus(user.id, 'inactive');\n}\n\nasync function handlePaymentSucceeded(invoice: Stripe.Invoice) {\n  console.log('Payment succeeded for invoice:', invoice.id);\n  \n  if (invoice.subscription) {\n    const subscription = await stripe.subscriptions.retrieve(invoice.subscription as string);\n    await handleSubscriptionUpdated(subscription);\n    \n    // Send developer notification for successful payment\n    const customer = await stripe.customers.retrieve(subscription.customer as string);\n    if (!('deleted' in customer) && customer.email) {\n      const user = await storage.getUserByEmail(customer.email);\n      if (user) {\n        try {\n          await sendDeveloperNotification(\n            user.email,\n            user.name,\n            user.businessType,\n            'subscription',\n            `Payment succeeded - £${(invoice.amount_paid / 100).toFixed(2)}`\n          );\n        } catch (error) {\n          console.error('Failed to send payment success notification:', error);\n        }\n      }\n    }\n  }\n}\n\nasync function handlePaymentFailed(invoice: Stripe.Invoice) {\n  console.log('Payment failed for invoice:', invoice.id);\n  \n  if (invoice.subscription) {\n    const subscription = await stripe.subscriptions.retrieve(invoice.subscription as string);\n    await handleSubscriptionUpdated(subscription);\n  }\n}","size_bytes":5598},"server/trial-manager.ts":{"content":"import type { User } from \"@shared/schema\";\n\nexport class TrialManager {\n  /**\n   * Check if user is in active trial period (managed by Stripe)\n   */\n  static isTrialActive(user: User): boolean {\n    return user.subscriptionStatus === \"trialing\";\n  }\n\n  /**\n   * Get days remaining in trial (calculated from Stripe subscription end date)\n   */\n  static getTrialDaysRemaining(user: User): number {\n    if (!this.isTrialActive(user) || !user.subscriptionEndDate) {\n      return 0;\n    }\n\n    const now = new Date();\n    const trialEnd = new Date(user.subscriptionEndDate);\n    const diffTime = trialEnd.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return Math.max(0, diffDays);\n  }\n\n  /**\n   * Check if user has access to premium features\n   */\n  static hasAccess(user: User): boolean {\n    // Trial users get full access\n    if (this.isTrialActive(user)) {\n      return true;\n    }\n\n    // Active subscribers get access\n    if (user.subscriptionStatus === \"active\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get user's access status for display\n   */\n  static getAccessStatus(user: User): {\n    hasAccess: boolean;\n    status: \"trial\" | \"active\" | \"expired\" | \"inactive\";\n    daysRemaining?: number;\n    message: string;\n  } {\n    if (user.subscriptionStatus === \"trialing\") {\n      const daysRemaining = this.getTrialDaysRemaining(user);\n      return {\n        hasAccess: true,\n        status: \"trial\",\n        daysRemaining,\n        message: `${daysRemaining} days left in your free trial`\n      };\n    }\n\n    if (user.subscriptionStatus === \"active\") {\n      return {\n        hasAccess: true,\n        status: \"active\",\n        message: \"Active subscription\"\n      };\n    }\n\n    if (user.subscriptionStatus === \"incomplete\" || user.subscriptionStatus === \"past_due\") {\n      return {\n        hasAccess: false,\n        status: \"expired\",\n        message: \"Payment required - Complete your subscription\"\n      };\n    }\n\n    return {\n      hasAccess: false,\n      status: \"inactive\",\n      message: \"Subscribe to access premium features\"\n    };\n  }\n}","size_bytes":2125},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, decimal, timestamp, varchar, jsonb, index, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\").unique().notNull(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  businessType: text(\"business_type\").notNull(),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  subscriptionStatus: text(\"subscription_status\").default(\"trial\"),\n  subscriptionEndDate: timestamp(\"subscription_end_date\"),\n  emailVerified: boolean(\"email_verified\").default(false),\n  passwordResetToken: text(\"password_reset_token\"),\n  passwordResetExpires: timestamp(\"password_reset_expires\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const hourlyRateCalculations = pgTable(\"hourly_rate_calculations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  monthlyExpenses: decimal(\"monthly_expenses\", { precision: 10, scale: 2 }).notNull(),\n  desiredProfit: decimal(\"desired_profit\", { precision: 5, scale: 2 }).notNull(),\n  weeklyHours: integer(\"weekly_hours\").notNull(),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).notNull(),\n  staffCount: integer(\"staff_count\").notNull().default(0),\n  calculatedRate: decimal(\"calculated_rate\", { precision: 10, scale: 2 }).notNull(),\n  staffTargetPerPerson: decimal(\"staff_target_per_person\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const treatments = pgTable(\"treatments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  overheadCost: decimal(\"overhead_cost\", { precision: 10, scale: 2 }).notNull(),\n  profitMargin: decimal(\"profit_margin\", { precision: 5, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  category: text(\"category\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const businesses = pgTable(\"businesses\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  location: text(\"location\"),\n  isActive: integer(\"is_active\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const weeklyIncomes = pgTable(\"weekly_incomes\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  businessId: integer(\"business_id\").notNull(),\n  weekStartDate: timestamp(\"week_start_date\").notNull(),\n  weeklyTotal: decimal(\"weekly_total\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  vatAmount: decimal(\"vat_amount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  profitAmount: decimal(\"profit_amount\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const incomeGoals = pgTable(\"income_goals\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  businessId: integer(\"business_id\"),\n  goalType: text(\"goal_type\").notNull(), // 'weekly', 'monthly', 'yearly'\n  targetAmount: decimal(\"target_amount\", { precision: 10, scale: 2 }).notNull(),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\"), // null for yearly goals\n  isActive: integer(\"is_active\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const stockPurchases = pgTable(\"stock_purchases\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  supplier: text(\"supplier\").notNull(),\n  purchaseDate: timestamp(\"purchase_date\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // Hair Products, Skincare, Equipment, etc.\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const moneyPots = pgTable(\"money_pots\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  businessId: integer(\"business_id\"),\n  name: text(\"name\").notNull(),\n  percentage: decimal(\"percentage\", { precision: 5, scale: 2 }).notNull(),\n  color: text(\"color\").default(\"#3b82f6\"),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  name: z.string().min(1, \"Name is required\"),\n  businessType: z.string().min(1, \"Business type is required\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertHourlyRateCalculationSchema = createInsertSchema(hourlyRateCalculations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTreatmentSchema = createInsertSchema(treatments).omit({\n  id: true,\n  createdAt: true,\n  profitMargin: true,\n  userId: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBusinessSchema = createInsertSchema(businesses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWeeklyIncomeSchema = createInsertSchema(weeklyIncomes)\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n    vatAmount: true,\n    profitAmount: true,\n  })\n  .extend({\n    weekStartDate: z.string().transform((str) => new Date(str)),\n  });\n\nexport const insertIncomeGoalSchema = createInsertSchema(incomeGoals).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n}).extend({\n  businessId: z.number().optional(),\n});\n\nexport const insertStockPurchaseSchema = createInsertSchema(stockPurchases).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n}).extend({\n  purchaseDate: z.string().min(1, \"Purchase date is required\"),\n});\n\nexport const insertMoneyPotSchema = createInsertSchema(moneyPots).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertHourlyRateCalculation = z.infer<typeof insertHourlyRateCalculationSchema>;\nexport type HourlyRateCalculation = typeof hourlyRateCalculations.$inferSelect;\nexport type InsertTreatment = z.infer<typeof insertTreatmentSchema>;\nexport type Treatment = typeof treatments.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertBusiness = z.infer<typeof insertBusinessSchema>;\nexport type Business = typeof businesses.$inferSelect;\nexport type InsertWeeklyIncome = z.infer<typeof insertWeeklyIncomeSchema>;\nexport type WeeklyIncome = typeof weeklyIncomes.$inferSelect;\nexport type InsertIncomeGoal = z.infer<typeof insertIncomeGoalSchema>;\nexport type IncomeGoal = typeof incomeGoals.$inferSelect;\nexport type InsertStockPurchase = z.infer<typeof insertStockPurchaseSchema>;\nexport type StockPurchase = typeof stockPurchases.$inferSelect;\nexport type InsertMoneyPot = z.infer<typeof insertMoneyPotSchema>;\nexport type MoneyPot = typeof moneyPots.$inferSelect;\n","size_bytes":8281},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { CurrencyProvider } from \"@/contexts/CurrencyContext\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport HourlyRateCalculator from \"@/pages/hourly-rate-calculator\";\nimport ProfitMarginCalculator from \"@/pages/profit-margin-calculator\";\nimport ExpenseTracker from \"@/pages/expense-tracker\";\nimport RevenueProjections from \"@/pages/revenue-projections\";\nimport Reports from \"@/pages/reports\";\nimport CEONumbers from \"@/pages/ceo-numbers\";\nimport MoneyPots from \"@/pages/money-pots\";\nimport StockBudgetCalculator from \"@/pages/stock-budget-calculator\";\nimport Subscribe from \"@/pages/subscribe\";\nimport TrialDemo from \"@/pages/trial-demo\";\nimport Help from \"@/pages/help\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport ForgotPassword from \"@/pages/forgot-password\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport Privacy from \"@/pages/privacy\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, hasAccess } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/subscribe\" component={Subscribe} />\n        <Route path=\"/trial-demo\" component={TrialDemo} />\n        <Route path=\"/privacy\" component={Privacy} />\n        <Route path=\"/admin\" component={AdminLogin} />\n        <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n        <Route path=\"/\" component={Landing} />\n        <Route component={Landing} />\n      </Switch>\n    );\n  }\n\n  // If authenticated but no subscription access, show subscribe page\n  if (!hasAccess) {\n    return (\n      <div className=\"min-h-screen flex bg-slate-50\">\n        <Sidebar />\n        <div className=\"flex-1 flex flex-col\">\n          <Switch>\n            <Route path=\"/subscribe\" component={Subscribe} />\n            <Route path=\"/help\" component={Help} />\n            <Route component={Subscribe} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-slate-50\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/hourly-rate\" component={HourlyRateCalculator} />\n          <Route path=\"/profit-margin\" component={ProfitMarginCalculator} />\n          <Route path=\"/expenses\" component={ExpenseTracker} />\n          <Route path=\"/stock-budget\" component={StockBudgetCalculator} />\n          <Route path=\"/revenue\" component={RevenueProjections} />\n          <Route path=\"/ceo-numbers\" component={CEONumbers} />\n          <Route path=\"/money-pots\" component={MoneyPots} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n          <Route path=\"/help\" component={Help} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <CurrencyProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </CurrencyProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4139},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 348 100% 97%; /* #ffeef4 */\n  --foreground: 0 0% 0%; /* black */\n  --muted: 348 100% 95%;\n  --muted-foreground: 0 0% 40%;\n  --popover: 0 0% 100%; /* white */\n  --popover-foreground: 0 0% 0%; /* black */\n  --card: 0 0% 100%; /* white */\n  --card-foreground: 0 0% 0%; /* black */\n  --border: 348 30% 85%;\n  --input: 348 30% 90%;\n  --primary: 348 100% 78%; /* #ff8f9f */\n  --primary-foreground: 0 0% 0%; /* black */\n  --secondary: 0 0% 95%;\n  --secondary-foreground: 0 0% 0%; /* black */\n  --accent: 348 100% 97%; /* #ffeef4 */\n  --accent-foreground: 0 0% 0%; /* black */\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --success: 348 100% 78%; /* #ff8f9f */\n  --warning: 35 100% 50%;\n  --error: 0 74% 50%;\n  --ring: 348 100% 78%; /* #ff8f9f */\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: 0 0% 0%; /* black */\n  --foreground: 0 0% 100%; /* white */\n  --muted: 0 0% 10%;\n  --muted-foreground: 0 0% 70%;\n  --popover: 0 0% 5%;\n  --popover-foreground: 0 0% 100%; /* white */\n  --card: 0 0% 5%;\n  --card-foreground: 0 0% 100%; /* white */\n  --border: 0 0% 20%;\n  --input: 0 0% 15%;\n  --primary: 348 100% 78%; /* #ff8f9f */\n  --primary-foreground: 0 0% 0%; /* black */\n  --secondary: 0 0% 15%;\n  --secondary-foreground: 0 0% 100%; /* white */\n  --accent: 348 100% 78%; /* #ff8f9f */\n  --accent-foreground: 0 0% 0%; /* black */\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: 348 100% 78%; /* #ff8f9f */\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-success {\n    color: hsl(var(--success));\n  }\n  \n  .text-warning {\n    color: hsl(var(--warning));\n  }\n  \n  .text-error {\n    color: hsl(var(--error));\n  }\n  \n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n  \n  .bg-warning {\n    background-color: hsl(var(--warning));\n  }\n  \n  .bg-error {\n    background-color: hsl(var(--error));\n  }\n  \n  .border-success {\n    border-color: hsl(var(--success));\n  }\n  \n  .border-warning {\n    border-color: hsl(var(--warning));\n  }\n  \n  .border-error {\n    border-color: hsl(var(--error));\n  }\n}\n","size_bytes":2342},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/currency-selector.tsx":{"content":"import { Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useCurrency, CURRENCIES } from \"@/contexts/CurrencyContext\";\n\nexport default function CurrencySelector() {\n  const { currency, setCurrency } = useCurrency();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n          <Globe className=\"h-4 w-4\" />\n          {currency.symbol} {currency.code}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        {CURRENCIES.map((curr) => (\n          <DropdownMenuItem\n            key={curr.code}\n            onClick={() => setCurrency(curr)}\n            className={currency.code === curr.code ? \"bg-accent\" : \"\"}\n          >\n            <div className=\"flex justify-between w-full\">\n              <span>{curr.name}</span>\n              <span className=\"text-muted-foreground\">{curr.symbol} {curr.code}</span>\n            </div>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1224},"client/src/components/header.tsx":{"content":"import CurrencySelector from \"@/components/currency-selector\";\n\ninterface HeaderProps {\n  title: string;\n  description: string;\n}\n\nexport default function Header({ title, description }: HeaderProps) {\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200 px-8 py-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-800\">{title}</h2>\n          <p className=\"text-slate-600 mt-1\">{description}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <CurrencySelector />\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":648},"client/src/components/paywall.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Lock, CreditCard, Zap, Crown } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface PaywallProps {\n  title: string;\n  description: string;\n  feature: string;\n}\n\nexport default function Paywall({ title, description, feature }: PaywallProps) {\n  return (\n    <div className=\"flex-1 flex items-center justify-center p-8\">\n      <Card className=\"max-w-md mx-auto text-center\">\n        <CardHeader>\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-primary/10\">\n            <Lock className=\"h-6 w-6 text-primary\" />\n          </div>\n          <CardTitle className=\"text-xl text-slate-800\">{title}</CardTitle>\n          <p className=\"text-slate-600 text-sm\">{description}</p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-slate-50 dark:bg-slate-800 rounded-lg p-4\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Crown className=\"h-5 w-5 text-primary mr-2\" />\n              <span className=\"font-semibold text-slate-800\">Pro Feature Required</span>\n            </div>\n            <p className=\"text-sm text-slate-600\">\n              Access to {feature} requires a Pro subscription\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center text-sm text-slate-600\">\n              <Zap className=\"h-4 w-4 text-green-500 mr-2\" />\n              Unlimited calculations & tracking\n            </div>\n            <div className=\"flex items-center text-sm text-slate-600\">\n              <Zap className=\"h-4 w-4 text-green-500 mr-2\" />\n              Advanced business analytics\n            </div>\n            <div className=\"flex items-center text-sm text-slate-600\">\n              <Zap className=\"h-4 w-4 text-green-500 mr-2\" />\n              Priority support & updates\n            </div>\n          </div>\n\n          <div className=\"pt-4\">\n            <Link href=\"/subscribe\">\n              <Button className=\"w-full\" size=\"lg\">\n                <CreditCard className=\"h-4 w-4 mr-2\" />\n                Subscribe for £23.97/month\n              </Button>\n            </Link>\n            <p className=\"text-xs text-slate-500 mt-2\">\n              Cancel anytime • Instant access\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2503},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Calculator, Home, Clock, Percent, Receipt, TrendingUp, FileText, DollarSign, Crown, Package, LogOut, HelpCircle, Palette } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport logoPath from \"@assets/KatieGodfrey-Logo_Black.png\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Hourly Rate Calculator\", href: \"/hourly-rate\", icon: Clock },\n  { name: \"Profit Margin Calculator\", href: \"/profit-margin\", icon: Percent },\n  { name: \"Expense Tracker\", href: \"/expenses\", icon: Receipt },\n  { name: \"Stock Budget Calculator\", href: \"/stock-budget\", icon: Package },\n  { name: \"Revenue Projections\", href: \"/revenue\", icon: TrendingUp },\n  { name: \"CEO Numbers\", href: \"/ceo-numbers\", icon: DollarSign },\n  { name: \"Money Pots\", href: \"/money-pots\", icon: Palette },\n  { name: \"Reports & Export\", href: \"/reports\", icon: FileText },\n  { name: \"Subscribe Pro\", href: \"/subscribe\", icon: Crown, isPro: true },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-r border-slate-200 flex flex-col\">\n      <div className=\"p-6 border-b border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-10 bg-white rounded-lg flex items-center justify-center p-1\">\n            <img src={logoPath} alt=\"Katie Godfrey Logo\" className=\"w-full h-full object-contain\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-slate-800\">Salon Success</h1>\n            <p className=\"text-sm text-slate-500\">Manager</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.name}>\n                <Link\n                  href={item.href}\n                  className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors\",\n                    item.isPro\n                      ? \"text-primary bg-gradient-to-r from-pink-50 to-pink-100 hover:from-pink-100 hover:to-pink-200 border border-primary/20\"\n                      : isActive\n                      ? \"text-primary bg-blue-50\"\n                      : \"text-slate-600 hover:text-primary hover:bg-slate-50\"\n                  )}\n                >\n                  <Icon className={cn(\"h-5 w-5\", item.isPro && \"text-primary\")} />\n                  <span className={cn(item.isPro && \"font-semibold\")}>{item.name}</span>\n                  {item.isPro && (\n                    <span className=\"ml-auto text-xs bg-primary text-white px-2 py-1 rounded-full\">\n                      £23.97/mo\n                    </span>\n                  )}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      {/* Help and Logout Section */}\n      <div className=\"p-4 border-t border-slate-200 space-y-2\">\n        <Link\n          href=\"/help\"\n          className=\"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors text-slate-600 hover:text-primary hover:bg-slate-50\"\n        >\n          <HelpCircle className=\"h-5 w-5\" />\n          <span>Help & Support</span>\n        </Link>\n        \n        <button\n          onClick={async () => {\n            try {\n              await fetch('/api/auth/logout', { method: 'POST' });\n              window.location.href = '/login';\n            } catch (error) {\n              window.location.href = '/login';\n            }\n          }}\n          className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors text-slate-600 hover:text-red-600 hover:bg-red-50\"\n        >\n          <LogOut className=\"h-5 w-5\" />\n          <span>Sign Out</span>\n        </button>\n      </div>\n      \n      <div className=\"p-4 border-t border-slate-200\">\n        <div className=\"flex items-center space-x-3 px-4 py-3\">\n          <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center\">\n            <span className=\"text-slate-600 text-sm font-medium\">KG</span>\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-slate-800\">Katie Godfrey</p>\n            <p className=\"text-xs text-slate-500\">Business Strategist</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4604},"client/src/contexts/CurrencyContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface Currency {\n  code: string;\n  symbol: string;\n  name: string;\n  locale: string;\n}\n\nexport const CURRENCIES: Currency[] = [\n  { code: 'GBP', symbol: '£', name: 'British Pound', locale: 'en-GB' },\n  { code: 'USD', symbol: '$', name: 'US Dollar', locale: 'en-US' },\n  { code: 'EUR', symbol: '€', name: 'Euro', locale: 'en-EU' },\n  { code: 'AED', symbol: 'د.إ', name: 'UAE Dirham', locale: 'ar-AE' },\n  { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar', locale: 'en-CA' },\n  { code: 'AUD', symbol: 'A$', name: 'Australian Dollar', locale: 'en-AU' },\n  { code: 'JPY', symbol: '¥', name: 'Japanese Yen', locale: 'ja-JP' },\n  { code: 'CHF', symbol: 'CHF', name: 'Swiss Franc', locale: 'de-CH' },\n  { code: 'SEK', symbol: 'kr', name: 'Swedish Krona', locale: 'sv-SE' },\n  { code: 'DKK', symbol: 'kr', name: 'Danish Krone', locale: 'da-DK' },\n  { code: 'NOK', symbol: 'kr', name: 'Norwegian Krone', locale: 'nb-NO' },\n];\n\ninterface CurrencyContextType {\n  currency: Currency;\n  setCurrency: (currency: Currency) => void;\n  formatCurrency: (amount: number | string) => string;\n}\n\nconst CurrencyContext = createContext<CurrencyContextType | undefined>(undefined);\n\nexport function CurrencyProvider({ children }: { children: ReactNode }) {\n  const [currency, setCurrencyState] = useState<Currency>(CURRENCIES[0]); // Default to GBP\n\n  // Load saved currency from localStorage on mount\n  useEffect(() => {\n    const savedCurrency = localStorage.getItem('selectedCurrency');\n    if (savedCurrency) {\n      const found = CURRENCIES.find(c => c.code === savedCurrency);\n      if (found) {\n        setCurrencyState(found);\n      }\n    }\n  }, []);\n\n  const setCurrency = (newCurrency: Currency) => {\n    setCurrencyState(newCurrency);\n    localStorage.setItem('selectedCurrency', newCurrency.code);\n  };\n\n  const formatCurrency = (amount: number | string): string => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat(currency.locale, {\n      style: 'currency',\n      currency: currency.code,\n    }).format(numAmount);\n  };\n\n  return (\n    <CurrencyContext.Provider value={{ currency, setCurrency, formatCurrency }}>\n      {children}\n    </CurrencyContext.Provider>\n  );\n}\n\nexport function useCurrency() {\n  const context = useContext(CurrencyContext);\n  if (context === undefined) {\n    throw new Error('useCurrency must be used within a CurrencyProvider');\n  }\n  return context;\n}","size_bytes":2530},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ntype User = {\n  id: number;\n  email: string;\n  name: string;\n  businessType: string;\n  subscriptionStatus: 'trial' | 'active' | 'free_access' | 'cancelled';\n  subscriptionEndDate: string | null;\n};\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/v2/auth/user\"],\n    retry: false,\n  });\n\n  const hasAccess = user && (\n    user.subscriptionStatus === 'active' || \n    (user.subscriptionStatus === 'free_access' && user.subscriptionEndDate && new Date() <= new Date(user.subscriptionEndDate))\n  );\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    hasAccess: !!hasAccess,\n  };\n}","size_bytes":701},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    // Handle query parameters if additional items in queryKey\n    if (queryKey.length > 1 && queryKey[1] !== undefined) {\n      const searchParams = new URLSearchParams();\n      \n      // Handle different parameter types based on the endpoint\n      if (url.includes('/income-goals')) {\n        searchParams.append('businessId', queryKey[1] as string);\n      } else if (url.includes('/money-pots')) {\n        searchParams.append('businessId', queryKey[1] as string);\n      }\n      \n      url += `?${searchParams.toString()}`;\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1937},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number | string, locale = 'en-GB', currency = 'GBP'): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency,\n  }).format(numAmount);\n}\n\nexport function formatPercentage(value: number | string): string {\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  return `${numValue.toFixed(1)}%`;\n}\n\nexport function calculateHourlyRate(\n  monthlyExpenses: number,\n  desiredProfit: number,\n  weeklyHours: number,\n  taxRate: number,\n  staffCount: number = 0\n): {\n  hourlyRate: number;\n  staffTargetPerPerson: number | null;\n} {\n  const monthlyHours = weeklyHours * 4.33; // Average weeks per month\n  const totalNeeded = monthlyExpenses * (1 + desiredProfit / 100);\n  const beforeTax = totalNeeded / (1 - taxRate / 100);\n  const hourlyRate = beforeTax / monthlyHours;\n  \n  let staffTargetPerPerson = null;\n  if (staffCount > 0) {\n    // Each staff member needs to generate enough to cover their portion plus profit\n    staffTargetPerPerson = beforeTax / staffCount;\n  }\n  \n  return {\n    hourlyRate,\n    staffTargetPerPerson\n  };\n}\n\nexport function calculateTreatmentProfit(\n  price: number,\n  productCost: number,\n  overheadCost: number\n): {\n  totalCosts: number;\n  netProfit: number;\n  profitMargin: number;\n} {\n  const totalCosts = productCost + overheadCost;\n  const netProfit = price - totalCosts;\n  const profitMargin = price > 0 ? (netProfit / price) * 100 : 0;\n  \n  return {\n    totalCosts,\n    netProfit,\n    profitMargin\n  };\n}\n","size_bytes":1777},"client/src/pages/ceo-numbers-broken.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format, startOfWeek, addDays, isSameWeek, parseISO, addWeeks, subWeeks } from \"date-fns\";\nimport { CalendarDays, Plus, Target, TrendingUp, DollarSign, PiggyBank, Building2, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport type { Business, WeeklyIncome, IncomeGoal } from \"@shared/schema\";\n\nconst businessSchema = z.object({\n  name: z.string().min(1, \"Business name is required\"),\n  location: z.string().optional(),\n});\n\nconst weeklyIncomeSchema = z.object({\n  businessId: z.number(),\n  weekStartDate: z.string(),\n  weeklyTotal: z.string().default(\"0\"),\n});\n\nconst incomeGoalSchema = z.object({\n  businessId: z.number().optional(),\n  goalType: z.enum([\"weekly\", \"monthly\", \"yearly\"]),\n  targetAmount: z.string().min(1, \"Target amount is required\"),\n  year: z.number(),\n  month: z.number().optional(),\n});\n\ntype BusinessForm = z.infer<typeof businessSchema>;\ntype WeeklyIncomeForm = z.infer<typeof weeklyIncomeSchema>;\ntype IncomeGoalForm = z.infer<typeof incomeGoalSchema>;\n\nexport default function CEONumbers() {\n  const [selectedBusiness, setSelectedBusiness] = useState<number | \"all\">(\"all\");\n  const [currentWeek, setCurrentWeek] = useState(startOfWeek(new Date(), { weekStartsOn: 1 }));\n  const [showBusinessDialog, setShowBusinessDialog] = useState(false);\n  const [showGoalDialog, setShowGoalDialog] = useState(false);\n\n  // Queries\n  const { data: businesses = [] } = useQuery<Business[]>({\n    queryKey: [\"/api/businesses\"],\n  });\n\n  const { data: weeklyIncomes = [] } = useQuery<WeeklyIncome[]>({\n    queryKey: [\"/api/weekly-incomes\", selectedBusiness !== \"all\" ? selectedBusiness : undefined],\n  });\n\n  const { data: incomeGoals = [] } = useQuery<IncomeGoal[]>({\n    queryKey: [\"/api/income-goals\", selectedBusiness !== \"all\" ? selectedBusiness : undefined],\n  });\n\n  // Forms\n  const businessForm = useForm<BusinessForm>({\n    resolver: zodResolver(businessSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n    },\n  });\n\n  const incomeGoalForm = useForm<IncomeGoalForm>({\n    resolver: zodResolver(incomeGoalSchema),\n    defaultValues: {\n      goalType: \"weekly\",\n      targetAmount: \"\",\n      year: new Date().getFullYear(),\n    },\n  });\n\n  // Mutations\n  const createBusinessMutation = useMutation({\n    mutationFn: (data: BusinessForm) => apiRequest(\"POST\", \"/api/businesses\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/businesses\"] });\n      setShowBusinessDialog(false);\n      businessForm.reset();\n    },\n  });\n\n  const createIncomeGoalMutation = useMutation({\n    mutationFn: (data: IncomeGoalForm) => apiRequest(\"POST\", \"/api/income-goals\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income-goals\"] });\n      setShowGoalDialog(false);\n      incomeGoalForm.reset();\n    },\n  });\n\n  const saveWeeklyIncomeMutation = useMutation({\n    mutationFn: (data: WeeklyIncomeForm) => apiRequest(\"POST\", \"/api/weekly-incomes\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-incomes\"] });\n    },\n  });\n\n  // Get current week's income for selected business\n  const getCurrentWeekIncome = (businessId: number): WeeklyIncome | undefined => {\n    return weeklyIncomes.find(income => \n      income.businessId === businessId && \n      isSameWeek(new Date(income.weekStartDate), currentWeek, { weekStartsOn: 1 })\n    );\n  };\n\n  // Calculate totals\n  const calculateTotals = () => {\n    const filteredIncomes = selectedBusiness === \"all\" \n      ? weeklyIncomes \n      : weeklyIncomes.filter(income => income.businessId === selectedBusiness);\n\n    const weekTotal = filteredIncomes\n      .filter(income => isSameWeek(new Date(income.weekStartDate), currentWeek, { weekStartsOn: 1 }))\n      .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n\n    const monthTotal = filteredIncomes\n      .filter(income => {\n        const incomeDate = new Date(income.weekStartDate);\n        return incomeDate.getMonth() === currentWeek.getMonth() && \n               incomeDate.getFullYear() === currentWeek.getFullYear();\n      })\n      .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n\n    const yearTotal = filteredIncomes\n      .filter(income => new Date(income.weekStartDate).getFullYear() === currentWeek.getFullYear())\n      .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n\n    return { weekTotal, monthTotal, yearTotal };\n  };\n\n  // Save weekly income\n  const saveWeeklyIncome = (businessId: number, amount: string) => {\n    const weekStartDate = format(currentWeek, \"yyyy-MM-dd\");\n\n    const incomeData = {\n      businessId,\n      weekStartDate,\n      weeklyTotal: amount,\n    };\n\n    saveWeeklyIncomeMutation.mutate(incomeData);\n  };\n\n  const { weekTotal, monthTotal, yearTotal } = calculateTotals();\n  const vatAmount = weekTotal * 0.20;\n  const profitAmount = weekTotal * 0.05;\n  const availableAmount = weekTotal - vatAmount - profitAmount;\n\n\n\n  return (\n    <div className=\"space-y-6\">\n      <Header \n        title=\"CEO Numbers\" \n        description=\"Track your weekly income, monitor money pots, and manage multiple business locations\"\n      />\n\n      {/* Business Selection & Controls */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"business-select\">Business:</Label>\n            <Select value={selectedBusiness.toString()} onValueChange={(value) => setSelectedBusiness(value === \"all\" ? \"all\" : parseInt(value))}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Businesses</SelectItem>\n                {businesses.map((business) => (\n                  <SelectItem key={business.id} value={business.id.toString()}>\n                    {business.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Dialog open={showBusinessDialog} onOpenChange={setShowBusinessDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Business\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Business</DialogTitle>\n                <DialogDescription>\n                  Create a new business location to track separately\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...businessForm}>\n                <form onSubmit={businessForm.handleSubmit((data) => createBusinessMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={businessForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Business Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Main Salon\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={businessForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., City Center\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button type=\"submit\" disabled={createBusinessMutation.isPending}>\n                    {createBusinessMutation.isPending ? \"Creating...\" : \"Create Business\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Week Navigation */}\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentWeek(subWeeks(currentWeek, 1))}>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <span className=\"text-sm font-medium px-3\">\n            Week of {format(currentWeek, \"MMM d, yyyy\")}\n          </span>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentWeek(addWeeks(currentWeek, 1))}>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentWeek(startOfWeek(new Date(), { weekStartsOn: 1 }))}>\n            Today\n          </Button>\n        </div>\n      </div>\n\n      {/* Money Pots Overview */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Week Total</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(weekTotal)}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">VAT/Tax Pot (20%)</CardTitle>\n            <PiggyBank className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{formatCurrency(vatAmount)}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Profit Pot (5%)</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(profitAmount)}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available (75%)</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{formatCurrency(availableAmount)}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Weekly Income Grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Weekly Income Entry</CardTitle>\n          <CardDescription>\n            Enter your daily takings for each business. Money pots are calculated automatically.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {businesses.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Building2 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No businesses found. Add your first business to get started.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {(selectedBusiness === \"all\" ? businesses : businesses.filter(b => b.id === selectedBusiness)).map((business) => {\n                const weekIncome = getCurrentWeekIncome(business.id);\n                const currentAmount = weekIncome?.weeklyTotal || \"0\";\n                \n                return (\n                  <div key={business.id} className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">{business.name}</h3>\n                      {business.location && (\n                        <Badge variant=\"secondary\">{business.location}</Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <Label htmlFor={`weekly-${business.id}`}>\n                        Weekly Total for {format(currentWeek, \"MMM d\")} - {format(addDays(currentWeek, 6), \"MMM d, yyyy\")}\n                      </Label>\n                      <div className=\"flex gap-2 items-center\">\n                        <span className=\"text-sm text-muted-foreground\">£</span>\n                        <Input\n                          id={`weekly-${business.id}`}\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          value={currentAmount}\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            saveWeeklyIncome(business.id, value);\n                          }}\n                          className=\"flex-1 text-lg font-medium\"\n                        />\n                      </div>\n                      \n                      {weekIncome && parseFloat(weekIncome.weeklyTotal) > 0 && (\n                        <div className=\"bg-slate-50 p-4 rounded-lg space-y-2\">\n                          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                            <div className=\"text-center\">\n                              <div className=\"text-orange-600 font-semibold\">VAT/Tax (20%)</div>\n                              <div className=\"text-lg\">{formatCurrency(parseFloat(weekIncome.vatAmount))}</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"text-green-600 font-semibold\">Profit (5%)</div>\n                              <div className=\"text-lg\">{formatCurrency(parseFloat(weekIncome.profitAmount))}</div>\n                            </div>\n                            <div className=\"text-center\">\n                              <div className=\"text-blue-600 font-semibold\">Available (75%)</div>\n                              <div className=\"text-lg\">{formatCurrency(parseFloat(weekIncome.weeklyTotal) * 0.75)}</div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {selectedBusiness !== \"all\" && businesses.indexOf(business) < businesses.length - 1 && (\n                      <Separator />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Historical View & Summary */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Income Summary</CardTitle>\n            <CardDescription>Track your growth over time</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span>This Week:</span>\n              <span className=\"font-bold\">{formatCurrency(weekTotal)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>This Month:</span>\n              <span className=\"font-bold\">{formatCurrency(monthTotal)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>This Year:</span>\n              <span className=\"font-bold\">{formatCurrency(yearTotal)}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Weeks</CardTitle>\n            <CardDescription>Quick view of past performance</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {weeklyIncomes.length === 0 ? (\n              <p className=\"text-muted-foreground text-sm\">No historical data yet</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {weeklyIncomes\n                  .filter(income => selectedBusiness === \"all\" || income.businessId === selectedBusiness)\n                  .slice(0, 4)\n                  .map((income) => {\n                    const business = businesses.find(b => b.id === income.businessId);\n                    const weekStart = new Date(income.weekStartDate);\n                    const weekEnd = addDays(weekStart, 6);\n                    \n                    return (\n                      <div key={income.id} className=\"flex justify-between items-center py-2 border-b last:border-b-0\">\n                        <div>\n                          <div className=\"text-sm font-medium\">\n                            {format(weekStart, \"MMM d\")} - {format(weekEnd, \"MMM d\")}\n                          </div>\n                          {selectedBusiness === \"all\" && business && (\n                            <div className=\"text-xs text-muted-foreground\">{business.name}</div>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">{formatCurrency(parseFloat(income.weeklyTotal))}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Tax: {formatCurrency(parseFloat(income.vatAmount))} | \n                            Profit: {formatCurrency(parseFloat(income.profitAmount))}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Historical Table */}\n      {weeklyIncomes.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Historical Performance</CardTitle>\n            <CardDescription>Complete view of all weekly takings and money pots</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-2\">Week</th>\n                    {selectedBusiness === \"all\" && <th className=\"text-left py-2\">Business</th>}\n                    <th className=\"text-right py-2\">Total</th>\n                    <th className=\"text-right py-2\">VAT/Tax (20%)</th>\n                    <th className=\"text-right py-2\">Profit (5%)</th>\n                    <th className=\"text-right py-2\">Available (75%)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {weeklyIncomes\n                    .filter(income => selectedBusiness === \"all\" || income.businessId === selectedBusiness)\n                    .slice(0, 10)\n                    .map((income) => {\n                      const business = businesses.find(b => b.id === income.businessId);\n                      const weekStart = new Date(income.weekStartDate);\n                      const weekEnd = addDays(weekStart, 6);\n                      const total = parseFloat(income.weeklyTotal);\n                      const available = total * 0.75;\n                      \n                      return (\n                        <tr key={income.id} className=\"border-b hover:bg-slate-50\">\n                          <td className=\"py-2\">\n                            {format(weekStart, \"MMM d\")} - {format(weekEnd, \"MMM d, yyyy\")}\n                          </td>\n                          {selectedBusiness === \"all\" && (\n                            <td className=\"py-2\">{business?.name || \"Unknown\"}</td>\n                          )}\n                          <td className=\"text-right py-2 font-medium\">\n                            {formatCurrency(total)}\n                          </td>\n                          <td className=\"text-right py-2 text-orange-600\">\n                            {formatCurrency(parseFloat(income.vatAmount))}\n                          </td>\n                          <td className=\"text-right py-2 text-green-600\">\n                            {formatCurrency(parseFloat(income.profitAmount))}\n                          </td>\n                          <td className=\"text-right py-2 text-blue-600\">\n                            {formatCurrency(available)}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Income Goals */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n          <div>\n            <CardTitle>Income Goals</CardTitle>\n            <CardDescription>Set and track your targets</CardDescription>\n          </div>\n          <Dialog open={showGoalDialog} onOpenChange={setShowGoalDialog}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\">\n                  <Target className=\"h-4 w-4 mr-2\" />\n                  Add Goal\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Set Income Goal</DialogTitle>\n                  <DialogDescription>\n                    Set targets for your business growth\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...incomeGoalForm}>\n                  <form onSubmit={incomeGoalForm.handleSubmit((data) => createIncomeGoalMutation.mutate(data))} className=\"space-y-4\">\n                    <FormField\n                      control={incomeGoalForm.control}\n                      name=\"businessId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Business (Optional)</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"All businesses\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"\">All Businesses</SelectItem>\n                              {businesses.map((business) => (\n                                <SelectItem key={business.id} value={business.id.toString()}>\n                                  {business.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={incomeGoalForm.control}\n                      name=\"goalType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Goal Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"weekly\">Weekly</SelectItem>\n                              <SelectItem value=\"monthly\">Monthly</SelectItem>\n                              <SelectItem value=\"yearly\">Yearly</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={incomeGoalForm.control}\n                      name=\"targetAmount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Target Amount</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"5000.00\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button type=\"submit\" disabled={createIncomeGoalMutation.isPending}>\n                      {createIncomeGoalMutation.isPending ? \"Creating...\" : \"Create Goal\"}\n                    </Button>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </CardHeader>\n          <CardContent>\n            {incomeGoals.length === 0 ? (\n              <p className=\"text-muted-foreground text-sm\">No goals set yet</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {incomeGoals.slice(0, 3).map((goal) => {\n                  const currentAmount = goal.goalType === \"weekly\" ? weekTotal :\n                                      goal.goalType === \"monthly\" ? monthTotal : yearTotal;\n                  const progress = (currentAmount / parseFloat(goal.targetAmount)) * 100;\n                  \n                  return (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>{goal.goalType} goal</span>\n                        <span>{Math.round(progress)}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full transition-all\" \n                          style={{ width: `${Math.min(progress, 100)}%` }}\n                        />\n                      </div>\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>{formatCurrency(currentAmount)}</span>\n                        <span>{formatCurrency(parseFloat(goal.targetAmount))}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":27689},"client/src/pages/ceo-numbers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format, startOfWeek, addDays, isSameWeek, parseISO, addWeeks, subWeeks, startOfMonth, endOfMonth, getMonth, getYear, isSameMonth, subYears } from \"date-fns\";\nimport { CalendarDays, Plus, Target, TrendingUp, DollarSign, PiggyBank, Building2, ChevronLeft, ChevronRight, Calendar, ArrowUpDown } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport Header from \"@/components/header\";\nimport Paywall from \"@/components/paywall\";\nimport type { Business, WeeklyIncome, IncomeGoal, MoneyPot } from \"@shared/schema\";\nimport { insertBusinessSchema } from \"@shared/schema\";\n\nconst weeklyIncomeSchema = z.object({\n  businessId: z.number(),\n  weekStartDate: z.string(),\n  weeklyTotal: z.string().default(\"0\"),\n});\n\nconst incomeGoalSchema = z.object({\n  businessId: z.number(),\n  goalType: z.enum([\"weekly\", \"monthly\", \"yearly\"]),\n  targetAmount: z.string().min(1, \"Target amount is required\"),\n  year: z.number(),\n  month: z.number().optional(),\n});\n\ntype BusinessForm = { name: string; location?: string };\ntype WeeklyIncomeForm = z.infer<typeof weeklyIncomeSchema>;\ntype IncomeGoalForm = z.infer<typeof incomeGoalSchema>;\n\nexport default function CEONumbers() {\n  const { formatCurrency } = useCurrency();\n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  const [selectedBusiness, setSelectedBusiness] = useState<number | \"all\">(\"all\");\n  const [currentWeek, setCurrentWeek] = useState(startOfWeek(new Date(), { weekStartsOn: 1 }));\n  const [showBusinessDialog, setShowBusinessDialog] = useState(false);\n  const [showGoalDialog, setShowGoalDialog] = useState(false);\n  const [viewMode, setViewMode] = useState<\"current\" | \"comparison\">(\"current\");\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [comparisonYear, setComparisonYear] = useState(new Date().getFullYear() - 1);\n\n  // Data fetching\n  const { data: businesses = [] } = useQuery<Business[]>({\n    queryKey: [\"/api/businesses\"],\n  });\n\n  const { data: weeklyIncomes = [] } = useQuery<WeeklyIncome[]>({\n    queryKey: [\"/api/weekly-incomes\"],\n  });\n\n  const { data: incomeGoals = [] } = useQuery<IncomeGoal[]>({\n    queryKey: [\"/api/income-goals\"],\n  });\n\n  const { data: moneyPots = [] } = useQuery<MoneyPot[]>({\n    queryKey: [\"/api/money-pots\"],\n  });\n\n  // Mutations\n  const createBusinessMutation = useMutation({\n    mutationFn: (data: BusinessForm) => apiRequest(\"POST\", \"/api/businesses\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/businesses\"] });\n      setShowBusinessDialog(false);\n      businessForm.reset();\n    },\n  });\n\n  const createIncomeGoalMutation = useMutation({\n    mutationFn: (data: IncomeGoalForm) => apiRequest(\"POST\", \"/api/income-goals\", data),\n    onSuccess: () => {\n      // Invalidate all income goal queries (both filtered and unfiltered)\n      queryClient.invalidateQueries({ queryKey: [\"/api/income-goals\"] });\n      setShowGoalDialog(false);\n      goalForm.reset({\n        businessId: businesses.length > 0 ? businesses[0].id : undefined,\n        goalType: \"weekly\",\n        targetAmount: \"\",\n        year: new Date().getFullYear(),\n        month: new Date().getMonth() + 1,\n      });\n    },\n  });\n\n  const createOrUpdateWeeklyIncomeMutation = useMutation({\n    mutationFn: (data: WeeklyIncomeForm) => apiRequest(\"POST\", \"/api/weekly-incomes\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-incomes\"] });\n    },\n  });\n\n  // Forms\n  const businessForm = useForm<BusinessForm>({\n    resolver: zodResolver(z.object({\n      name: z.string().min(1, \"Business name is required\"),\n      location: z.string().optional(),\n    })),\n    defaultValues: { name: \"\", location: \"\" },\n  });\n\n  const goalForm = useForm<IncomeGoalForm>({\n    resolver: zodResolver(incomeGoalSchema),\n    defaultValues: {\n      businessId: businesses.length > 0 ? businesses[0].id : undefined,\n      goalType: \"weekly\",\n      targetAmount: \"\",\n      year: new Date().getFullYear(),\n      month: new Date().getMonth() + 1,\n    },\n  });\n\n  // Helper functions for calculations\n  const getMonthlyTotals = (incomes: WeeklyIncome[], year: number) => {\n    const monthlyTotals: { [key: number]: number } = {};\n    \n    incomes\n      .filter(income => {\n        const incomeDate = new Date(income.weekStartDate);\n        return getYear(incomeDate) === year;\n      })\n      .forEach(income => {\n        const month = getMonth(new Date(income.weekStartDate));\n        monthlyTotals[month] = (monthlyTotals[month] || 0) + parseFloat(income.weeklyTotal);\n      });\n    \n    return monthlyTotals;\n  };\n\n  const getIncomesByMonthYear = (incomes: WeeklyIncome[], month: number, year: number) => {\n    return incomes.filter(income => {\n      const incomeDate = new Date(income.weekStartDate);\n      return getMonth(incomeDate) === month && getYear(incomeDate) === year;\n    });\n  };\n\n  // Calculations\n  const filteredIncomes = weeklyIncomes.filter(income => \n    selectedBusiness === \"all\" || income.businessId === selectedBusiness\n  );\n\n  const currentWeekIncome = filteredIncomes.find(income => \n    isSameWeek(new Date(income.weekStartDate), currentWeek, { weekStartsOn: 1 })\n  );\n\n  const weekTotal = currentWeekIncome ? parseFloat(currentWeekIncome.weeklyTotal) : 0;\n  \n  // Calculate money pot allocations\n  const potAllocations = moneyPots.map(pot => ({\n    ...pot,\n    amount: (weekTotal * parseFloat((pot.percentage || 0).toString())) / 100\n  }));\n  \n  // Calculate remaining amount after all pot allocations\n  const totalAllocatedPercentage = moneyPots.reduce((sum, pot) => sum + parseFloat((pot.percentage || 0).toString()), 0);\n  const remainingAmount = weekTotal * ((100 - totalAllocatedPercentage) / 100);\n\n  const currentMonth = new Date();\n  const monthTotal = filteredIncomes\n    .filter(income => {\n      const incomeDate = new Date(income.weekStartDate);\n      return incomeDate.getMonth() === currentMonth.getMonth() && \n             incomeDate.getFullYear() === currentMonth.getFullYear();\n    })\n    .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n\n  const yearTotal = filteredIncomes\n    .filter(income => {\n      const incomeDate = new Date(income.weekStartDate);\n      return incomeDate.getFullYear() === currentMonth.getFullYear();\n    })\n    .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n\n  // Monthly totals for current and comparison years\n  const currentYearMonthlyTotals = getMonthlyTotals(filteredIncomes, selectedYear);\n  const comparisonYearMonthlyTotals = getMonthlyTotals(filteredIncomes, comparisonYear);\n\n  // Available years for comparison\n  const yearSet = new Set<number>();\n  weeklyIncomes.forEach(income => {\n    yearSet.add(getYear(new Date(income.weekStartDate)));\n  });\n  const availableYears = Array.from(yearSet).sort((a, b) => b - a);\n\n  // Handlers\n  const handleWeeklyIncomeSubmit = (businessId: number, value: string) => {\n    if (!value.trim()) return;\n    \n    createOrUpdateWeeklyIncomeMutation.mutate({\n      businessId,\n      weekStartDate: format(currentWeek, \"yyyy-MM-dd\"),\n      weeklyTotal: value,\n    });\n  };\n\n  const handleBusinessSubmit = (data: BusinessForm) => {\n    createBusinessMutation.mutate(data);\n  };\n\n  const handleGoalSubmit = (data: IncomeGoalForm) => {\n    createIncomeGoalMutation.mutate(data);\n  };\n\n  // Auto-save current business when switching\n  useEffect(() => {\n    if (businesses.length === 1 && selectedBusiness === \"all\") {\n      setSelectedBusiness(businesses[0].id);\n    }\n  }, [businesses, selectedBusiness]);\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"CEO Numbers & Money Pots\" \n          description=\"Track weekly income and financial goals across your businesses\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!(subscriptionStatus as any)?.active) {\n    return (\n      <>\n        <Header \n          title=\"CEO Numbers & Money Pots\" \n          description=\"Track weekly income and financial goals across your businesses\" \n        />\n        <Paywall \n          title=\"CEO Numbers & Money Pots\"\n          description=\"Monitor your business performance\"\n          feature=\"CEO tracking and financial analytics\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Header \n        title=\"CEO Numbers\" \n        description=\"Track your weekly income, monitor money pots, and manage multiple business locations\"\n      />\n\n      {/* Business Selection & Controls */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor=\"business-select\">Business:</Label>\n            <Select value={selectedBusiness.toString()} onValueChange={(value) => setSelectedBusiness(value === \"all\" ? \"all\" : parseInt(value))}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Businesses</SelectItem>\n                {businesses.map((business) => (\n                  <SelectItem key={business.id} value={business.id.toString()}>\n                    {business.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Dialog open={showBusinessDialog} onOpenChange={setShowBusinessDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Business\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Business</DialogTitle>\n                <DialogDescription>\n                  Create a new business location to track separately\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...businessForm}>\n                <form onSubmit={businessForm.handleSubmit(handleBusinessSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={businessForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Business Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Main Salon\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={businessForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"City Center\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button type=\"submit\" disabled={createBusinessMutation.isPending}>\n                    {createBusinessMutation.isPending ? \"Creating...\" : \"Create Business\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Week Navigation */}\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentWeek(subWeeks(currentWeek, 1))}>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <span className=\"text-sm font-medium px-3\">\n            Week of {format(currentWeek, \"MMM d, yyyy\")}\n          </span>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentWeek(addWeeks(currentWeek, 1))}>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setCurrentWeek(startOfWeek(new Date(), { weekStartsOn: 1 }))}>\n            Today\n          </Button>\n        </div>\n      </div>\n\n      {/* Money Pots Overview */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Week Total</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(weekTotal)}</div>\n          </CardContent>\n        </Card>\n\n        {/* Display custom money pots */}\n        {potAllocations.map((pot) => (\n          <Card key={pot.id}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full\" \n                  style={{ backgroundColor: pot.color || \"hsl(var(--primary))\" }}\n                />\n                {pot.name} ({pot.percentage}%)\n              </CardTitle>\n              <PiggyBank className=\"h-4 w-4\" style={{ color: pot.color || \"hsl(var(--primary))\" }} />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" style={{ color: pot.color || \"hsl(var(--primary))\" }}>\n                {formatCurrency(pot.amount)}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* Show remaining amount if there's unallocated percentage */}\n        {totalAllocatedPercentage < 100 && (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Available ({(100 - totalAllocatedPercentage).toFixed(1)}%)\n              </CardTitle>\n              <Building2 className=\"h-4 w-4 text-primary\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-primary\">\n                {formatCurrency(remainingAmount)}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Show link to manage money pots if none exist */}\n        {moneyPots.length === 0 && (\n          <Card className=\"col-span-full\">\n            <CardHeader>\n              <CardTitle className=\"text-center\">No Money Pots Configured</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                Create custom money pots to allocate your income (VAT, Profit, Emergency Fund, etc.)\n              </p>\n              <Button asChild>\n                <a href=\"/money-pots\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Set Up Money Pots\n                </a>\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Weekly Income Entry - Prominent Section */}\n      <Card className=\"border-2 border-primary bg-gradient-to-r from-pink-50 to-rose-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-xl\">\n            <DollarSign className=\"h-6 w-6 text-primary\" />\n            Enter This Week's Takings\n          </CardTitle>\n          <CardDescription className=\"text-base\">\n            Week of {format(currentWeek, \"MMMM d\")} - {format(addDays(currentWeek, 6), \"MMMM d, yyyy\")}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {businesses.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground mb-4\">Create a business first to start tracking your weekly income</p>\n              <Dialog open={showBusinessDialog} onOpenChange={setShowBusinessDialog}>\n                <DialogTrigger asChild>\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your First Business\n                  </Button>\n                </DialogTrigger>\n              </Dialog>\n            </div>\n          ) : selectedBusiness === \"all\" ? (\n            <div className=\"space-y-4\">\n              {businesses.map((business) => {\n                const businessIncome = weeklyIncomes.find(income => \n                  income.businessId === business.id && \n                  isSameWeek(new Date(income.weekStartDate), currentWeek, { weekStartsOn: 1 })\n                );\n                const currentValue = businessIncome?.weeklyTotal || \"\";\n                \n                return (\n                  <div key={business.id} className=\"bg-white rounded-lg p-4 border\">\n                    <form onSubmit={(e) => {\n                      e.preventDefault();\n                      const formData = new FormData(e.target as HTMLFormElement);\n                      const amount = formData.get(`businessAmount-${business.id}`) as string;\n                      if (amount) {\n                        handleWeeklyIncomeSubmit(business.id, amount);\n                      }\n                    }}>\n                      <div className=\"flex items-center gap-4 mb-3\">\n                        <Label className=\"w-32 font-semibold text-lg\">{business.name}:</Label>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-xl font-bold text-slate-600\">£</span>\n                          <Input\n                            name={`businessAmount-${business.id}`}\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            defaultValue={currentValue}\n                            className=\"text-xl font-bold text-2xl h-12 w-48 text-center border-2\"\n                            required\n                          />\n                        </div>\n                        <Button type=\"submit\" size=\"lg\" className=\"h-12 px-6 font-semibold\">\n                          Enter\n                        </Button>\n                      </div>\n                    </form>\n                    {currentValue && (\n                      <div className=\"grid gap-2 text-sm bg-slate-50 rounded p-3\" style={{ gridTemplateColumns: `repeat(${Math.max(moneyPots.length, 1)}, 1fr)` }}>\n                        {moneyPots.length > 0 ? (\n                          <>\n                            {moneyPots.map(pot => (\n                              <div key={pot.id}>\n                                <span style={{ color: pot.color || \"hsl(var(--primary))\" }} className=\"font-medium flex items-center gap-1\">\n                                  <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: pot.color || \"hsl(var(--primary))\" }} />\n                                  {pot.name} ({pot.percentage}%):\n                                </span>\n                                <span className=\"font-bold\">\n                                  {formatCurrency((parseFloat(currentValue) * parseFloat((pot.percentage || 0).toString())) / 100)}\n                                </span>\n                              </div>\n                            ))}\n                            {totalAllocatedPercentage < 100 && (\n                              <div>\n                                <span className=\"text-primary font-medium\">Available ({(100 - totalAllocatedPercentage).toFixed(1)}%): </span>\n                                <span className=\"font-bold\">\n                                  {formatCurrency(parseFloat(currentValue) * ((100 - totalAllocatedPercentage) / 100))}\n                                </span>\n                              </div>\n                            )}\n                          </>\n                        ) : (\n                          <div className=\"text-center text-muted-foreground\">\n                            <a href=\"/money-pots\" className=\"text-primary hover:underline\">\n                              Set up money pots to see allocation breakdown\n                            </a>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"bg-white rounded-lg p-6 border text-center\">\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.target as HTMLFormElement);\n                const amount = formData.get('weeklyAmount') as string;\n                if (amount) {\n                  handleWeeklyIncomeSubmit(selectedBusiness as number, amount);\n                }\n              }}>\n                <div className=\"flex items-center justify-center gap-4 mb-4\">\n                  <Label className=\"font-semibold text-xl\">This Week's Total Takings:</Label>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-3xl font-bold text-slate-600\">£</span>\n                    <Input\n                      name=\"weeklyAmount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      defaultValue={currentWeekIncome?.weeklyTotal || \"\"}\n                      className=\"text-3xl font-bold h-16 w-64 text-center border-2 border-primary\"\n                      required\n                    />\n                  </div>\n                  <Button type=\"submit\" size=\"lg\" className=\"h-16 px-8 text-lg font-semibold\">\n                    Enter\n                  </Button>\n                </div>\n              </form>\n              {currentWeekIncome?.weeklyTotal && (\n                <div className=\"grid gap-6 mt-6 bg-slate-50 rounded-lg p-4\" style={{ gridTemplateColumns: `repeat(${Math.max(moneyPots.length + (totalAllocatedPercentage < 100 ? 1 : 0), 1)}, 1fr)` }}>\n                  {moneyPots.length > 0 ? (\n                    <>\n                      {moneyPots.map(pot => (\n                        <div key={pot.id} className=\"text-center\">\n                          <div className=\"font-semibold mb-1 flex items-center justify-center gap-2\" style={{ color: pot.color || \"hsl(var(--primary))\" }}>\n                            <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: pot.color || \"hsl(var(--primary))\" }} />\n                            {pot.name} ({pot.percentage}%)\n                          </div>\n                          <div className=\"text-2xl font-bold\" style={{ color: pot.color || \"hsl(var(--primary))\" }}>\n                            {formatCurrency((parseFloat(currentWeekIncome.weeklyTotal) * parseFloat(pot.percentage.toString())) / 100)}\n                          </div>\n                        </div>\n                      ))}\n                      {totalAllocatedPercentage < 100 && (\n                        <div className=\"text-center\">\n                          <div className=\"text-primary font-semibold mb-1\">Available ({(100 - totalAllocatedPercentage).toFixed(1)}%)</div>\n                          <div className=\"text-2xl font-bold text-primary\">\n                            {formatCurrency(parseFloat(currentWeekIncome.weeklyTotal) * ((100 - totalAllocatedPercentage) / 100))}\n                          </div>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <div className=\"text-center col-span-full text-muted-foreground\">\n                      <a href=\"/money-pots\" className=\"text-primary hover:underline font-semibold\">\n                        Set up money pots to see allocation breakdown\n                      </a>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Historical View & Summary */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Income Summary</CardTitle>\n            <CardDescription>Track your growth over time</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span>This Week:</span>\n              <span className=\"font-bold\">{formatCurrency(weekTotal)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>This Month:</span>\n              <span className=\"font-bold\">{formatCurrency(monthTotal)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>This Year:</span>\n              <span className=\"font-bold\">{formatCurrency(yearTotal)}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Weeks</CardTitle>\n            <CardDescription>Quick view of past performance</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {weeklyIncomes.length === 0 ? (\n              <p className=\"text-muted-foreground text-sm\">No historical data yet</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {weeklyIncomes\n                  .filter(income => selectedBusiness === \"all\" || income.businessId === selectedBusiness)\n                  .slice(0, 4)\n                  .map((income) => {\n                    const business = businesses.find(b => b.id === income.businessId);\n                    const weekStart = new Date(income.weekStartDate);\n                    const weekEnd = addDays(weekStart, 6);\n                    \n                    return (\n                      <div key={income.id} className=\"flex justify-between items-center py-2 border-b last:border-b-0\">\n                        <div>\n                          <div className=\"text-sm font-medium\">\n                            {format(weekStart, \"MMM d\")} - {format(weekEnd, \"MMM d\")}\n                          </div>\n                          {selectedBusiness === \"all\" && business && (\n                            <div className=\"text-xs text-muted-foreground\">{business.name}</div>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">{formatCurrency(parseFloat(income.weeklyTotal))}</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Spreadsheet with Monthly Totals and Year Comparison */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarDays className=\"h-5 w-5\" />\n            Weekly Income Spreadsheet with Monthly Totals\n          </CardTitle>\n          <CardDescription>Complete history with monthly summaries and year-over-year comparison</CardDescription>\n          \n          {/* Year Selection Controls */}\n          <div className=\"flex items-center gap-4 mt-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant={viewMode === \"current\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"current\")}\n              >\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                Current Year\n              </Button>\n              <Button \n                variant={viewMode === \"comparison\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"comparison\")}\n              >\n                <ArrowUpDown className=\"h-4 w-4 mr-1\" />\n                Compare Years\n              </Button>\n            </div>\n            \n            {viewMode === \"comparison\" && availableYears.length > 1 && (\n              <div className=\"flex items-center gap-2\">\n                <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>\n                  <SelectTrigger className=\"w-24\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableYears.map(year => (\n                      <SelectItem key={year} value={year.toString()}>{year}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <span className=\"text-sm text-muted-foreground\">vs</span>\n                <Select value={comparisonYear.toString()} onValueChange={(value) => setComparisonYear(parseInt(value))}>\n                  <SelectTrigger className=\"w-24\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableYears.filter(year => year !== selectedYear).map(year => (\n                      <SelectItem key={year} value={year.toString()}>{year}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          {weeklyIncomes.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <CalendarDays className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg mb-2\">No weekly income data yet</p>\n              <p>Start by entering your weekly takings above to see your spreadsheet</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm border-collapse\">\n                <thead>\n                  <tr className=\"bg-slate-100 border-b-2 border-slate-300\">\n                    <th className=\"text-left py-3 px-4 font-semibold border-r border-slate-300\">Week Starting</th>\n                    <th className=\"text-left py-3 px-4 font-semibold border-r border-slate-300\">Week Ending</th>\n                    {selectedBusiness === \"all\" && <th className=\"text-left py-3 px-4 font-semibold border-r border-slate-300\">Business</th>}\n                    <th className=\"text-right py-3 px-4 font-semibold border-r border-slate-300 bg-blue-50\">Total Takings</th>\n                    <th className=\"text-right py-3 px-4 font-semibold border-r border-slate-300 bg-orange-50\">VAT/Tax (20%)</th>\n                    <th className=\"text-right py-3 px-4 font-semibold border-r border-slate-300 bg-green-50\">Profit Pot (5%)</th>\n                    <th className=\"text-right py-3 px-4 font-semibold bg-blue-50\">Available (75%)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {weeklyIncomes\n                    .filter(income => selectedBusiness === \"all\" || income.businessId === selectedBusiness)\n                    .sort((a, b) => new Date(b.weekStartDate).getTime() - new Date(a.weekStartDate).getTime())\n                    .slice(0, 20)\n                    .map((income, index) => {\n                      const business = businesses.find(b => b.id === income.businessId);\n                      const weekStart = new Date(income.weekStartDate);\n                      const weekEnd = addDays(weekStart, 6);\n                      const total = parseFloat(income.weeklyTotal);\n                      const vatAmount = total * 0.20;\n                      const profitAmount = total * 0.05;\n                      const availableAmount = total * 0.75;\n                      const isCurrentWeek = isSameWeek(weekStart, currentWeek, { weekStartsOn: 1 });\n                      \n                      return (\n                        <tr key={income.id} className={`border-b hover:bg-slate-50 ${isCurrentWeek ? 'bg-blue-50 border-blue-200' : index % 2 === 0 ? 'bg-white' : 'bg-slate-25'}`}>\n                          <td className=\"py-3 px-4 border-r border-slate-200 font-medium\">\n                            {format(weekStart, \"MMM d, yyyy\")}\n                            {isCurrentWeek && <Badge className=\"ml-2 text-xs\">Current</Badge>}\n                          </td>\n                          <td className=\"py-3 px-4 border-r border-slate-200\">\n                            {format(weekEnd, \"MMM d, yyyy\")}\n                          </td>\n                          {selectedBusiness === \"all\" && (\n                            <td className=\"py-3 px-4 border-r border-slate-200\">{business?.name || \"Unknown\"}</td>\n                          )}\n                          <td className=\"text-right py-3 px-4 font-bold border-r border-slate-200 bg-blue-25\">\n                            {formatCurrency(total)}\n                          </td>\n                          <td className=\"text-right py-3 px-4 font-semibold border-r border-slate-200 text-orange-600 bg-orange-25\">\n                            {formatCurrency(vatAmount)}\n                          </td>\n                          <td className=\"text-right py-3 px-4 font-semibold border-r border-slate-200 text-green-600 bg-green-25\">\n                            {formatCurrency(profitAmount)}\n                          </td>\n                          <td className=\"text-right py-3 px-4 font-semibold text-blue-600 bg-blue-25\">\n                            {formatCurrency(availableAmount)}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n              \n              {/* Monthly Summary Section */}\n              {weeklyIncomes.filter(income => selectedBusiness === \"all\" || income.businessId === selectedBusiness).length > 0 && (\n                <div className=\"mt-8 space-y-4\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Calendar className=\"h-5 w-5\" />\n                    <h3 className=\"font-semibold text-lg\">Monthly Totals & Year Comparison</h3>\n                  </div>\n                  \n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full text-sm border-collapse\">\n                      <thead>\n                        <tr className=\"bg-amber-50 border-b-2 border-amber-300\">\n                          <th className=\"text-left py-3 px-4 font-semibold border-r border-amber-300\">Month</th>\n                          <th className=\"text-right py-3 px-4 font-semibold border-r border-amber-300 bg-blue-50\">{selectedYear} Total</th>\n                          <th className=\"text-right py-3 px-4 font-semibold border-r border-amber-300 bg-blue-50\">{selectedYear} Available</th>\n                          <th className=\"text-right py-3 px-4 font-semibold border-r border-amber-300 bg-gray-50\">{comparisonYear} Total</th>\n                          <th className=\"text-right py-3 px-4 font-semibold bg-green-50\">Growth</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {Array.from({length: 12}, (_, i) => {\n                          const monthIndex = i;\n                          const currentYearTotal = currentYearMonthlyTotals[monthIndex] || 0;\n                          const comparisonYearTotal = comparisonYearMonthlyTotals[monthIndex] || 0;\n                          const difference = currentYearTotal - comparisonYearTotal;\n                          const growthPercent = comparisonYearTotal > 0 ? ((difference / comparisonYearTotal) * 100) : (currentYearTotal > 0 ? 100 : 0);\n                          const availableAmount = currentYearTotal * 0.75;\n                          \n                          // Only show months with data\n                          if (currentYearTotal === 0 && comparisonYearTotal === 0) return null;\n                          \n                          return (\n                            <tr key={monthIndex} className={`border-b hover:bg-slate-50 ${monthIndex % 2 === 0 ? 'bg-white' : 'bg-slate-25'}`}>\n                              <td className=\"py-3 px-4 border-r border-slate-200 font-medium\">\n                                {format(new Date(2025, monthIndex, 1), \"MMMM yyyy\").replace(\"2025\", selectedYear.toString())}\n                              </td>\n                              <td className=\"text-right py-3 px-4 font-bold border-r border-slate-200 bg-blue-25\">\n                                {formatCurrency(currentYearTotal)}\n                              </td>\n                              <td className=\"text-right py-3 px-4 font-bold border-r border-slate-200 text-blue-600 bg-blue-25\">\n                                {formatCurrency(availableAmount)}\n                              </td>\n                              <td className=\"text-right py-3 px-4 font-bold border-r border-slate-200 bg-gray-25\">\n                                {formatCurrency(comparisonYearTotal)}\n                              </td>\n                              <td className={`text-right py-3 px-4 font-bold ${growthPercent >= 0 ? 'text-green-600 bg-green-25' : 'text-red-600 bg-red-25'}`}>\n                                {growthPercent >= 0 ? '+' : ''}{growthPercent.toFixed(1)}%\n                              </td>\n                            </tr>\n                          );\n                        }).filter(Boolean)}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Income Goals */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n          <div>\n            <CardTitle>Income Goals</CardTitle>\n            <CardDescription>Set and track your targets</CardDescription>\n          </div>\n          <Dialog open={showGoalDialog} onOpenChange={setShowGoalDialog}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Goal\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Set Income Goal</DialogTitle>\n                <DialogDescription>\n                  Set targets for your business growth\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...goalForm}>\n                <form onSubmit={goalForm.handleSubmit(handleGoalSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={goalForm.control}\n                    name=\"businessId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Business</FormLabel>\n                        <Select \n                          onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}\n                          defaultValue={field.value ? field.value.toString() : undefined}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a business\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {businesses.map((business) => (\n                              <SelectItem key={business.id} value={business.id.toString()}>\n                                {business.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={goalForm.control}\n                    name=\"goalType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Goal Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"weekly\">Weekly</SelectItem>\n                            <SelectItem value=\"monthly\">Monthly</SelectItem>\n                            <SelectItem value=\"yearly\">Yearly</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={goalForm.control}\n                    name=\"targetAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Target Amount</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" placeholder=\"5000.00\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button type=\"submit\" disabled={createIncomeGoalMutation.isPending}>\n                    {createIncomeGoalMutation.isPending ? \"Creating...\" : \"Create Goal\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        <CardContent>\n          {(() => {\n            // Filter goals based on selected business\n            const filteredGoals = incomeGoals.filter(goal => {\n              if (selectedBusiness === \"all\") {\n                return true; // Show all goals when \"all\" is selected\n              } else {\n                return goal.businessId === selectedBusiness; // Show goals for selected business\n              }\n            });\n\n            if (filteredGoals.length === 0) {\n              return (\n                <p className=\"text-muted-foreground text-sm\">\n                  {selectedBusiness === \"all\" \n                    ? \"No brand-wide goals set yet\" \n                    : `No goals set for ${businesses.find(b => b.id === selectedBusiness)?.name || 'this business'} yet`\n                  }\n                </p>\n              );\n            }\n\n            return (\n              <div className=\"space-y-3\">\n                {filteredGoals.slice(0, 3).map((goal) => {\n                  // Calculate current amount based on business selection and goal type\n                  let currentAmount = 0;\n                  \n                  if (selectedBusiness === \"all\") {\n                    // For brand-wide goals, use totals across all businesses\n                    currentAmount = goal.goalType === \"weekly\" ? weekTotal :\n                                   goal.goalType === \"monthly\" ? monthTotal : yearTotal;\n                  } else {\n                    // For business-specific goals, calculate from that business only\n                    const businessIncomes = weeklyIncomes.filter(income => income.businessId === selectedBusiness);\n                    const currentDate = new Date();\n                    \n                    if (goal.goalType === \"weekly\") {\n                      const currentWeekIncome = businessIncomes.find(income => \n                        isSameWeek(new Date(income.weekStartDate), currentWeek, { weekStartsOn: 1 })\n                      );\n                      currentAmount = currentWeekIncome ? parseFloat(currentWeekIncome.weeklyTotal) : 0;\n                    } else if (goal.goalType === \"monthly\") {\n                      currentAmount = businessIncomes\n                        .filter(income => {\n                          const incomeDate = new Date(income.weekStartDate);\n                          return incomeDate.getMonth() === currentDate.getMonth() && \n                                 incomeDate.getFullYear() === currentDate.getFullYear();\n                        })\n                        .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n                    } else {\n                      currentAmount = businessIncomes\n                        .filter(income => {\n                          const incomeDate = new Date(income.weekStartDate);\n                          return incomeDate.getFullYear() === currentDate.getFullYear();\n                        })\n                        .reduce((sum, income) => sum + parseFloat(income.weeklyTotal), 0);\n                    }\n                  }\n\n                  const progress = (currentAmount / parseFloat(goal.targetAmount)) * 100;\n                  const business = businesses.find(b => b.id === goal.businessId);\n                  \n                  return (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"flex items-center gap-2\">\n                          {goal.goalType} goal\n                          {business && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {business.name}\n                            </Badge>\n                          )}\n                        </span>\n                        <span>{Math.round(progress)}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-600 h-2 rounded-full transition-all\" \n                          style={{ width: `${Math.min(progress, 100)}%` }}\n                        />\n                      </div>\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>{formatCurrency(currentAmount)}</span>\n                        <span>{formatCurrency(parseFloat(goal.targetAmount))}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })()}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":47645},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport Header from \"@/components/header\";\nimport { Clock, Percent, DollarSign, Bath, Calculator, TrendingUp, Lightbulb, Zap, Upload, FileText, GraduationCap, Crown, AlertTriangle, Mail } from \"lucide-react\";\nimport { formatPercentage } from \"@/lib/utils\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\n// Mock subscription check - in real app this would check user's subscription status\nconst hasActiveSubscription = false;\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n  const [isEmailPending, setIsEmailPending] = useState(false);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/metrics\"],\n  });\n\n  const { data: recentCalculations, isLoading: calculationsLoading } = useQuery({\n    queryKey: [\"/api/hourly-rate-calculations\"],\n  });\n\n  const { data: recentTreatments, isLoading: treatmentsLoading } = useQuery({\n    queryKey: [\"/api/treatments\"],\n  });\n\n  const { data: trialStatus, isLoading: trialLoading } = useQuery({\n    queryKey: [\"/api/user/trial-status\"],\n  });\n\n  const isLoading = metricsLoading || calculationsLoading || treatmentsLoading || trialLoading;\n\n  const handleEmailReport = async () => {\n    try {\n      setIsEmailPending(true);\n      \n      const response = await fetch('/api/email-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        if (data.fallback && data.emailData) {\n          // Use mailto fallback\n          const subject = encodeURIComponent(data.emailData.subject);\n          const body = encodeURIComponent(data.emailData.body);\n          window.location.href = `mailto:?subject=${subject}&body=${body}`;\n        } else {\n          toast({\n            title: \"Report Sent\",\n            description: \"Your business report has been sent to your email address.\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Email Failed\",\n          description: data.message || \"Failed to send email report. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An error occurred while sending the report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsEmailPending(false);\n    }\n  };\n\n  const quickStats = [\n    {\n      title: \"Current Hourly Rate\",\n      value: metrics ? formatCurrency(metrics.hourlyRate) : \"$0.00\",\n      change: \"+12% from last month\",\n      changeType: \"positive\",\n      icon: Clock,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-primary\"\n    },\n    {\n      title: \"Avg Profit Margin\",\n      value: metrics ? `${metrics.avgProfitMargin}%` : \"0%\",\n      change: \"+5% from last month\",\n      changeType: \"positive\",\n      icon: Percent,\n      bgColor: \"bg-pink-100\",\n      iconColor: \"text-success\"\n    },\n    {\n      title: \"Monthly Revenue\",\n      value: metrics ? formatCurrency(metrics.monthlyRevenue) : \"$0.00\",\n      change: \"-3% from last month\",\n      changeType: \"negative\",\n      icon: DollarSign,\n      bgColor: \"bg-amber-100\",\n      iconColor: \"text-warning\"\n    },\n    {\n      title: \"Active Treatments\",\n      value: metrics?.activeTreatments?.toString() || \"0\",\n      change: \"Services offered\",\n      changeType: \"neutral\",\n      icon: Bath,\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-purple-600\"\n    }\n  ];\n\n  const quickActions = [\n    {\n      title: \"Quick Rate Check\",\n      icon: Zap,\n      href: \"/hourly-rate\",\n      primary: true\n    },\n    {\n      title: \"Import Treatments\",\n      icon: Upload,\n      href: \"/profit-margin\",\n      primary: false\n    },\n    {\n      title: \"Email Report\",\n      icon: Mail,\n      href: \"#\",\n      primary: false,\n      onClick: true\n    },\n    {\n      title: \"Tutorial & Help\",\n      icon: GraduationCap,\n      href: \"/help\",\n      primary: false\n    }\n  ];\n\n  return (\n    <>\n      <Header \n        title=\"Salon Success Manager Dashboard\" \n        description=\"Track your salon's performance, calculate optimal pricing, and manage business growth\" \n      />\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        {/* Trial Status Banner */}\n        {trialStatus && trialStatus.status === \"trial\" && (\n          <Alert className=\"border-amber-200 bg-amber-50 text-amber-800 mb-6\">\n            <Crown className=\"h-4 w-4\" />\n            <AlertDescription className=\"flex items-center justify-between\">\n              <span>\n                <strong>Free Trial Active:</strong> {trialStatus.message}\n              </span>\n              <Link href=\"/subscribe\">\n                <Button size=\"sm\" className=\"bg-amber-600 hover:bg-amber-700 text-white\">\n                  Subscribe Now\n                </Button>\n              </Link>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {trialStatus && trialStatus.status === \"expired\" && (\n          <Alert className=\"border-red-200 bg-red-50 text-red-800 mb-6\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"flex items-center justify-between\">\n              <span>\n                <strong>Trial Expired:</strong> {trialStatus.message}\n              </span>\n              <Link href=\"/subscribe\">\n                <Button size=\"sm\" className=\"bg-red-600 hover:bg-red-700 text-white\">\n                  Subscribe to Continue\n                </Button>\n              </Link>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Quick Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {quickStats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <Card key={index} className=\"border border-slate-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-slate-600 text-sm font-medium\">{stat.title}</p>\n                      <p className=\"text-2xl font-bold text-slate-800 mt-1\">\n                        {isLoading ? \"...\" : stat.value}\n                      </p>\n                      <p className={`text-sm mt-2 flex items-center ${\n                        stat.changeType === 'positive' ? 'text-success' :\n                        stat.changeType === 'negative' ? 'text-warning' :\n                        'text-slate-500'\n                      }`}>\n                        {stat.changeType === 'positive' && <TrendingUp className=\"h-3 w-3 mr-1\" />}\n                        {stat.changeType === 'negative' && <TrendingUp className=\"h-3 w-3 mr-1 rotate-180\" />}\n                        {stat.change}\n                      </p>\n                    </div>\n                    <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                      <Icon className={`${stat.iconColor} h-6 w-6`} />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Main Calculator Tools */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Hourly Rate Calculator Preview */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Hourly Rate Calculator</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Calculate your optimal hourly rate based on expenses and goals</p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-primary h-5 w-5\" />\n                </div>\n              </div>\n              \n              <div className=\"bg-slate-50 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-slate-700 font-medium\">Current Hourly Rate:</span>\n                  <span className=\"text-2xl font-bold text-primary\">\n                    {isLoading ? \"...\" : formatCurrency(metrics?.hourlyRate || 0)}\n                  </span>\n                </div>\n                <p className=\"text-slate-600 text-sm mt-2\">Based on your latest calculation</p>\n              </div>\n\n              <Link href=\"/hourly-rate\">\n                <Button className=\"w-full bg-primary text-white hover:bg-blue-700\">\n                  Open Calculator\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Treatment Profit Calculator Preview */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Treatment Profit Calculator</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Calculate profit margins for individual treatments</p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Percent className=\"text-success h-5 w-5\" />\n                </div>\n              </div>\n\n              <div className=\"bg-slate-50 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-slate-700 font-medium\">Average Profit Margin:</span>\n                  <span className=\"text-2xl font-bold text-success\">\n                    {isLoading ? \"...\" : `${metrics?.avgProfitMargin || 0}%`}\n                  </span>\n                </div>\n                <p className=\"text-slate-600 text-sm mt-2\">Across all your treatments</p>\n              </div>\n\n              <Link href=\"/profit-margin\">\n                <Button className=\"w-full bg-success text-white hover:bg-green-700\">\n                  Open Calculator\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity & Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Recent Calculations */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border border-slate-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-bold text-slate-800\">Recent Activity</h3>\n                  <Button variant=\"ghost\" className=\"text-primary hover:text-blue-700 text-sm font-medium\">\n                    View All\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {isLoading ? (\n                    <div className=\"text-center py-8 text-slate-500\">Loading recent activity...</div>\n                  ) : (\n                    <>\n                      {recentCalculations?.slice(0, 2).map((calc, index) => (\n                        <div key={calc.id} className=\"flex items-center justify-between p-4 bg-slate-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                              <Calculator className=\"text-primary h-5 w-5\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-slate-800\">Hourly Rate Calculation</p>\n                              <p className=\"text-sm text-slate-600\">\n                                {new Date(calc.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold text-slate-800\">{formatCurrency(calc.calculatedRate)}/hr</p>\n                            <p className=\"text-sm text-slate-500\">{calc.desiredProfit}% target</p>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {recentTreatments?.slice(0, 1).map((treatment) => (\n                        <div key={treatment.id} className=\"flex items-center justify-between p-4 bg-slate-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-pink-100 rounded-lg flex items-center justify-center\">\n                              <Bath className=\"text-success h-5 w-5\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-slate-800\">{treatment.name}</p>\n                              <p className=\"text-sm text-slate-600\">\n                                {new Date(treatment.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold text-slate-800\">{formatCurrency(treatment.price)}</p>\n                            <p className=\"text-sm text-success\">{formatPercentage(treatment.profitMargin)} margin</p>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {(!recentCalculations?.length && !recentTreatments?.length) && (\n                        <div className=\"text-center py-8 text-slate-500\">\n                          No recent activity. Start by calculating your hourly rate!\n                        </div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-slate-800 mb-6\">Quick Actions</h3>\n              \n              <div className=\"space-y-4\">\n                {quickActions.map((action, index) => {\n                  const Icon = action.icon;\n                  if (action.onClick && action.title === \"Email Report\") {\n                    return (\n                      <Button\n                        key={index}\n                        onClick={handleEmailReport}\n                        disabled={isEmailPending}\n                        variant={action.primary ? \"default\" : \"outline\"}\n                        className={`w-full justify-start space-x-3 disabled:opacity-50 ${\n                          action.primary \n                            ? \"bg-primary text-white hover:bg-blue-700\" \n                            : \"border-2 border-slate-200 text-slate-700 hover:bg-slate-50\"\n                        }`}\n                      >\n                        <Icon className=\"h-5 w-5\" />\n                        <span className=\"font-medium\">{isEmailPending ? 'Sending...' : action.title}</span>\n                      </Button>\n                    );\n                  }\n                  return (\n                    <Link key={index} href={action.href}>\n                      <Button\n                        variant={action.primary ? \"default\" : \"outline\"}\n                        className={`w-full justify-start space-x-3 ${\n                          action.primary \n                            ? \"bg-primary text-white hover:bg-blue-700\" \n                            : \"border-2 border-slate-200 text-slate-700 hover:bg-slate-50\"\n                        }`}\n                      >\n                        <Icon className=\"h-5 w-5\" />\n                        <span className=\"font-medium\">{action.title}</span>\n                      </Button>\n                    </Link>\n                  );\n                })}\n              </div>\n\n              <div className=\"mt-8 pt-6 border-t border-slate-200\">\n                <h4 className=\"font-bold text-slate-800 mb-4\">Business Tips</h4>\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-slate-700\">\n                    <Lightbulb className=\"text-warning h-4 w-4 mr-2 inline\" />\n                    Paying yourself last is the fastest way to burn out. Put your wage in the budget first.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":17191},"client/src/pages/expense-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport Header from \"@/components/header\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Receipt, Plus, Trash2, Calendar, ChevronDown, ChevronRight } from \"lucide-react\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport Paywall from \"@/components/paywall\";\n\nconst expenseSchema = z.object({\n  category: z.string().min(1, \"Category is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  date: z.string().min(1, \"Date is required\"),\n});\n\ntype ExpenseForm = z.infer<typeof expenseSchema>;\n\nconst categories = [\n  \"Adhoc\",\n  \"Directors Wages\",\n  \"Dividends\",\n  \"Equipment & Maintenance\",\n  \"Insurance\",\n  \"Marketing & Advertising\",\n  \"Other\",\n  \"Products & Supplies\",\n  \"Professional Services\",\n  \"Rent & Utilities\",\n  \"Spending on me (opps)\",\n  \"Training & Education\",\n  \"Travel & Transportation\",\n  \"Wages\"\n];\n\nexport default function ExpenseTracker() {\n  const { formatCurrency } = useCurrency();\n  const [expandedMonths, setExpandedMonths] = useState<Set<string>>(new Set());\n  const [expenseToDelete, setExpenseToDelete] = useState<number | null>(null);\n  \n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  const { toast } = useToast();\n\n  const { data: expenses, isLoading } = useQuery({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const form = useForm<ExpenseForm>({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      category: \"\",\n      description: \"\",\n      amount: \"\",\n      date: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/expenses\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics\"] });\n      form.reset({\n        category: \"\",\n        description: \"\",\n        amount: \"\",\n        date: new Date().toISOString().split('T')[0],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Expense added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add expense. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest(\"DELETE\", `/api/expenses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics\"] });\n      setExpenseToDelete(null);\n      toast({\n        title: \"Success\",\n        description: \"Expense deleted successfully!\",\n      });\n    },\n    onError: () => {\n      setExpenseToDelete(null);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete expense. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmDelete = () => {\n    if (expenseToDelete) {\n      deleteExpenseMutation.mutate(expenseToDelete);\n    }\n  };\n\n  const onSubmit = (data: ExpenseForm) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  const toggleMonth = (monthKey: string) => {\n    const newExpanded = new Set(expandedMonths);\n    if (newExpanded.has(monthKey)) {\n      newExpanded.delete(monthKey);\n    } else {\n      newExpanded.add(monthKey);\n    }\n    setExpandedMonths(newExpanded);\n  };\n\n  // Group expenses by month\n  const expensesByMonth = Array.isArray(expenses) ? expenses.reduce((acc: Record<string, {\n    monthName: string;\n    total: number;\n    expenses: any[];\n    categories: Record<string, number>;\n  }>, expense: any) => {\n    const date = new Date(expense.date);\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n    const monthName = date.toLocaleDateString('en-GB', { month: 'long', year: 'numeric' });\n    \n    if (!acc[monthKey]) {\n      acc[monthKey] = {\n        monthName,\n        total: 0,\n        expenses: [],\n        categories: {}\n      };\n    }\n    \n    const amount = parseFloat(expense.amount.toString());\n    acc[monthKey].total += amount;\n    acc[monthKey].expenses.push(expense);\n    acc[monthKey].categories[expense.category] = (acc[monthKey].categories[expense.category] || 0) + amount;\n    \n    return acc;\n  }, {}) : {};\n\n  // Sort months by date (most recent first)\n  const sortedMonths = Object.entries(expensesByMonth).sort(([a], [b]) => b.localeCompare(a));\n\n  const currentYear = new Date().getFullYear();\n  const totalExpenses = Array.isArray(expenses) ? expenses.reduce((sum: number, expense: any) => {\n    const expenseYear = new Date(expense.date).getFullYear();\n    return expenseYear === currentYear ? sum + parseFloat(expense.amount.toString()) : sum;\n  }, 0) : 0;\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"Expense Tracker\" \n          description=\"Track and categorize your business expenses\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!(subscriptionStatus as any)?.active) {\n    return (\n      <>\n        <Header \n          title=\"Expense Tracker\" \n          description=\"Track and categorize your business expenses\" \n        />\n        <Paywall \n          title=\"Expense Tracker\"\n          description=\"Monitor and control your business costs\"\n          feature=\"expense tracking and categorization\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header \n        title=\"Expense Tracker\" \n        description=\"Track and categorise your business expenses to understand your costs\" \n      />\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Add Expense Form */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Add Expense</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Record a new business expense</p>\n                </div>\n              </div>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.map((category) => (\n                              <SelectItem key={category} value={category}>\n                                {category}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"e.g., Office rent for January\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Amount</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500\">£</span>\n                            <Input\n                              {...field}\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"0.00\"\n                              className=\"pl-8\"\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"date\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-primary text-white hover:bg-blue-700\"\n                    disabled={createExpenseMutation.isPending}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    {createExpenseMutation.isPending ? \"Adding...\" : \"Add Expense\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Monthly Expense Summary */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Monthly Summary</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Expenses organised by month</p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Receipt className=\"text-success h-5 w-5\" />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"bg-primary/10 rounded-lg p-4 text-center\">\n                  <p className=\"text-sm text-slate-600 mb-1\">Total for {currentYear}</p>\n                  <p className=\"text-2xl font-bold text-primary\">{formatCurrency(totalExpenses)}</p>\n                </div>\n\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {sortedMonths.length > 0 ? (\n                    sortedMonths.map(([monthKey, monthData]) => (\n                      <div key={monthKey} className=\"bg-slate-50 rounded-lg\">\n                        <div \n                          className=\"p-3 cursor-pointer hover:bg-slate-100 transition-colors\"\n                          onClick={() => toggleMonth(monthKey)}\n                        >\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"flex items-center space-x-2\">\n                              {expandedMonths.has(monthKey) ? (\n                                <ChevronDown className=\"h-4 w-4 text-slate-600\" />\n                              ) : (\n                                <ChevronRight className=\"h-4 w-4 text-slate-600\" />\n                              )}\n                              <span className=\"font-medium text-slate-800\">{monthData.monthName}</span>\n                            </div>\n                            <span className=\"font-bold text-slate-800\">{formatCurrency(monthData.total)}</span>\n                          </div>\n                          <div className=\"text-xs text-slate-600 ml-6\">\n                            {monthData.expenses.length} expense{monthData.expenses.length !== 1 ? 's' : ''}\n                          </div>\n                        </div>\n                        \n                        {expandedMonths.has(monthKey) && (\n                          <div className=\"px-3 pb-3 space-y-2\">\n                            {Object.entries(monthData.categories).map(([category, amount]) => (\n                              <div key={category} className=\"flex justify-between items-center py-2 px-3 bg-white rounded border-l-4 border-primary/20\">\n                                <span className=\"text-sm text-slate-700\">{category}</span>\n                                <span className=\"text-sm font-semibold text-slate-800\">{formatCurrency(amount)}</span>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-4 text-slate-500\">\n                      No expenses recorded yet\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Expenses */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Recent Expenses</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Latest transactions</p>\n                </div>\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"text-purple-600 h-5 w-5\" />\n                </div>\n              </div>\n\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {isLoading ? (\n                  <div className=\"text-center py-8 text-slate-500\">Loading expenses...</div>\n                ) : expenses?.length ? (\n                  expenses.slice(0, 10).map((expense) => (\n                    <div key={expense.id} className=\"p-3 bg-slate-50 rounded-lg\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-slate-800\">{expense.description}</p>\n                          <p className=\"text-sm text-slate-600\">{expense.category}</p>\n                          <p className=\"text-xs text-slate-500\">\n                            {new Date(expense.date).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-bold text-slate-800\">\n                            {formatCurrency(expense.amount)}\n                          </span>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                disabled={deleteExpenseMutation.isPending}\n                                className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  This action cannot be undone. This will permanently delete this expense from your records.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>No</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => {\n                                    setExpenseToDelete(expense.id);\n                                    handleConfirmDelete();\n                                  }}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Yes\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-slate-500\">\n                    No expenses recorded yet. Add your first expense!\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":18606},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport logoPath from \"@assets/KatieGodfrey-Logo_Black.png\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [resetLink, setResetLink] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await apiRequest(\"POST\", \"/api/v2/auth/reset-password\", { email });\n      const data = await response.json();\n      \n      if (data.resetLink) {\n        setResetLink(data.resetLink);\n        setIsSuccess(true);\n        toast({\n          title: \"Reset link generated\",\n          description: \"Your password reset link is ready below\",\n        });\n      } else {\n        toast({\n          title: \"Reset link sent\",\n          description: \"If that email exists, you'll receive reset instructions\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send reset link. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n      <Header title=\"Forgot Password\" description=\"Reset your account password\" />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          {/* Logo */}\n          <div className=\"text-center mb-8\">\n            <img \n              src={logoPath} \n              alt=\"Katie Godfrey Business Coach\" \n              className=\"h-16 mx-auto mb-4\"\n            />\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              Reset Your Password\n            </h1>\n          </div>\n\n          <Card className=\"shadow-xl border-0\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-xl\">Forgot Password?</CardTitle>\n              <CardDescription>\n                {isSuccess \n                  ? \"Check your email for reset instructions\"\n                  : \"Enter your email address and we'll send you a link to reset your password\"\n                }\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              {!isSuccess ? (\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      disabled={isLoading}\n                      required\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-pink-600 hover:bg-pink-700\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Sending...\" : \"Send Reset Link\"}\n                  </Button>\n                </form>\n              ) : (\n                <div className=\"text-center space-y-4\">\n                  {resetLink ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"text-green-600 text-sm font-medium\">\n                        Your password reset link is ready!\n                      </div>\n                      <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-2\">\n                          Click the link below to reset your password:\n                        </p>\n                        <div className=\"space-y-3\">\n                          <button\n                            onClick={() => window.open(resetLink, '_self')}\n                            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors\"\n                          >\n                            Reset Password Now\n                          </button>\n                          <div className=\"text-xs text-gray-600 dark:text-gray-400 break-all bg-gray-50 dark:bg-gray-800 p-2 rounded\">\n                            <strong>Or copy this link:</strong><br/>\n                            <span className=\"font-mono\">{resetLink}</span>\n                          </div>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                          This link expires in 1 hour for security\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-green-600 text-sm\">\n                      If an account with that email exists, you'll receive reset instructions shortly.\n                    </div>\n                  )}\n                  <div className=\"text-sm text-gray-600\">\n                    Need to try a different email address?\n                  </div>\n                </div>\n              )}\n\n              <div className=\"mt-6 text-center\">\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" className=\"text-sm\">\n                    ← Back to Login\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Additional help */}\n          <div className=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n            <p>Need more help? Contact help at</p>\n            <a href=\"mailto:help@salonsuccessmanager.com\" className=\"text-pink-600 hover:underline\">\n              help@salonsuccessmanager.com\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6678},"client/src/pages/help.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mail, Phone, MessageCircle, Book, Video, FileText, Calculator, Clock, Percent, Receipt, Package, TrendingUp, DollarSign, Crown } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport { useState } from \"react\";\n\nexport default function Help() {\n  const [activeTab, setActiveTab] = useState(\"getting-started\");\n\n  return (\n    <div className=\"flex-1 space-y-6 p-6\">\n      <Header \n        title=\"Help & Support\" \n        description=\"Get help with your Salon Success Manager and contact our support team\"\n      />\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"getting-started\">Getting Started</TabsTrigger>\n          <TabsTrigger value=\"features\">Features Guide</TabsTrigger>\n          <TabsTrigger value=\"faq\">FAQ</TabsTrigger>\n          <TabsTrigger value=\"contact\">Contact Support</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"getting-started\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Video className=\"h-5 w-5 text-primary\" />\n                  Quick Start Video\n                </CardTitle>\n                <CardDescription>\n                  Watch a 5-minute overview of your Salon Success Manager\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"aspect-video bg-slate-100 rounded-lg flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <Video className=\"h-12 w-12 text-slate-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-slate-500\">Tutorial video coming soon</p>\n                  </div>\n                </div>\n                <Button className=\"w-full\">Watch Tutorial</Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Book className=\"h-5 w-5 text-primary\" />\n                  Step-by-Step Guide\n                </CardTitle>\n                <CardDescription>\n                  Follow our comprehensive setup guide\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant=\"outline\">1</Badge>\n                  <span className=\"text-sm\">Set up your business profile</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant=\"outline\">2</Badge>\n                  <span className=\"text-sm\">Calculate your hourly rate</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant=\"outline\">3</Badge>\n                  <span className=\"text-sm\">Track expenses and revenue</span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant=\"outline\">4</Badge>\n                  <span className=\"text-sm\">Review your CEO numbers</span>\n                </div>\n                <Button variant=\"outline\" className=\"w-full mt-4\" onClick={() => setActiveTab(\"features\")}>View Full Guide</Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"features\" className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <Clock className=\"h-4 w-4\" />\n                  Hourly Rate Calculator\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-2\">\n                <p>Calculate your optimal hourly rate based on:</p>\n                <ul className=\"list-disc list-inside text-xs space-y-1 text-slate-600\">\n                  <li>Business expenses</li>\n                  <li>Desired salary</li>\n                  <li>Working hours</li>\n                  <li>Profit margins</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <Percent className=\"h-4 w-4\" />\n                  Profit Margin Calculator\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-2\">\n                <p>Analyse profitability of services:</p>\n                <ul className=\"list-disc list-inside text-xs space-y-1 text-slate-600\">\n                  <li>Service costs vs. pricing</li>\n                  <li>Profit margin analysis</li>\n                  <li>Pricing recommendations</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <Receipt className=\"h-4 w-4\" />\n                  Expense Tracker\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-2\">\n                <p>Monitor business expenses:</p>\n                <ul className=\"list-disc list-inside text-xs space-y-1 text-slate-600\">\n                  <li>Track all business costs</li>\n                  <li>Categorise expenses</li>\n                  <li>Monthly summaries</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <Package className=\"h-4 w-4\" />\n                  Stock Budget Calculator\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-2\">\n                <p>Plan your stock purchases:</p>\n                <ul className=\"list-disc list-inside text-xs space-y-1 text-slate-600\">\n                  <li>Budget allocation</li>\n                  <li>Inventory planning</li>\n                  <li>Cost management</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  CEO Numbers\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-2\">\n                <p>Key business metrics:</p>\n                <ul className=\"list-disc list-inside text-xs space-y-1 text-slate-600\">\n                  <li>Revenue tracking</li>\n                  <li>Profit analysis</li>\n                  <li>Growth indicators</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-sm\">\n                  <FileText className=\"h-4 w-4\" />\n                  Reports & Export\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-sm space-y-2\">\n                <p>Generate professional reports:</p>\n                <ul className=\"list-disc list-inside text-xs space-y-1 text-slate-600\">\n                  <li>PDF reports</li>\n                  <li>CSV exports</li>\n                  <li>Email sharing</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"faq\" className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Frequently Asked Questions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">How do I calculate my ideal hourly rate?</h4>\n                  <p className=\"text-sm text-slate-600\">Use the Hourly Rate Calculator to input your business expenses, desired salary, and working hours. It will generate a recommended hourly rate that ensures profitability and covers all your outgoings. Once you know your hourly rate, you can make sure all your treatments and services are priced correctly.</p>\n                  <p className=\"text-sm text-slate-600 mt-2 font-medium\">This is the number one mistake we see in beauty businesses, pricing that doesn't reflect the true cost of running the business.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">How do I use the Profit Margin Calculator?</h4>\n                  <p className=\"text-sm text-slate-600\">With the Profit Margin Calculator, you can input your treatments or training courses, their prices, and the time it takes to deliver each service. The calculator will then show you exactly how much profit you're making, or if you're actually making a loss. Plus the profit percentage of each service.</p>\n                  <p className=\"text-sm text-slate-600 mt-2 font-medium\">This is a crucial step in understanding whether your services are priced correctly and sustainably.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">How to Use the Expense Tracker</h4>\n                  <p className=\"text-sm text-slate-600\">This tool makes it easy to track your monthly business spending. It helps you clearly see where your money is going, so you can understand your outgoings, stay in control of your finances, and feed accurate figures into the Hourly Rate Calculator.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">What is the Stock Budget Calculator?</h4>\n                  <p className=\"text-sm text-slate-600\">One of the most common issues we see is business owners not knowing how much to budget for stock each month. Many simply purchase as and when needed, or store excess stock in treatment rooms and retail shelves, without realising that's their money just sitting there.</p>\n                  <p className=\"text-sm text-slate-600 mt-2\">Another challenge arises when handing over stock management to team members, often, they don't know how much they're allowed to spend, which leads to over- or under-ordering.</p>\n                  <p className=\"text-sm text-slate-600 mt-2 font-medium\">The Stock Budget Calculator helps you track your average monthly stock spend so you can set clear budgets and keep better control of your cash flow.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">What is the Revenue Projections Tool?</h4>\n                  <p className=\"text-sm text-slate-600\">This tool is perfect for helping you understand how many treatments or services you need to offer to reach your income goals.</p>\n                  <p className=\"text-sm text-slate-600 mt-2\">One of the most common questions we get is: \"How can I make more money?\"</p>\n                  <p className=\"text-sm text-slate-600 mt-2 font-medium\">Whether you want to boost your revenue by a specific amount or set new targets, this tool shows you exactly which treatments to focus on and how many clients you need to hit those goals. It takes the guesswork out of planning and helps you make smarter business decisions.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">What is CEO Numbers?</h4>\n                  <p className=\"text-sm text-slate-600\">CEO Numbers is Katie Godfrey's proven formula that has helped thousands of business owners take control of their finances and finally understand their numbers.</p>\n                  <p className=\"text-sm text-slate-600 mt-2\">One of the biggest problems in the industry is that 95% of business owners don't know their key figures, including how much they actually turn over.</p>\n                  <p className=\"text-sm text-slate-600 mt-2\">This tool allows you to input what you make each week and track it clearly, so you can understand your income and make informed decisions. Even better, it guides you on exactly how much money to set aside each week into separate accounts or \"money pots\", helping you manage your finances with clarity and confidence.</p>\n                  <p className=\"text-sm text-slate-600 mt-2 font-medium\">You can customise the pots and amounts based on what your business needs most, whether it's tax, wages, stock, savings, or growth.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">What are Money Pots?</h4>\n                  <p className=\"text-sm text-slate-600\">Money Pots are a simple but powerful way to manage your business finances by dividing your income into separate accounts or \"pots\" for specific purposes.</p>\n                  <p className=\"text-sm text-slate-600 mt-2\">You can create your own Money Pots based on what your business needs. For example, if you're VAT registered, a VAT Pot is essential to make sure you're never caught short. I also always recommend setting up a Profit Pot, so you're consistently putting money aside for growth or rewards.</p>\n                  <p className=\"text-sm text-slate-600 mt-2\">You decide how many pots you want and what percentage of your income goes into each one.</p>\n                  <p className=\"text-sm text-slate-600 mt-2 font-medium\">Each week, when you complete your CEO Numbers, you'll log into your bank and transfer money from your current account into each of your pots, keeping everything organised and giving you full control over your cash flow.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">Can I track multiple businesses?</h4>\n                  <p className=\"text-sm text-slate-600\">Yes, the system supports multiple business tracking. You can switch between different businesses in your CEO Numbers dashboard.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">How do I export my reports?</h4>\n                  <p className=\"text-sm text-slate-600\">Go to Reports & Export, select your date range and report type, then choose from PDF, CSV, print, or email options.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">What's included in the Pro subscription?</h4>\n                  <p className=\"text-sm text-slate-600\">Pro subscription (£23.97/month) includes unlimited access to all calculators, advanced reporting, export features, and priority support.</p>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">Can I cancel my subscription anytime?</h4>\n                  <p className=\"text-sm text-slate-600\">Yes, you can cancel your subscription at any time. Your access will continue until the end of your billing period.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"contact\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Get in Touch</CardTitle>\n                <CardDescription>\n                  Need help? Our support team is here to assist you\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Mail className=\"h-5 w-5 text-primary\" />\n                  <div>\n                    <p className=\"font-medium\">Email Support</p>\n                    <p className=\"text-sm text-slate-600\">help@salonsuccessmanager.com</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Response Times</CardTitle>\n                <CardDescription>\n                  Expected response times for support requests\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Email Support</span>\n                  <Badge variant=\"outline\">24-48 hours</Badge>\n                </div>\n                \n                <div className=\"pt-4 border-t\">\n                  <Button \n                    className=\"w-full\"\n                    onClick={() => window.open('mailto:help@salonsuccessmanager.com?subject=Salon Success Manager Support Request', '_blank')}\n                  >\n                    Send Email\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17606},"client/src/pages/hourly-rate-calculator.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Header from \"@/components/header\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { calculateHourlyRate } from \"@/lib/utils\";\nimport { Save, Calculator, Clock, History } from \"lucide-react\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport Paywall from \"@/components/paywall\";\n\nconst calculatorSchema = z.object({\n  monthlyExpenses: z.string().min(1, \"Monthly expenses is required\"),\n  desiredProfit: z.string().min(1, \"Desired profit is required\"),\n  weeklyHours: z.string().min(1, \"Weekly hours is required\"),\n  taxRate: z.string().min(1, \"Tax rate is required\"),\n  staffCount: z.string().optional(),\n});\n\ntype CalculatorForm = z.infer<typeof calculatorSchema>;\n\nexport default function HourlyRateCalculator() {\n  const { formatCurrency } = useCurrency();\n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  // Fetch calculation history\n  const { data: calculationHistory, isLoading: historyLoading } = useQuery({\n    queryKey: [\"/api/hourly-rate-calculations\"],\n    enabled: subscriptionStatus?.active === true,\n  });\n\n  const [calculatedResults, setCalculatedResults] = useState<{\n    hourlyRate: number;\n    staffTargetPerPerson: number | null;\n  }>({ hourlyRate: 0, staffTargetPerPerson: null });\n  const { toast } = useToast();\n\n  // Function to parse number with commas and format for display\n  const parseNumberInput = (value: string): number => {\n    // Remove commas and any non-numeric characters except decimal point\n    const cleanValue = value.replace(/,/g, '').replace(/[^0-9.-]/g, '');\n    return parseFloat(cleanValue) || 0;\n  };\n\n  // Function to format number with commas for display\n  const formatNumberWithCommas = (value: string): string => {\n    // Remove any non-numeric characters except decimal point and commas\n    let cleaned = value.replace(/[^0-9.,]/g, '');\n    \n    // Remove existing commas to reformat\n    cleaned = cleaned.replace(/,/g, '');\n    \n    // Split into integer and decimal parts\n    const parts = cleaned.split('.');\n    let integerPart = parts[0];\n    const decimalPart = parts[1];\n    \n    // Add commas to integer part\n    if (integerPart.length > 3) {\n      integerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    }\n    \n    // Reconstruct the number\n    return decimalPart !== undefined ? `${integerPart}.${decimalPart}` : integerPart;\n  };\n\n  // Function to validate and format percentage inputs (max 4 digits, 1 decimal)\n  const validatePercentageInput = (value: string): string => {\n    // Remove any non-numeric characters except decimal point\n    let cleaned = value.replace(/[^0-9.]/g, '');\n    \n    // Ensure only one decimal point\n    const parts = cleaned.split('.');\n    if (parts.length > 2) {\n      cleaned = parts[0] + '.' + parts.slice(1).join('');\n    }\n    \n    // Limit to 4 total digits and 1 decimal place\n    if (cleaned.includes('.')) {\n      const [integerPart, decimalPart] = cleaned.split('.');\n      const limitedInteger = integerPart.slice(0, 3); // Max 3 digits before decimal\n      const limitedDecimal = decimalPart.slice(0, 1); // Max 1 digit after decimal\n      cleaned = limitedInteger + '.' + limitedDecimal;\n    } else {\n      cleaned = cleaned.slice(0, 4); // Max 4 digits if no decimal\n    }\n    \n    return cleaned;\n  };\n\n\n\n  const form = useForm<CalculatorForm>({\n    resolver: zodResolver(calculatorSchema),\n    defaultValues: {\n      monthlyExpenses: \"\",\n      desiredProfit: \"30\",\n      weeklyHours: \"40\",\n      taxRate: \"25\",\n      staffCount: \"\",\n    },\n  });\n\n  const saveCalculationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/hourly-rate-calculations\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hourly-rate-calculations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Hourly rate calculation saved successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save calculation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateRate = () => {\n    const values = form.getValues();\n    const monthlyExpenses = parseNumberInput(values.monthlyExpenses);\n    const desiredProfit = parseNumberInput(values.desiredProfit);\n    const weeklyHours = parseNumberInput(values.weeklyHours) || 40;\n    const taxRate = parseNumberInput(values.taxRate);\n    const staffCount = parseNumberInput(values.staffCount || \"0\");\n\n    const results = calculateHourlyRate(monthlyExpenses, desiredProfit, weeklyHours, taxRate, staffCount);\n    setCalculatedResults(results);\n  };\n\n  const onSubmit = (data: CalculatorForm) => {\n    const calculationData = {\n      monthlyExpenses: parseNumberInput(data.monthlyExpenses).toString(),\n      desiredProfit: parseNumberInput(data.desiredProfit).toString(),\n      weeklyHours: Math.round(parseNumberInput(data.weeklyHours)),\n      taxRate: parseNumberInput(data.taxRate).toString(),\n      staffCount: Math.round(parseNumberInput(data.staffCount || \"0\")),\n      calculatedRate: calculatedResults.hourlyRate.toString(),\n      staffTargetPerPerson: calculatedResults.staffTargetPerPerson?.toString() || null,\n    };\n\n    saveCalculationMutation.mutate(calculationData);\n  };\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"Hourly Rate Calculator\" \n          description=\"Calculate your optimal hourly rate based on expenses and profit goals\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!subscriptionStatus || !(subscriptionStatus as any).active) {\n    return (\n      <>\n        <Header \n          title=\"Hourly Rate Calculator\" \n          description=\"Calculate your optimal hourly rate based on expenses and profit goals\" \n        />\n        <Paywall \n          title=\"Hourly Rate Calculator\"\n          description=\"Calculate your optimal pricing strategy\"\n          feature=\"hourly rate calculations\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header \n        title=\"Hourly Rate Calculator\" \n        description=\"Calculate your optimal hourly rate based on expenses and profit goals\" \n      />\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Calculator Form */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Calculate Your Rate</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Enter your business details to calculate the optimal hourly rate. To gain the correct rate, under monthly expenses make sure you add all expenses of the business including wages and stock</p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Calculator className=\"text-primary h-5 w-5\" />\n                </div>\n              </div>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"monthlyExpenses\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Monthly Expenses</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500\">£</span>\n                              <Input\n                                {...field}\n                                type=\"text\"\n                                placeholder=\"5,000\"\n                                className=\"pl-8\"\n                                onChange={(e) => {\n                                  const formattedValue = formatNumberWithCommas(e.target.value);\n                                  field.onChange(formattedValue);\n                                  calculateRate();\n                                }}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"desiredProfit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Desired Profit %</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                {...field}\n                                type=\"text\"\n                                placeholder=\"30\"\n                                className=\"pr-8\"\n                                onChange={(e) => {\n                                  const validatedValue = validatePercentageInput(e.target.value);\n                                  field.onChange(validatedValue);\n                                  calculateRate();\n                                }}\n                              />\n                              <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-500\">%</span>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"weeklyHours\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Working Hours/Week</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"text\"\n                              placeholder=\"40\"\n                              onChange={(e) => {\n                                const formattedValue = formatNumberWithCommas(e.target.value);\n                                field.onChange(formattedValue);\n                                calculateRate();\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"taxRate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Tax Rate %</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                {...field}\n                                type=\"text\"\n                                placeholder=\"25\"\n                                className=\"pr-8\"\n                                onChange={(e) => {\n                                  const validatedValue = validatePercentageInput(e.target.value);\n                                  field.onChange(validatedValue);\n                                  calculateRate();\n                                }}\n                              />\n                              <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-500\">%</span>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"staffCount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Number of Staff (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"text\"\n                            placeholder=\"0\"\n                            onChange={(e) => {\n                              const formattedValue = formatNumberWithCommas(e.target.value);\n                              field.onChange(formattedValue);\n                              calculateRate();\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                        <p className=\"text-xs text-slate-500\">Include yourself if you work in the business</p>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"bg-slate-50 rounded-lg p-4 mt-6 space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-slate-700 font-medium\">Recommended Hourly Rate:</span>\n                      <span className=\"text-2xl font-bold text-primary\">\n                        {formatCurrency(calculatedResults.hourlyRate)}\n                      </span>\n                    </div>\n                    {calculatedResults.staffTargetPerPerson && (\n                      <div className=\"flex items-center justify-between pt-2 border-t border-slate-200\">\n                        <span className=\"text-slate-700 font-medium\">Monthly Target per Staff Member:</span>\n                        <span className=\"text-xl font-bold text-success\">\n                          {formatCurrency(calculatedResults.staffTargetPerPerson)}\n                        </span>\n                      </div>\n                    )}\n                    <p className=\"text-slate-600 text-sm\">This rate covers your expenses and achieves your profit goals</p>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-primary text-white hover:bg-blue-700\"\n                    disabled={saveCalculationMutation.isPending || calculatedResults.hourlyRate === 0}\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {saveCalculationMutation.isPending ? \"Saving...\" : \"Save This Rate\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Calculation History */}\n          {calculationHistory && calculationHistory.length > 0 && (\n            <Card className=\"border border-slate-200 mt-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h3 className=\"text-xl font-bold text-slate-800\">Recent Calculations</h3>\n                    <p className=\"text-slate-600 text-sm mt-1\">Your last {calculationHistory.length} hourly rate calculations</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <History className=\"text-green-600 h-5 w-5\" />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {calculationHistory.map((calculation: any, index: number) => (\n                    <div key={calculation.id} className=\"bg-slate-50 rounded-lg p-4 border\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"h-4 w-4 text-slate-400\" />\n                          <span className=\"text-sm text-slate-500\">\n                            {new Date(calculation.createdAt).toLocaleDateString('en-GB', {\n                              day: 'numeric',\n                              month: 'short',\n                              year: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </span>\n                        </div>\n                        <span className=\"text-lg font-bold text-primary\">\n                          {formatCurrency(parseFloat(calculation.calculatedRate))}\n                        </span>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-sm\">\n                        <div>\n                          <span className=\"text-slate-500\">Expenses:</span>\n                          <div className=\"font-medium\">{formatCurrency(parseFloat(calculation.monthlyExpenses))}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-500\">Profit:</span>\n                          <div className=\"font-medium\">{parseFloat(calculation.desiredProfit)}%</div>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-500\">Hours:</span>\n                          <div className=\"font-medium\">{calculation.weeklyHours}/week</div>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-500\">Tax:</span>\n                          <div className=\"font-medium\">{parseFloat(calculation.taxRate)}%</div>\n                        </div>\n                      </div>\n                      \n                      {calculation.staffTargetPerPerson && (\n                        <div className=\"mt-2 pt-2 border-t border-slate-200\">\n                          <span className=\"text-sm text-slate-500\">Staff Target: </span>\n                          <span className=\"font-medium text-green-600\">\n                            {formatCurrency(parseFloat(calculation.staffTargetPerPerson))}/month\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":19459},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Clock, Percent, Receipt, Package, TrendingUp, DollarSign, FileText, Star, Users, Shield, Crown } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport logoPath from \"@assets/KatieGodfrey-Logo_Black.png\";\nimport katiePhotoPath from \"@assets/katie-photo.png\";\n\n\nconst features = [\n  {\n    icon: Clock,\n    title: \"Hourly Rate Calculator\",\n    description: \"Work out how much it costs you per hour to run your business, so you can check if your treatments are actually priced correctly\"\n  },\n  {\n    icon: Percent,\n    title: \"Profit Margin Calculator\", \n    description: \"Break down the profit in every treatment or training course, so you know exactly what's worth your time\"\n  },\n  {\n    icon: DollarSign,\n    title: \"CEO Numbers Dashboard\",\n    description: \"Katie's famous CEO System helps business owners finally understand their numbers, so they can stop winging it or hiding from the figures\"\n  },\n  {\n    icon: Package,\n    title: \"Stock Budget Calculator\",\n    description: \"Does it feel like all your money is constantly going on stock? Create a monthly budget to help you stay in control and stop overspending\"\n  },\n  {\n    icon: TrendingUp,\n    title: \"Revenue Projections\",\n    description: \"Have income goals you'd love to hit? Let's break them down clearly, so you know exactly how many extra clients you need, and for which treatments\"\n  },\n  {\n    icon: Receipt,\n    title: \"Expense Tracker\",\n    description: \"Keep track of all your business costs and put them into categories to stay on top of your finances\"\n  },\n  {\n    icon: FileText,\n    title: \"Professional Reports\",\n    description: \"Generate PDF reports, CSV exports, and email summaries\"\n  }\n];\n\nconst testimonials = [\n  {\n    name: \"Sarah Mitchell\",\n    business: \"Hair Salon Owner\",\n    quote: \"This tool completely transformed how I price my services. I'm now making 40% more profit!\",\n    rating: 5\n  },\n  {\n    name: \"Emma Johnson\", \n    business: \"Beauty Clinic\",\n    quote: \"The expense tracking alone has saved me thousands. I can see exactly where my money goes.\",\n    rating: 5\n  },\n  {\n    name: \"Lisa Williams\",\n    business: \"Training Academy\",\n    quote: \"Running a training academy means juggling so many numbers. This app keeps everything organised and shows me exactly which courses are most profitable.\",\n    rating: 5\n  }\n];\n\nconst pricingBenefits = [\n  \"Unlimited access to all calculators\",\n  \"Advanced reporting and exports\",\n  \"Multi-business tracking\",\n  \"Professional PDF reports\",\n  \"Email support\",\n  \"Data security and backups\",\n  \"Mobile responsive design\",\n  \"Regular feature updates\"\n];\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div>\n                <h1 className=\"text-xl font-bold text-slate-800\">Salon Success Manager</h1>\n                <p className=\"text-sm text-slate-500\">by Katie Godfrey</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/login\">\n                <Button variant=\"outline\">Sign In</Button>\n              </Link>\n              <Link href=\"/register\">\n                <Button>Subscribe Now</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"text-center lg:text-left\">\n              <div className=\"mb-6 flex justify-center lg:justify-start\">\n                <h2 className=\"text-2xl font-bold text-primary\">Salon Success Manager</h2>\n              </div>\n              <h1 className=\"text-5xl font-bold text-slate-900 mb-6 leading-tight\">\n                Transform Your Salon into a \n                <span className=\"text-primary\"> Profitable Business</span>\n              </h1>\n              \n              <p className=\"text-xl text-slate-600 mb-8 leading-relaxed\">\n                Stop guessing your prices. Start managing like a CEO. Get the financial clarity and tools you need \n                to build a successful salon, clinic, or training academy.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start\">\n                <Link href=\"/register\">\n                  <Button size=\"lg\" className=\"text-lg px-8 py-4\">\n                    Subscribe Now\n                    <span className=\"ml-2\">→</span>\n                  </Button>\n                </Link>\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-4\">\n                  Watch Demo\n                </Button>\n              </div>\n              <p className=\"text-sm text-slate-500 mt-4\">\n                £23.97/month • Cancel anytime • Have a promo code? Enter during signup\n              </p>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"bg-white rounded-xl shadow-2xl overflow-hidden\">\n                <div className=\"bg-gradient-to-r from-primary to-primary/80 h-3\"></div>\n                <div className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <DollarSign className=\"w-4 h-4 text-primary\" />\n                        </div>\n                        <span className=\"font-medium\">Monthly Revenue</span>\n                      </div>\n                      <span className=\"text-2xl font-bold text-green-600\">£12,450</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <Percent className=\"w-4 h-4 text-blue-600\" />\n                        </div>\n                        <span className=\"font-medium\">Profit Margin</span>\n                      </div>\n                      <span className=\"text-2xl font-bold text-blue-600\">68%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                          <Clock className=\"w-4 h-4 text-purple-600\" />\n                        </div>\n                        <span className=\"font-medium\">Hourly Rate</span>\n                      </div>\n                      <span className=\"text-2xl font-bold text-purple-600\">£85</span>\n                    </div>\n                  </div>\n                  <div className=\"mt-6 h-32 bg-gradient-to-r from-primary/10 to-blue-100 rounded-lg flex items-end justify-center\">\n                    <div className=\"flex items-end gap-2 pb-4\">\n                      {[40, 65, 45, 80, 60, 90, 75].map((height, i) => (\n                        <div\n                          key={i}\n                          className=\"bg-primary rounded-t\"\n                          style={{ height: `${height}%`, width: '12px' }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Floating Cards */}\n              <div className=\"absolute -top-4 -left-4 bg-white rounded-lg shadow-lg p-3 border\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                    <TrendingUp className=\"w-3 h-3 text-green-600\" />\n                  </div>\n                  <span className=\"text-sm font-medium\">+32% Growth</span>\n                </div>\n              </div>\n              \n              <div className=\"absolute -bottom-4 -right-4 bg-white rounded-lg shadow-lg p-3 border\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <Users className=\"w-3 h-3 text-blue-600\" />\n                  </div>\n                  <span className=\"text-sm font-medium\">280 Clients</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonial Section */}\n      <section className=\"py-16 px-6 bg-white\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <div className=\"bg-blue-50 border-l-4 border-primary p-8 rounded-r-lg\">\n            <div className=\"flex items-start gap-6\">\n              <img \n                src={katiePhotoPath} \n                alt=\"Katie Godfrey\" \n                className=\"w-20 h-20 rounded-full object-cover flex-shrink-0\"\n              />\n              <div className=\"flex-1\">\n                <p className=\"text-lg text-slate-700 italic leading-relaxed mb-4\">\n                  \"So many professionals come to me confused about why they're making money, but have nothing left at the end of the month. Nine times out of ten, it comes down to incorrect pricing and not knowing their break-even point or the real cost of running their business day-to-day. This app takes the guesswork out of your numbers, no spreadsheets, no confusing accountant jargon. Just simple, clear insights to help you understand exactly how to price, where your profit is, and how to finally make more money in your business.\"\n                </p>\n                <p className=\"text-sm font-semibold text-primary\">- Katie Godfrey, Business Strategist</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* App Preview Section */}\n      <section className=\"py-20 px-6 bg-slate-50\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              See Your Business Dashboard in Action\n            </h2>\n            <p className=\"text-lg text-slate-600\">\n              Get real-time insights and manage every aspect of your salon business\n            </p>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"bg-white rounded-xl shadow-2xl overflow-hidden border\">\n              {/* Mock Browser Header */}\n              <div className=\"bg-slate-100 px-4 py-3 flex items-center gap-2\">\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                </div>\n                <div className=\"flex-1 bg-white rounded px-3 py-1 mx-4\">\n                  <span className=\"text-sm text-slate-500\">salon-success-manager.app</span>\n                </div>\n              </div>\n              \n              {/* Mock Dashboard */}\n              <div className=\"p-6 bg-gradient-to-br from-white to-slate-50\">\n                <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n                  <div className=\"bg-white rounded-lg p-4 shadow-sm border\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-slate-600\">This Month's Revenue</span>\n                      <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-slate-900\">£18,240</div>\n                    <div className=\"text-sm text-green-600\">+24% from last month</div>\n                  </div>\n                  \n                  <div className=\"bg-white rounded-lg p-4 shadow-sm border\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-slate-600\">Average Profit Margin</span>\n                      <Percent className=\"w-4 h-4 text-blue-600\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-slate-900\">72%</div>\n                    <div className=\"text-sm text-blue-600\">Above industry average</div>\n                  </div>\n                  \n                  <div className=\"bg-white rounded-lg p-4 shadow-sm border\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-slate-600\">Optimal Hourly Rate</span>\n                      <Clock className=\"w-4 h-4 text-purple-600\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-slate-900\">£95</div>\n                    <div className=\"text-sm text-purple-600\">Based on your data</div>\n                  </div>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"bg-white rounded-lg p-4 shadow-sm border\">\n                    <h3 className=\"font-semibold mb-3\">Recent Calculations</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-sm\">Hair Cut & Blow Dry</span>\n                        <span className=\"font-medium\">£45</span>\n                      </div>\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-sm\">Full Colour Treatment</span>\n                        <span className=\"font-medium\">£120</span>\n                      </div>\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-sm\">Wedding Package</span>\n                        <span className=\"font-medium\">£350</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-white rounded-lg p-4 shadow-sm border\">\n                    <h3 className=\"font-semibold mb-3\">Expense Overview</h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-sm\">Product Supplies</span>\n                        <span className=\"text-red-600\">-£1,240</span>\n                      </div>\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-sm\">Rent & Utilities</span>\n                        <span className=\"text-red-600\">-£2,400</span>\n                      </div>\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-sm\">Marketing</span>\n                        <span className=\"text-red-600\">-£480</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 px-6 bg-white\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              Everything You Need to Manage Your Business\n            </h2>\n            <p className=\"text-lg text-slate-600\">\n              Professional tools designed specifically for salon and clinic owners\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"border-0 shadow-md hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                      <Icon className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-base leading-relaxed\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 px-6 relative\">\n        {/* Luxury Salon Background */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-slate-900/95 to-slate-800/90\">\n          <div \n            className=\"absolute inset-0 bg-cover bg-center bg-no-repeat opacity-15\"\n            style={{\n              backgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 800'%3E%3Cdefs%3E%3CradialGradient id='light1' cx='20%25' cy='30%25' r='15%25'%3E%3Cstop offset='0%25' style='stop-color:%23fbbf24;stop-opacity:0.8'/%3E%3Cstop offset='100%25' style='stop-color:%23fbbf24;stop-opacity:0'/%3E%3C/radialGradient%3E%3CradialGradient id='light2' cx='80%25' cy='20%25' r='12%25'%3E%3Cstop offset='0%25' style='stop-color:%23f59e0b;stop-opacity:0.6'/%3E%3Cstop offset='100%25' style='stop-color:%23f59e0b;stop-opacity:0'/%3E%3C/radialGradient%3E%3ClinearGradient id='mirror' x1='0%25' y1='0%25' x2='100%25' y2='0%25'%3E%3Cstop offset='0%25' style='stop-color:%23e5e7eb;stop-opacity:0.3'/%3E%3Cstop offset='50%25' style='stop-color:%23f9fafb;stop-opacity:0.8'/%3E%3Cstop offset='100%25' style='stop-color:%23e5e7eb;stop-opacity:0.3'/%3E%3C/linearGradient%3E%3C/defs%3E%3Crect width='1200' height='800' fill='%23111827'/%3E%3Cellipse cx='200' cy='240' rx='120' ry='8' fill='%23374151' opacity='0.4'/%3E%3Crect x='50' y='150' width='300' height='180' rx='15' fill='url(%23mirror)' opacity='0.6'/%3E%3Crect x='400' y='200' width='80' height='300' rx='40' fill='%23d1d5db' opacity='0.3'/%3E%3Crect x='550' y='180' width='100' height='60' rx='8' fill='%239ca3af' opacity='0.4'/%3E%3Ccircle cx='750' cy='200' r='25' fill='url(%23light1)'/%3E%3Ccircle cx='950' cy='150' r='20' fill='url(%23light2)'/%3E%3Crect x='800' y='300' width='200' height='120' rx='10' fill='%236b7280' opacity='0.2'/%3E%3Cpath d='M100 500 Q300 480 500 500 T900 520' stroke='%239ca3af' stroke-width='2' fill='none' opacity='0.3'/%3E%3Crect x='700' y='450' width='60' height='80' rx='5' fill='%23d1d5db' opacity='0.3'/%3E%3C/svg%3E\")`\n            }}\n          />\n        </div>\n        \n        <div className=\"container mx-auto max-w-6xl relative z-10\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-white mb-4\">\n              Trusted by Salon Owners Across the World\n            </h2>\n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              {[...Array(5)].map((_, i) => (\n                <Star key={i} className=\"w-5 h-5 fill-yellow-400 text-yellow-400\" />\n              ))}\n              <span className=\"ml-2 text-slate-200\">4.9/5 from 200+ reviews</span>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"border-0 shadow-md hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary/20 to-primary/10 rounded-full flex items-center justify-center mr-4\">\n                      <span className=\"text-primary font-bold text-lg\">\n                        {testimonial.name.charAt(0)}\n                      </span>\n                    </div>\n                    <div className=\"flex\">\n                      {[...Array(testimonial.rating)].map((_, i) => (\n                        <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                      ))}\n                    </div>\n                  </div>\n                  <p className=\"text-slate-700 mb-4 italic\">\"{testimonial.quote}\"</p>\n                  <div>\n                    <p className=\"font-semibold text-slate-900\">{testimonial.name}</p>\n                    <p className=\"text-sm text-slate-500\">{testimonial.business}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing */}\n      <section className=\"py-20 px-6 bg-white\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">\n              Simple, Transparent Pricing\n            </h2>\n            <p className=\"text-lg text-slate-600\">\n              One plan, all features, incredible value\n            </p>\n          </div>\n\n          <Card className=\"border-2 border-primary shadow-xl\">\n            <CardHeader className=\"text-center pb-2\">\n              <Badge variant=\"default\" className=\"w-fit mx-auto mb-4\">\n                Most Popular\n              </Badge>\n              <CardTitle className=\"text-2xl\">Professional Plan</CardTitle>\n              <div className=\"flex items-center justify-center gap-2 mt-4\">\n                <span className=\"text-4xl font-bold text-slate-900\">£23.97</span>\n                <span className=\"text-slate-500\">/month</span>\n              </div>\n              <CardDescription className=\"text-base mt-2\">\n                Everything you need to manage your business professionally\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"grid md:grid-cols-2 gap-4 mb-8\">\n                {pricingBenefits.map((benefit, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <Check className=\"w-5 h-5 text-green-600 flex-shrink-0\" />\n                    <span className=\"text-slate-700\">{benefit}</span>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"space-y-4\">\n                <Link href=\"/register\">\n                  <Button size=\"lg\" className=\"w-full text-lg py-4\">\n                    Subscribe Now - £23.97/month\n                  </Button>\n                </Link>\n                <p className=\"text-center text-sm text-slate-500\">\n                  Cancel anytime • Have a promo code? Enter during signup\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-6 bg-primary text-white\">\n        <div className=\"container mx-auto max-w-4xl text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Ready to Transform Your Business?\n          </h2>\n          <p className=\"text-xl mb-8 text-primary-foreground/90\">\n            Join hundreds of salon owners who've increased their profits with data-driven decisions\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"text-lg px-8 py-4\">\n                Subscribe Now\n              </Button>\n            </Link>\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-4 border-white text-white hover:bg-white hover:text-primary\">\n              Contact Sales\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 text-white py-12 px-6\">\n        <div className=\"container mx-auto max-w-6xl\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div>\n              <div className=\"mb-4\">\n                <h3 className=\"font-bold\">Salon Success Manager</h3>\n                <p className=\"text-sm text-slate-400\">by Katie Godfrey</p>\n              </div>\n              <p className=\"text-slate-400 text-sm\">\n                Professional business management tools for salon and clinic owners.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-sm text-slate-400\">\n                <li><a href=\"https://kgbusinessmentor.com/\" className=\"hover:text-white\">About Katie</a></li>\n                <li><a href=\"mailto:info@kgbusinessmentor.com\" className=\"hover:text-white\">Contact</a></li>\n                <li><Link href=\"/privacy\" className=\"hover:text-white\">Privacy Policy</Link></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Get Started</h4>\n              <ul className=\"space-y-2 text-sm text-slate-400\">\n                <li><Link href=\"/register\" className=\"hover:text-white\">Subscribe</Link></li>\n                <li><Link href=\"/login\" className=\"hover:text-white\">Sign In</Link></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-slate-800 mt-8 pt-8 text-center text-sm text-slate-400\">\n            <p>&copy; 2025 Katie Godfrey Business Mentor. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":26233},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      console.log('Making login request with:', data);\n      const response = await apiRequest(\"POST\", \"/api/v2/auth/login\", data);\n      console.log('Login response received:', response.status);\n      return response;\n    },\n    onSuccess: () => {\n      console.log('Login mutation successful');\n      queryClient.invalidateQueries({ queryKey: [\"/api/v2/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      console.log('New login mutation error:', error);\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    console.log('Login form submitted with data:', data);\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n          <CardDescription className=\"text-center\">\n            Sign in to your Salon Success Manager account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your email\"\n                        type=\"email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your password\"\n                        type=\"password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-4 text-center\">\n            <Link href=\"/forgot-password\">\n              <Button variant=\"link\" className=\"text-sm text-pink-600 hover:text-pink-700 p-0\">\n                Forgot your password?\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"mt-4 text-center text-sm\">\n            Don't have an account?{\" \"}\n            <Link href=\"/register\" className=\"text-primary hover:underline\">\n              Sign up\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4585},"client/src/pages/money-pots.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Edit2, Trash2, Palette } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertMoneyPotSchema } from \"@shared/schema\";\nimport type { MoneyPot } from \"@shared/schema\";\n\nconst moneyPotFormSchema = insertMoneyPotSchema\n  .omit({ userId: true })\n  .extend({\n    percentage: z.string().min(1, \"Percentage is required\")\n      .refine((val) => {\n        const num = parseFloat(val);\n        return !isNaN(num) && num > 0 && num <= 100;\n      }, \"Percentage must be between 0.01 and 100\")\n  });\n\ntype MoneyPotFormData = z.infer<typeof moneyPotFormSchema>;\n\nconst colorOptions = [\n  { value: \"#3b82f6\", label: \"Blue\", color: \"#3b82f6\" },\n  { value: \"#ef4444\", label: \"Red\", color: \"#ef4444\" },\n  { value: \"#10b981\", label: \"Green\", color: \"#10b981\" },\n  { value: \"#f59e0b\", label: \"Orange\", color: \"#f59e0b\" },\n  { value: \"#8b5cf6\", label: \"Purple\", color: \"#8b5cf6\" },\n  { value: \"#06b6d4\", label: \"Cyan\", color: \"#06b6d4\" },\n  { value: \"#84cc16\", label: \"Lime\", color: \"#84cc16\" },\n  { value: \"#f97316\", label: \"Orange\", color: \"#f97316\" },\n];\n\nexport default function MoneyPots() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingPot, setEditingPot] = useState<MoneyPot | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: moneyPots = [] } = useQuery({\n    queryKey: [\"/api/money-pots\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: MoneyPotFormData) => {\n      const response = await fetch(\"/api/money-pots\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create money pot\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/money-pots\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Money pot created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create money pot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: MoneyPotFormData }) => {\n      const response = await fetch(`/api/money-pots/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to update money pot\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/money-pots\"] });\n      setEditingPot(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Money pot updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update money pot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/money-pots/${id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete money pot\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/money-pots\"] });\n      toast({\n        title: \"Success\",\n        description: \"Money pot deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete money pot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<MoneyPotFormData>({\n    resolver: zodResolver(moneyPotFormSchema),\n    defaultValues: {\n      name: \"\",\n      percentage: \"\",\n      color: \"#3b82f6\",\n      sortOrder: 0,\n    },\n    mode: \"onChange\",\n  });\n\n  const editForm = useForm<MoneyPotFormData>({\n    resolver: zodResolver(moneyPotFormSchema),\n  });\n\n  const onSubmit = (data: MoneyPotFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const onEdit = (pot: MoneyPot) => {\n    setEditingPot(pot);\n    editForm.reset({\n      name: pot.name,\n      percentage: pot.percentage.toString(),\n      color: pot.color || \"#3b82f6\",\n      sortOrder: pot.sortOrder || 0,\n    });\n  };\n\n  const onUpdate = (data: MoneyPotFormData) => {\n    if (editingPot) {\n      updateMutation.mutate({ id: editingPot.id, data });\n    }\n  };\n\n  const totalPercentage = (moneyPots as MoneyPot[]).reduce((sum: number, pot: MoneyPot) => sum + parseFloat(pot.percentage.toString()), 0);\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Money Pots</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Create custom categories to allocate your income. Set percentages for VAT, profit, expenses, and more.\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Money Pot\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create Money Pot</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., VAT, Profit, Equipment Fund\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"percentage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Percentage (%)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0.01\"\n                          max=\"100\"\n                          placeholder=\"20.00\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"color\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {colorOptions.map((color) => (\n                            <SelectItem key={color.value} value={color.value}>\n                              <div className=\"flex items-center gap-2\">\n                                <div \n                                  className=\"w-4 h-4 rounded-full\" \n                                  style={{ backgroundColor: color.color }}\n                                />\n                                {color.label}\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending}>\n                    {createMutation.isPending ? \"Creating...\" : \"Create\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {totalPercentage > 0 && (\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Allocation Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span>Total Allocated:</span>\n              <Badge variant={totalPercentage > 100 ? \"destructive\" : \"default\"}>\n                {totalPercentage.toFixed(2)}%\n              </Badge>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className={`h-2 rounded-full ${totalPercentage > 100 ? 'bg-red-600' : 'bg-blue-600'}`}\n                style={{ width: `${Math.min(totalPercentage, 100)}%` }}\n              />\n            </div>\n            {totalPercentage > 100 && (\n              <p className=\"text-red-600 text-sm mt-2\">\n                Warning: Total allocation exceeds 100%\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {(moneyPots as MoneyPot[]).map((pot: MoneyPot) => (\n          <Card key={pot.id} className=\"relative\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-4 h-4 rounded-full\" \n                    style={{ backgroundColor: pot.color || \"#3b82f6\" }}\n                  />\n                  <CardTitle className=\"text-lg\">{pot.name}</CardTitle>\n                </div>\n                <div className=\"flex gap-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEdit(pot)}\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => deleteMutation.mutate(pot.id)}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold\">{pot.percentage}%</div>\n                <p className=\"text-muted-foreground text-sm\">of income</p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {editingPot && (\n        <Dialog open={!!editingPot} onOpenChange={(open) => !open && setEditingPot(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Money Pot</DialogTitle>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onUpdate)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., VAT, Profit, Equipment Fund\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"percentage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Percentage (%)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0.01\"\n                          max=\"100\"\n                          placeholder=\"20.00\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"color\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Color</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value || \"#3b82f6\"}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {colorOptions.map((color) => (\n                            <SelectItem key={color.value} value={color.value}>\n                              <div className=\"flex items-center gap-2\">\n                                <div \n                                  className=\"w-4 h-4 rounded-full\" \n                                  style={{ backgroundColor: color.color }}\n                                />\n                                {color.label}\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setEditingPot(null)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateMutation.isPending}>\n                    {updateMutation.isPending ? \"Updating...\" : \"Update\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}","size_bytes":15566},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <div className=\"container mx-auto max-w-4xl px-6 py-12\">\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" className=\"mb-6\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n          <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">Privacy Policy</h1>\n          <p className=\"text-slate-600\">Last updated: June 2025</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-8 space-y-8\">\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Introduction</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              At Salon Success Manager by Katie Godfrey, we are committed to protecting your privacy and ensuring the security of your personal information. This Privacy Policy explains how we collect, use, and safeguard your data when you use our business management platform.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Information We Collect</h2>\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-slate-800\">Personal Information</h3>\n              <ul className=\"list-disc list-inside text-slate-700 space-y-2 ml-4\">\n                <li>Name and contact details (email address)</li>\n                <li>Business information (business name, type, location)</li>\n                <li>Payment information (processed securely through Stripe)</li>\n                <li>Account preferences and settings</li>\n              </ul>\n              \n              <h3 className=\"text-lg font-medium text-slate-800 mt-6\">Business Data</h3>\n              <ul className=\"list-disc list-inside text-slate-700 space-y-2 ml-4\">\n                <li>Financial calculations and projections</li>\n                <li>Treatment and service pricing information</li>\n                <li>Business expenses and income records</li>\n                <li>Stock purchase data and budgets</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">How We Use Your Information</h2>\n            <ul className=\"list-disc list-inside text-slate-700 space-y-2 ml-4\">\n              <li>Provide and maintain our business management tools</li>\n              <li>Process payments and manage subscriptions</li>\n              <li>Send important account and service updates</li>\n              <li>Provide customer support and respond to enquiries</li>\n              <li>Improve our platform and develop new features</li>\n              <li>Comply with legal obligations and protect our rights</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Data Security</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-4\">\n              We implement industry-standard security measures to protect your personal and business data:\n            </p>\n            <ul className=\"list-disc list-inside text-slate-700 space-y-2 ml-4\">\n              <li>Secure SSL encryption for all data transmission</li>\n              <li>Regular security audits and monitoring</li>\n              <li>Restricted access to personal information</li>\n              <li>Secure payment processing through Stripe</li>\n              <li>Regular data backups and recovery procedures</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Data Sharing</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-4\">\n              We do not sell, trade, or rent your personal information to third parties. We may share limited information only in the following circumstances:\n            </p>\n            <ul className=\"list-disc list-inside text-slate-700 space-y-2 ml-4\">\n              <li>With payment processors (Stripe) to handle transactions</li>\n              <li>With email service providers for essential communications</li>\n              <li>When required by law or to protect our legal rights</li>\n              <li>With your explicit consent for specific purposes</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Your Rights</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-4\">\n              Under UK data protection laws, you have the following rights:\n            </p>\n            <ul className=\"list-disc list-inside text-slate-700 space-y-2 ml-4\">\n              <li>Access your personal data and understand how it's used</li>\n              <li>Correct inaccurate or incomplete information</li>\n              <li>Request deletion of your personal data</li>\n              <li>Object to processing of your personal data</li>\n              <li>Request data portability</li>\n              <li>Withdraw consent at any time</li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Cookies and Tracking</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We use essential cookies to ensure our platform functions properly and to maintain your login session. We do not use tracking cookies for advertising purposes. You can control cookie settings through your browser preferences.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Data Retention</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We retain your personal data only as long as necessary to provide our services and comply with legal obligations. Business data calculations and records are kept for as long as your account remains active, plus a reasonable period thereafter for backup and legal purposes.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">International Data Transfers</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              Your data is primarily stored and processed within the UK and EU. Any international transfers are conducted with appropriate safeguards in accordance with UK data protection laws.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Changes to This Policy</h2>\n            <p className=\"text-slate-700 leading-relaxed\">\n              We may update this Privacy Policy periodically to reflect changes in our practices or applicable laws. We will notify you of any material changes via email or through our platform.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-4\">Contact Us</h2>\n            <p className=\"text-slate-700 leading-relaxed mb-4\">\n              If you have any questions about this Privacy Policy or wish to exercise your data protection rights, please contact us:\n            </p>\n            <div className=\"bg-slate-50 p-6 rounded-lg\">\n              <p className=\"text-slate-700 mb-2\"><strong>Katie Godfrey Business Mentor</strong></p>\n              <p className=\"text-slate-700 mb-2\">Email: <a href=\"mailto:info@kgbusinessmentor.com\" className=\"text-primary hover:underline\">info@kgbusinessmentor.com</a></p>\n              <p className=\"text-slate-700\">Website: <a href=\"https://kgbusinessmentor.com/\" className=\"text-primary hover:underline\">kgbusinessmentor.com</a></p>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8006},"client/src/pages/profit-margin-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Header from \"@/components/header\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { calculateTreatmentProfit, formatPercentage } from \"@/lib/utils\";\nimport { Percent, Plus, Trash2, Bath } from \"lucide-react\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport Paywall from \"@/components/paywall\";\n\nconst treatmentSchema = z.object({\n  name: z.string().min(1, \"Treatment name is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  duration: z.string().min(1, \"Duration is required\"),\n  overheadCost: z.string().min(1, \"Overhead cost is required\"),\n});\n\ntype TreatmentForm = z.infer<typeof treatmentSchema>;\n\nexport default function ProfitMarginCalculator() {\n  const { formatCurrency } = useCurrency();\n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  const [calculatedProfit, setCalculatedProfit] = useState({\n    totalCosts: 0,\n    netProfit: 0,\n    profitMargin: 0,\n    autoOverheadCost: 0,\n  });\n  const { toast } = useToast();\n\n  const { data: treatments, isLoading } = useQuery({\n    queryKey: [\"/api/treatments\"],\n  });\n\n  const { data: latestHourlyRate } = useQuery({\n    queryKey: [\"/api/hourly-rate-calculations/latest\"],\n  });\n\n  const form = useForm<TreatmentForm>({\n    resolver: zodResolver(treatmentSchema),\n    defaultValues: {\n      name: \"\",\n      price: \"\",\n      duration: \"\",\n      overheadCost: \"\",\n    },\n  });\n\n  // Auto-calculate overhead cost when duration changes\n  const watchedDuration = form.watch(\"duration\");\n  \n  useEffect(() => {\n    if (watchedDuration && latestHourlyRate) {\n      const duration = parseInt(watchedDuration);\n      const autoOverhead = calculateOverheadCost(duration);\n      if (autoOverhead > 0) {\n        form.setValue(\"overheadCost\", autoOverhead.toFixed(2));\n        calculateProfit();\n      }\n    }\n  }, [watchedDuration, latestHourlyRate]);\n\n  const createTreatmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/treatments\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/treatments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics\"] });\n      form.reset();\n      setCalculatedProfit({ totalCosts: 0, netProfit: 0, profitMargin: 0, autoOverheadCost: 0 });\n      toast({\n        title: \"Success\",\n        description: \"Treatment added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add treatment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTreatmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest(\"DELETE\", `/api/treatments/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/treatments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Treatment deleted successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete treatment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateOverheadCost = (duration: number): number => {\n    if (!latestHourlyRate || !(latestHourlyRate as any).calculatedRate) return 0;\n    const hourlyRate = parseFloat((latestHourlyRate as any).calculatedRate.toString());\n    const hours = duration / 60; // Convert minutes to hours\n    return hourlyRate * hours;\n  };\n\n  const calculateProfit = () => {\n    const values = form.getValues();\n    const price = parseFloat(values.price) || 0;\n    const duration = parseFloat(values.duration) || 0;\n    \n    // Calculate overhead cost automatically based on duration and hourly rate\n    const autoOverheadCost = calculateOverheadCost(duration);\n    const manualOverheadCost = parseFloat(values.overheadCost) || 0;\n    \n    // Use manual overhead if provided, otherwise use auto-calculated\n    const overheadCost = manualOverheadCost > 0 ? manualOverheadCost : autoOverheadCost;\n\n    const netProfit = price - overheadCost;\n    const profitMargin = price > 0 ? (netProfit / price) * 100 : 0;\n    \n    setCalculatedProfit({\n      totalCosts: overheadCost,\n      netProfit,\n      profitMargin,\n      autoOverheadCost\n    });\n  };\n\n  const onSubmit = (data: TreatmentForm) => {\n    const duration = parseInt(data.duration);\n    const autoOverheadCost = calculateOverheadCost(duration);\n    const manualOverheadCost = parseFloat(data.overheadCost) || 0;\n    const finalOverheadCost = manualOverheadCost > 0 ? manualOverheadCost : autoOverheadCost;\n\n    const treatmentData = {\n      name: data.name,\n      price: parseFloat(data.price).toString(),\n      duration: duration,\n      overheadCost: finalOverheadCost.toString(),\n    };\n\n    createTreatmentMutation.mutate(treatmentData);\n  };\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"Profit Margin Calculator\" \n          description=\"Analyze treatment profitability and optimize your pricing strategy\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!(subscriptionStatus as any)?.active) {\n    return (\n      <>\n        <Header \n          title=\"Profit Margin Calculator\" \n          description=\"Analyze treatment profitability and optimize your pricing strategy\" \n        />\n        <Paywall \n          title=\"Profit Margin Calculator\"\n          description=\"Maximize your treatment profitability\"\n          feature=\"profit margin analysis\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header \n        title=\"Treatment Profit Calculator\" \n        description=\"Calculate profit margins for individual treatments and manage your service pricing\" \n      />\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Calculator Form */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Add New Treatment or Course</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Calculate profit margins for individual treatments or courses</p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Percent className=\"text-success h-5 w-5\" />\n                </div>\n              </div>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Treatment or Course Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"e.g., Deep Cleansing Facial\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Treatment Price</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500\">£</span>\n                              <Input\n                                {...field}\n                                type=\"number\"\n                                placeholder=\"150\"\n                                className=\"pl-8\"\n                                onChange={(e) => {\n                                  field.onChange(e);\n                                  calculateProfit();\n                                }}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"duration\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Time Required (min)</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"number\"\n                              placeholder=\"90\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"overheadCost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Overhead Cost (Auto-calculated from hourly rate)</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500\">£</span>\n                            <Input\n                              {...field}\n                              type=\"number\"\n                              className=\"pl-8 bg-slate-50\"\n                              readOnly\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                        <p className=\"text-xs text-slate-500\">\n                          {latestHourlyRate ? \n                            `Automatically calculated: ${formatCurrency((latestHourlyRate as any)?.calculatedRate || 0)}/hour × treatment duration` :\n                            \"Complete the hourly rate calculator first to enable auto-calculation\"\n                          }\n                        </p>\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"bg-slate-50 rounded-lg p-4 space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-700\">Total Costs:</span>\n                      <span className=\"font-semibold text-slate-800\">\n                        {formatCurrency(calculatedProfit.totalCosts)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-700\">Net Profit:</span>\n                      <span className=\"font-semibold text-success\">\n                        {formatCurrency(calculatedProfit.netProfit)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center pt-2 border-t border-slate-200\">\n                      <span className=\"text-slate-700 font-medium\">Profit Margin:</span>\n                      <span className=\"text-2xl font-bold text-success\">\n                        {formatPercentage(calculatedProfit.profitMargin)}\n                      </span>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-success text-white hover:bg-green-700\"\n                    disabled={createTreatmentMutation.isPending}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    {createTreatmentMutation.isPending ? \"Adding...\" : \"Add to Treatment List\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Treatment List */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Your Treatments</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Manage your service offerings</p>\n                </div>\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Bath className=\"text-purple-600 h-5 w-5\" />\n                </div>\n              </div>\n\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {isLoading ? (\n                  <div className=\"text-center py-8 text-slate-500\">Loading treatments...</div>\n                ) : (treatments as any)?.length ? (\n                  (treatments as any).map((treatment: any) => (\n                    <div key={treatment.id} className=\"p-4 bg-slate-50 rounded-lg\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <h4 className=\"font-semibold text-slate-800\">{treatment.name}</h4>\n                          <p className=\"text-sm text-slate-600\">{treatment.duration} minutes</p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-lg font-bold text-slate-800\">\n                            {formatCurrency(treatment.price)}\n                          </span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteTreatmentMutation.mutate(treatment.id)}\n                            disabled={deleteTreatmentMutation.isPending}\n                            className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        <div>\n                          <span className=\"text-slate-500\">Overhead Cost:</span>\n                          <p className=\"font-medium\">{formatCurrency(treatment.overheadCost)}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-500\">Profit Margin:</span>\n                          <p className=\"font-bold text-success\">{formatPercentage(treatment.profitMargin)}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-slate-500\">\n                    No treatments added yet. Create your first treatment!\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":16267},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst registerFormSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(8, \"Password confirmation is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerFormSchema>;\n\nconst businessTypes = [\n  \"Hair Salon\",\n  \"Beauty Salon\", \n  \"Nail Salon\",\n  \"Spa & Wellness\",\n  \"Barbershop\",\n  \"Aesthetics Clinic\",\n  \"Training Academy\",\n  \"Mobile Beauty\",\n  \"Other\"\n];\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerFormSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      name: \"\",\n      businessType: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: (data: RegisterForm) => {\n      // Remove confirmPassword before sending to API\n      const { confirmPassword, ...registerData } = data;\n      return apiRequest(\"POST\", \"/api/auth/register\", registerData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully. Complete your subscription to access business tools.\",\n      });\n      setLocation(\"/subscribe\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Start growing your salon business today\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your full name\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your email\"\n                        type=\"email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          placeholder=\"Create a password (min 8 characters)\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-500\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          placeholder=\"Confirm your password\"\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-500\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"businessType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Business Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select your business type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {businessTypes.map((type) => (\n                          <SelectItem key={type} value={type}>\n                            {type}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-4 text-center text-sm\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary hover:underline\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8657},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/header\";\nimport { formatPercentage } from \"@/lib/utils\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { FileText, Download, Mail, TrendingUp, DollarSign, Percent, Clock } from \"lucide-react\";\nimport jsPDF from 'jspdf';\nimport Paywall from \"@/components/paywall\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport type { Treatment, Expense, HourlyRateCalculation } from \"@shared/schema\";\n\nexport default function Reports() {\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n  const [isEmailPending, setIsEmailPending] = useState(false);\n\n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/metrics\"],\n  });\n\n  const { data: treatments = [], isLoading: treatmentsLoading } = useQuery<Treatment[]>({\n    queryKey: [\"/api/treatments\"],\n  });\n\n  const { data: expenses = [], isLoading: expensesLoading } = useQuery<Expense[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: hourlyCalculations = [], isLoading: calculationsLoading } = useQuery<HourlyRateCalculation[]>({\n    queryKey: [\"/api/hourly-rate-calculations\"],\n  });\n\n  const isLoading = metricsLoading || treatmentsLoading || expensesLoading || calculationsLoading;\n\n  // Calculate derived values for exports\n  const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount.toString()), 0);\n  const avgTreatmentPrice = treatments.length > 0 \n    ? treatments.reduce((sum, t) => sum + parseFloat(t.price.toString()), 0) / treatments.length \n    : 0;\n\n  const handleExportCSV = () => {\n    const reportData = [\n      ['Metric', 'Value'],\n      ['Current Hourly Rate', formatCurrency(metrics?.hourlyRate || 0)],\n      ['Average Profit Margin', formatPercentage(metrics?.avgProfitMargin || 0)],\n      ['Monthly Revenue', formatCurrency(metrics?.monthlyRevenue || 0)],\n      ['Active Treatments', (metrics?.activeTreatments || 0).toString()],\n      ['Total Expenses', formatCurrency(totalExpenses)],\n      ['Average Treatment Price', formatCurrency(avgTreatmentPrice)],\n      [''],\n      ['Treatment Breakdown', ''],\n      ['Name', 'Price', 'Duration (min)', 'Profit Margin'],\n      ...treatments.map(t => [\n        t.name,\n        formatCurrency(t.price),\n        t.duration.toString(),\n        t.profitMargin\n      ]),\n      [''],\n      ['Recent Expenses', ''],\n      ['Category', 'Amount', 'Date', 'Description'],\n      ...expenses.slice(0, 10).map(e => [\n        e.category,\n        formatCurrency(e.amount),\n        new Date(e.date).toLocaleDateString(),\n        e.description || ''\n      ])\n    ];\n\n    const csvContent = reportData.map(row => \n      row.map(cell => `\"${cell}\"`).join(',')\n    ).join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `business-report-${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const handleExportPDF = () => {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    let yPosition = 20;\n    \n    // Header\n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Business Performance Report', pageWidth / 2, yPosition, { align: 'center' });\n    yPosition += 15;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });\n    yPosition += 25;\n    \n    // Key Metrics Section\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Key Metrics', 15, yPosition);\n    yPosition += 15;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    // Check if metrics exists and has properties\n    if (metrics && typeof metrics === 'object') {\n      const metricsData = [\n        `Hourly Rate: ${formatCurrency(metrics.hourlyRate || 0)}`,\n        `Avg Profit Margin: ${formatPercentage(metrics.avgProfitMargin || 0)}`,\n        `Monthly Revenue: ${formatCurrency(metrics.monthlyRevenue || 0)}`,\n        `Active Treatments: ${metrics.activeTreatments || 0}`\n      ];\n      \n      metricsData.forEach(metric => {\n        doc.text(metric, 15, yPosition);\n        yPosition += 10;\n      });\n    }\n    \n    yPosition += 15;\n    \n    // Treatments Section\n    if (treatments && treatments.length > 0) {\n      doc.setFontSize(16);\n      doc.setFont('helvetica', 'bold');\n      doc.text('Treatment Performance', 15, yPosition);\n      yPosition += 15;\n      \n      doc.setFontSize(12);\n      doc.setFont('helvetica', 'normal');\n      \n      treatments.forEach(treatment => {\n        if (yPosition > pageHeight - 20) {\n          doc.addPage();\n          yPosition = 20;\n        }\n        \n        doc.text(`${treatment.name} - ${formatCurrency(treatment.price)} (${treatment.duration} min) - ${treatment.profitMargin}%`, 15, yPosition);\n        yPosition += 10;\n      });\n    }\n    \n    yPosition += 15;\n    \n    // Recent Expenses Section\n    if (expenses && expenses.length > 0) {\n      doc.setFontSize(16);\n      doc.setFont('helvetica', 'bold');\n      doc.text('Recent Expenses', 15, yPosition);\n      yPosition += 15;\n      \n      doc.setFontSize(12);\n      doc.setFont('helvetica', 'normal');\n      \n      expenses.slice(0, 10).forEach(expense => {\n        if (yPosition > pageHeight - 20) {\n          doc.addPage();\n          yPosition = 20;\n        }\n        \n        const expenseDate = new Date(expense.date).toLocaleDateString();\n        doc.text(`${expense.category} - ${formatCurrency(expense.amount)} - ${expenseDate} - ${expense.description || 'N/A'}`, 15, yPosition);\n        yPosition += 10;\n      });\n    }\n    \n    // Save the PDF\n    doc.save(`business-report-${new Date().toISOString().split('T')[0]}.pdf`);\n  };\n\n\n\n  const handleEmailReport = async () => {\n    try {\n      setIsEmailPending(true);\n      \n      const response = await fetch('/api/email-report', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        if (data.fallback && data.emailData) {\n          // Use mailto fallback\n          const subject = encodeURIComponent(data.emailData.subject);\n          const body = encodeURIComponent(data.emailData.body);\n          window.location.href = `mailto:?subject=${subject}&body=${body}`;\n        } else {\n          toast({\n            title: \"Report Sent\",\n            description: \"Your business report has been sent to your email address.\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Email Failed\",\n          description: data.message || \"Failed to send email report. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An error occurred while sending the report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsEmailPending(false);\n    }\n  };\n\n  // Calculate additional metrics\n  const highestMarginTreatment = treatments?.length ? treatments.reduce((max, treatment) => \n    parseFloat(treatment.profitMargin) > parseFloat(max?.profitMargin || \"0\") ? treatment : max\n  ) : null;\n  const lowestMarginTreatment = treatments?.length ? treatments.reduce((min, treatment) => \n    parseFloat(treatment.profitMargin) < parseFloat(min?.profitMargin || \"100\") ? treatment : min\n  ) : null;\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"Business Reports & Analytics\" \n          description=\"Generate comprehensive business reports and insights\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!subscriptionStatus?.active) {\n    return (\n      <>\n        <Header \n          title=\"Business Reports & Analytics\" \n          description=\"Generate comprehensive business reports and insights\" \n        />\n        <Paywall \n          title=\"Business Reports & Analytics\"\n          description=\"Access detailed financial reports and insights\"\n          feature=\"business analytics and reporting\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header \n        title=\"Reports & Export\" \n        description=\"View business insights and export your data for external use\" \n      />\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        {/* Export Actions */}\n        <Card className=\"border border-slate-200 mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-800\">Export Options</h3>\n                <p className=\"text-slate-600 text-sm mt-1\">Download or share your business reports</p>\n              </div>\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <FileText className=\"text-primary h-5 w-5\" />\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-4\">\n              <Button onClick={handleExportPDF} className=\"bg-primary text-white hover:bg-blue-700\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export PDF\n              </Button>\n              <Button onClick={handleExportCSV} variant=\"outline\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export CSV\n              </Button>\n              <Button \n                onClick={handleEmailReport} \n                disabled={isEmailPending}\n                variant=\"outline\"\n                className=\"disabled:opacity-50\"\n              >\n                <Mail className=\"h-4 w-4 mr-2\" />\n                {isEmailPending ? 'Sending...' : 'Email Report'}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Business Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Current Hourly Rate</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-1\">\n                    {isLoading ? \"...\" : formatCurrency(metrics?.hourlyRate || 0)}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-primary h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Avg Profit Margin</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-1\">\n                    {isLoading ? \"...\" : `${metrics?.avgProfitMargin || 0}%`}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Percent className=\"text-success h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Monthly Revenue</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-1\">\n                    {isLoading ? \"...\" : formatCurrency(metrics?.monthlyRevenue || 0)}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"text-warning h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Total Expenses</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-1\">\n                    {isLoading ? \"...\" : formatCurrency(totalExpenses)}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-red-500 h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Treatment Analysis */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-slate-800 mb-6\">Treatment Analysis</h3>\n              \n              {isLoading ? (\n                <div className=\"text-center py-8 text-slate-500\">Loading treatment data...</div>\n              ) : treatments?.length ? (\n                <div className=\"space-y-6\">\n                  <div className=\"bg-slate-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-slate-800 mb-3\">Treatment Summary</h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-slate-600\">Total Treatments:</span>\n                        <p className=\"font-bold text-slate-800\">{treatments.length}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-600\">Average Price:</span>\n                        <p className=\"font-bold text-slate-800\">{formatCurrency(avgTreatmentPrice)}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {highestMarginTreatment && (\n                    <div className=\"bg-green-50 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-green-700 mb-2\">Highest Margin Treatment</h4>\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"font-medium text-green-800\">{highestMarginTreatment.name}</p>\n                          <p className=\"text-sm text-green-600\">{formatCurrency(highestMarginTreatment.price)}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-green-700\">{formatPercentage(highestMarginTreatment.profitMargin)}</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {lowestMarginTreatment && (\n                    <div className=\"bg-red-50 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-red-700 mb-2\">Lowest Margin Treatment</h4>\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"font-medium text-red-800\">{lowestMarginTreatment.name}</p>\n                          <p className=\"text-sm text-red-600\">{formatCurrency(lowestMarginTreatment.price)}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-red-700\">{formatPercentage(lowestMarginTreatment.profitMargin)}</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <div>\n                    <h4 className=\"font-semibold text-slate-800 mb-3\">All Treatments</h4>\n                    <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                      {treatments\n                        .sort((a, b) => parseFloat(b.profitMargin) - parseFloat(a.profitMargin))\n                        .map((treatment) => (\n                        <div key={treatment.id} className=\"flex justify-between items-center p-2 bg-slate-50 rounded\">\n                          <span className=\"font-medium text-slate-800\">{treatment.name}</span>\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\">{formatCurrency(treatment.price)}</p>\n                            <p className=\"text-sm text-success\">{formatPercentage(treatment.profitMargin)}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-slate-500\">\n                  No treatments found. Add treatments to see analysis.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Financial Overview */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-slate-800 mb-6\">Financial Overview</h3>\n              \n              {isLoading ? (\n                <div className=\"text-center py-8 text-slate-500\">Loading financial data...</div>\n              ) : (\n                <div className=\"space-y-6\">\n                  <div className=\"bg-slate-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-slate-800 mb-3\">Revenue Breakdown</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">Projected Monthly Revenue:</span>\n                        <span className=\"font-semibold\">{formatCurrency(metrics?.monthlyRevenue || 0)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">Monthly Expenses:</span>\n                        <span className=\"font-semibold text-red-600\">{formatCurrency(totalExpenses)}</span>\n                      </div>\n                      <div className=\"flex justify-between pt-2 border-t border-slate-200\">\n                        <span className=\"font-medium text-slate-800\">Net Profit (Est.):</span>\n                        <span className=\"font-bold text-success\">\n                          {formatCurrency((parseFloat(metrics?.monthlyRevenue || \"0\") - totalExpenses))}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {hourlyCalculations?.length ? (\n                    <div className=\"bg-blue-50 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-primary mb-3\">Rate History</h4>\n                      <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                        {hourlyCalculations.slice(0, 5).map((calc) => (\n                          <div key={calc.id} className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-slate-600\">\n                              {new Date(calc.createdAt).toLocaleDateString()}\n                            </span>\n                            <span className=\"font-semibold text-primary\">\n                              {formatCurrency(calc.calculatedRate)}/hr\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ) : null}\n\n                  <div className=\"bg-purple-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-purple-600 mb-3\">Business Recommendations</h4>\n                    <ul className=\"space-y-2 text-sm text-slate-700\">\n                      <li>• Focus on high-margin treatments to maximise profit</li>\n                      <li>• Review pricing for treatments below 50% margin</li>\n                      <li>• Track monthly trends to identify peak seasons</li>\n                      <li>• Consider package deals to increase average transaction</li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":21282},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport logoPath from \"@assets/KatieGodfrey-Logo_Black.png\";\n\nexport default function ResetPassword() {\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [token, setToken] = useState(\"\");\n  const { toast } = useToast();\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Extract token from URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const tokenParam = urlParams.get('token');\n    if (tokenParam) {\n      setToken(tokenParam);\n    } else {\n      toast({\n        title: \"Invalid reset link\",\n        description: \"This reset link is invalid or expired\",\n        variant: \"destructive\",\n      });\n    }\n  }, [location, toast]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newPassword || !confirmPassword) {\n      toast({\n        title: \"All fields required\",\n        description: \"Please enter and confirm your new password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure both password fields match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await apiRequest(\"POST\", \"/api/v2/auth/confirm-reset\", { \n        token, \n        newPassword \n      });\n      setIsSuccess(true);\n      toast({\n        title: \"Password reset successful\",\n        description: \"You can now log in with your new password\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Reset failed\",\n        description: \"Invalid or expired reset token. Please request a new reset link.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n        <Header title=\"Reset Password\" description=\"Set your new password\" />\n        \n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"text-center mb-8\">\n              <img \n                src={logoPath} \n                alt=\"Katie Godfrey Business Coach\" \n                className=\"h-16 mx-auto mb-4\"\n              />\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                Invalid Reset Link\n              </h1>\n            </div>\n\n            <Card className=\"shadow-xl border-0\">\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-xl text-red-600\">Link Invalid</CardTitle>\n                <CardDescription>\n                  This reset link is invalid or expired. Please request a new one.\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"text-center\">\n                  <Link href=\"/forgot-password\">\n                    <Button className=\"bg-pink-600 hover:bg-pink-700\">\n                      Request New Reset Link\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n      <Header title=\"Reset Password\" description=\"Set your new password\" />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          {/* Logo */}\n          <div className=\"text-center mb-8\">\n            <img \n              src={logoPath} \n              alt=\"Katie Godfrey Business Coach\" \n              className=\"h-16 mx-auto mb-4\"\n            />\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              Set New Password\n            </h1>\n          </div>\n\n          <Card className=\"shadow-xl border-0\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-xl\">Reset Your Password</CardTitle>\n              <CardDescription>\n                {isSuccess \n                  ? \"Password reset successfully\"\n                  : \"Enter your new password below\"\n                }\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              {!isSuccess ? (\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <Input\n                      id=\"newPassword\"\n                      type=\"password\"\n                      placeholder=\"Enter new password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      disabled={isLoading}\n                      required\n                      minLength={6}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      placeholder=\"Confirm new password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      disabled={isLoading}\n                      required\n                      minLength={6}\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-pink-600 hover:bg-pink-700\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Updating...\" : \"Update Password\"}\n                  </Button>\n                </form>\n              ) : (\n                <div className=\"text-center space-y-4\">\n                  <div className=\"text-green-600 text-sm\">\n                    Your password has been successfully reset!\n                  </div>\n                  <Link href=\"/login\">\n                    <Button className=\"bg-pink-600 hover:bg-pink-700\">\n                      Go to Login\n                    </Button>\n                  </Link>\n                </div>\n              )}\n\n              <div className=\"mt-6 text-center\">\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" className=\"text-sm\">\n                    ← Back to Login\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Additional help */}\n          <div className=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n            <p>Need more help? Contact help at</p>\n            <a href=\"mailto:help@salonsuccessmanager.com\" className=\"text-pink-600 hover:underline\">\n              help@salonsuccessmanager.com\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7967},"client/src/pages/revenue-projections.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Header from \"@/components/header\";\nimport { TrendingUp, DollarSign, Calendar, Target } from \"lucide-react\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport Paywall from \"@/components/paywall\";\nimport type { Treatment } from \"@shared/schema\";\n\ninterface ProjectionInputs {\n  selectedTreatment: string;\n  sessionsPerWeek: number;\n  weeksPerMonth: number;\n  seasonalMultiplier: number;\n}\n\nexport default function RevenueProjections() {\n  const { formatCurrency } = useCurrency();\n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  const [projectionInputs, setProjectionInputs] = useState<ProjectionInputs>({\n    selectedTreatment: \"\",\n    sessionsPerWeek: 0,\n    weeksPerMonth: 4.33,\n    seasonalMultiplier: 1,\n  });\n\n  const { data: treatments = [], isLoading: treatmentsLoading } = useQuery<Treatment[]>({\n    queryKey: [\"/api/treatments\"],\n  });\n\n  const selectedTreatment = treatments?.find(t => t.id.toString() === projectionInputs.selectedTreatment);\n\n  // Calculate projections\n  const calculateProjections = () => {\n    if (!selectedTreatment || !selectedTreatment.price) return null;\n\n    const price = selectedTreatment.price ? parseFloat(selectedTreatment.price.toString()) : 0;\n    const duration = selectedTreatment.duration || 0;\n    const monthlyRevenue = price * projectionInputs.sessionsPerWeek * projectionInputs.weeksPerMonth * projectionInputs.seasonalMultiplier;\n    const yearlyRevenue = monthlyRevenue * 12;\n    \n    const overheadCost = selectedTreatment.overheadCost ? parseFloat(selectedTreatment.overheadCost.toString()) : 0;\n    const totalCosts = overheadCost * projectionInputs.sessionsPerWeek * projectionInputs.weeksPerMonth * projectionInputs.seasonalMultiplier;\n    const monthlyProfit = monthlyRevenue - totalCosts;\n    const yearlyProfit = monthlyProfit * 12;\n\n    const monthlyHours = (duration / 60) * projectionInputs.sessionsPerWeek * projectionInputs.weeksPerMonth * projectionInputs.seasonalMultiplier;\n    const yearlyHours = monthlyHours * 12;\n\n    return {\n      monthly: {\n        revenue: monthlyRevenue,\n        profit: monthlyProfit,\n        hours: monthlyHours,\n        sessions: projectionInputs.sessionsPerWeek * projectionInputs.weeksPerMonth * projectionInputs.seasonalMultiplier,\n      },\n      yearly: {\n        revenue: yearlyRevenue,\n        profit: yearlyProfit,\n        hours: yearlyHours,\n        sessions: projectionInputs.sessionsPerWeek * projectionInputs.weeksPerMonth * projectionInputs.seasonalMultiplier * 12,\n      }\n    };\n  };\n\n  const projections = calculateProjections();\n\n  const seasonalOptions = [\n    { value: 0.7, label: \"Low Season (-30%)\" },\n    { value: 1, label: \"Normal Season\" },\n    { value: 1.3, label: \"Peak Season (+30%)\" },\n    { value: 1.5, label: \"Holiday Season (+50%)\" },\n  ];\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"Revenue Projections & Forecasting\" \n          description=\"Project future revenue based on treatment performance\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!(subscriptionStatus as any)?.active) {\n    return (\n      <>\n        <Header \n          title=\"Revenue Projections & Forecasting\" \n          description=\"Project future revenue based on treatment performance\" \n        />\n        <Paywall \n          title=\"Revenue Projections & Forecasting\"\n          description=\"Plan your business growth with data-driven forecasts\"\n          feature=\"revenue forecasting and projections\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header \n        title=\"Revenue Projections\" \n        description=\"Project your business revenue based on treatment pricing and capacity\" \n      />\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Projection Inputs */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Projection Calculator</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Calculate revenue based on specific treatments</p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-primary h-5 w-5\" />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"treatment\">Select Treatment</Label>\n                  <Select \n                    value={projectionInputs.selectedTreatment} \n                    onValueChange={(value) => setProjectionInputs(prev => ({...prev, selectedTreatment: value}))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Choose a treatment\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {treatmentsLoading ? (\n                        <SelectItem value=\"loading\" disabled>Loading treatments...</SelectItem>\n                      ) : treatments?.length ? (\n                        treatments.map((treatment) => (\n                          <SelectItem key={treatment.id} value={treatment.id.toString()}>\n                            {treatment.name} - {formatCurrency(treatment.price)}\n                          </SelectItem>\n                        ))\n                      ) : (\n                        <SelectItem value=\"none\" disabled>No treatments available</SelectItem>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"sessions\">Sessions per Week</Label>\n                    <Input\n                      id=\"sessions\"\n                      type=\"number\"\n                      value={projectionInputs.sessionsPerWeek || \"\"}\n                      onChange={(e) => setProjectionInputs(prev => ({\n                        ...prev, \n                        sessionsPerWeek: parseFloat(e.target.value) || 0\n                      }))}\n                      placeholder=\"10\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"weeks\">Weeks per Month</Label>\n                    <Input\n                      id=\"weeks\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={projectionInputs.weeksPerMonth}\n                      onChange={(e) => setProjectionInputs(prev => ({\n                        ...prev, \n                        weeksPerMonth: parseFloat(e.target.value) || 4.33\n                      }))}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"seasonal\">Seasonal Adjustment</Label>\n                  <Select \n                    value={projectionInputs.seasonalMultiplier.toString()} \n                    onValueChange={(value) => setProjectionInputs(prev => ({\n                      ...prev, \n                      seasonalMultiplier: parseFloat(value)\n                    }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {seasonalOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value.toString()}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {selectedTreatment && (\n                  <div className=\"bg-slate-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-slate-800 mb-2\">Treatment Details</h4>\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>\n                        <span className=\"text-slate-500\">Price:</span>\n                        <p className=\"font-medium\">{formatCurrency(selectedTreatment.price)}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-500\">Duration:</span>\n                        <p className=\"font-medium\">{selectedTreatment.duration} min</p>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-500\">Profit Margin:</span>\n                        <p className=\"font-medium text-success\">\n                          {selectedTreatment.profitMargin ? parseFloat(selectedTreatment.profitMargin.toString()).toFixed(1) : '0.0'}%\n                        </p>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-500\">Net Profit:</span>\n                        <p className=\"font-medium text-success\">\n                          {formatCurrency(\n                            (selectedTreatment.price ? parseFloat(selectedTreatment.price.toString()) : 0) - \n                            (selectedTreatment.overheadCost ? parseFloat(selectedTreatment.overheadCost.toString()) : 0)\n                          )}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Treatment Projections */}\n          <Card className=\"border border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-800\">Revenue Projections</h3>\n                  <p className=\"text-slate-600 text-sm mt-1\">Based on your inputs</p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"text-success h-5 w-5\" />\n                </div>\n              </div>\n\n              {projections ? (\n                <div className=\"space-y-6\">\n                  {/* Monthly Projections */}\n                  <div className=\"bg-blue-50 rounded-lg p-4\">\n                    <h4 className=\"font-bold text-slate-800 mb-3 flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      Monthly Projections\n                    </h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-primary\">Revenue</p>\n                        <p className=\"text-xl font-bold text-black\">{formatCurrency(projections.monthly.revenue)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-primary\">Profit</p>\n                        <p className=\"text-xl font-bold text-black\">{formatCurrency(projections.monthly.profit)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-primary\">Sessions</p>\n                        <p className=\"text-lg font-semibold text-slate-800\">{projections.monthly.sessions.toFixed(0)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-primary\">Hours</p>\n                        <p className=\"text-lg font-semibold text-slate-800\">{projections.monthly.hours.toFixed(1)}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Yearly Projections */}\n                  <div className=\"bg-green-50 rounded-lg p-4\">\n                    <h4 className=\"font-bold text-slate-800 mb-3 flex items-center\">\n                      <Target className=\"h-4 w-4 mr-2\" />\n                      Yearly Projections\n                    </h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-primary\">Revenue</p>\n                        <p className=\"text-xl font-bold text-black\">{formatCurrency(projections.yearly.revenue)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-primary\">Profit</p>\n                        <p className=\"text-xl font-bold text-black\">{formatCurrency(projections.yearly.profit)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-primary\">Sessions</p>\n                        <p className=\"text-lg font-semibold text-slate-800\">{projections.yearly.sessions.toFixed(0)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-primary\">Hours</p>\n                        <p className=\"text-lg font-semibold text-slate-800\">{projections.yearly.hours.toFixed(1)}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-slate-500\">\n                  Select a treatment and enter session details to see projections\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n\n      </main>\n    </>\n  );\n}\n","size_bytes":14163},"client/src/pages/stock-budget-calculator.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertStockPurchaseSchema, type StockPurchase } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { useCurrency } from \"@/contexts/CurrencyContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Calendar, TrendingUp, Package, Calculator } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport Paywall from \"@/components/paywall\";\n\ntype StockPurchaseForm = z.infer<typeof insertStockPurchaseSchema>;\n\nconst stockCategories = [\n  \"Aesthetics stock\",\n  \"Beauty Equipment\",\n  \"Hair Products\",\n  \"Nail Products\",\n  \"Other\",\n  \"Retail Products\",\n  \"Salon Supplies\",\n  \"Skincare Products\"\n];\n\nexport default function StockBudgetCalculator() {\n  const { formatCurrency } = useCurrency();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedPeriod, setSelectedPeriod] = useState(\"3\");\n\n  // Check subscription status\n  const { data: subscriptionStatus, isLoading: subscriptionLoading } = useQuery<{ active: boolean }>({\n    queryKey: [\"/api/subscription-status\"],\n  });\n\n  const isSubscribed = subscriptionStatus?.active;\n\n  const form = useForm<StockPurchaseForm>({\n    resolver: zodResolver(insertStockPurchaseSchema),\n    defaultValues: {\n      supplier: \"\",\n      purchaseDate: \"\",\n      totalAmount: \"\",\n      description: \"\",\n      category: \"\",\n    },\n  });\n\n  const { data: stockPurchases = [], isLoading } = useQuery<StockPurchase[]>({\n    queryKey: [\"/api/stock-purchases\"],\n    refetchOnWindowFocus: false,\n  });\n\n  const createStockPurchaseMutation = useMutation({\n    mutationFn: (data: StockPurchaseForm) => {\n      console.log(\"Mutation called with data:\", data);\n      return apiRequest(\"POST\", \"/api/stock-purchases\", data);\n    },\n    onSuccess: () => {\n      console.log(\"Mutation successful\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-purchases\"] });\n      form.reset();\n      toast({\n        title: \"Stock Purchase Added\",\n        description: \"Your stock purchase has been recorded successfully.\",\n      });\n    },\n    onError: (error) => {\n      console.log(\"Mutation error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add stock purchase. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteStockPurchaseMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(\"DELETE\", `/api/stock-purchases/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-purchases\"] });\n      toast({\n        title: \"Purchase Deleted\",\n        description: \"Stock purchase has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete stock purchase. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: StockPurchaseForm) => {\n    createStockPurchaseMutation.mutate(data);\n  };\n\n  const handleDelete = (id: number) => {\n    deleteStockPurchaseMutation.mutate(id);\n  };\n\n  // Calculate budget insights\n  const calculateBudgetInsights = () => {\n    const months = parseInt(selectedPeriod);\n    const now = new Date();\n    const startDate = new Date(now.getFullYear(), now.getMonth() - months + 1, 1);\n    \n    const recentPurchases = (stockPurchases as StockPurchase[]).filter((purchase: StockPurchase) => \n      new Date(purchase.purchaseDate) >= startDate\n    );\n\n    const totalSpent = recentPurchases.reduce((sum: number, purchase: StockPurchase) => \n      sum + parseFloat(purchase.totalAmount.toString()), 0\n    );\n\n    const monthlyAverage = totalSpent / months;\n    \n    const categoryBreakdown = recentPurchases.reduce((acc: Record<string, number>, purchase: StockPurchase) => {\n      acc[purchase.category] = (acc[purchase.category] || 0) + parseFloat(purchase.totalAmount.toString());\n      return acc;\n    }, {});\n\n    const topCategory = Object.entries(categoryBreakdown)\n      .sort(([,a], [,b]) => (b as number) - (a as number))[0];\n\n    return {\n      totalSpent,\n      monthlyAverage,\n      categoryBreakdown,\n      topCategory: topCategory ? { name: topCategory[0], amount: topCategory[1] } : null,\n      purchaseCount: recentPurchases.length\n    };\n  };\n\n  const insights = calculateBudgetInsights();\n\n  // Show loading while checking subscription\n  if (subscriptionLoading) {\n    return (\n      <>\n        <Header \n          title=\"Stock Budget Calculator\" \n          description=\"Track your product purchases and create monthly stock budgets for better financial planning.\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  // Check subscription status\n  if (!isSubscribed) {\n    return (\n      <>\n        <Header \n          title=\"Stock Budget Calculator\" \n          description=\"Track your product purchases and create monthly stock budgets for better financial planning.\" \n        />\n        <Paywall\n          title=\"Stock Budget Calculator\"\n          description=\"Track your product purchases and create monthly stock budgets for better financial planning.\"\n          feature=\"advanced stock budgeting and purchase tracking\"\n        />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <Header\n        title=\"Stock Budget Calculator\"\n        description=\"Track your product purchases over 3-6 months to establish accurate monthly stock budgets for better financial planning.\"\n      />\n\n      {/* Budget Insights */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Spent</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(insights.totalSpent)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Last {selectedPeriod} months\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Average</CardTitle>\n            <Calculator className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(insights.monthlyAverage)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Recommended budget\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Top Category</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {insights.topCategory ? insights.topCategory.name : \"None\"}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {insights.topCategory ? formatCurrency(insights.topCategory.amount) : \"No purchases yet\"}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Purchases</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{insights.purchaseCount}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Last {selectedPeriod} months\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Period Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Budget Period</CardTitle>\n          <CardDescription>\n            Select the time period to analyse for your monthly budget calculation\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue placeholder=\"Select period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3\">Last 3 months</SelectItem>\n              <SelectItem value=\"6\">Last 6 months</SelectItem>\n              <SelectItem value=\"12\">Last 12 months</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Add Stock Purchase Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Add Stock Purchase</CardTitle>\n          <CardDescription>\n            Record a new product purchase to track your spending patterns\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <FormField\n                  control={form.control}\n                  name=\"supplier\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter supplier name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"purchaseDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Purchase Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"totalAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Amount (£)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.01\" \n                          placeholder=\"0.00\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {stockCategories.map((category) => (\n                            <SelectItem key={category} value={category}>\n                              {category}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Add details about the purchase...\"\n                        {...field}\n                        value={field.value || \"\"} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                disabled={createStockPurchaseMutation.isPending}\n                className=\"w-full\"\n              >\n                {createStockPurchaseMutation.isPending ? \"Adding...\" : \"Add Purchase\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {/* Purchase History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Purchase History</CardTitle>\n          <CardDescription>\n            Your recent stock purchases and spending patterns\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : stockPurchases.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Package className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n              <p>No stock purchases recorded yet.</p>\n              <p className=\"text-sm\">Add your first purchase above to start tracking your spending.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {stockPurchases.slice(0, 10).map((purchase: StockPurchase) => (\n                <div key={purchase.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h4 className=\"font-semibold\">{purchase.supplier}</h4>\n                      <Badge variant=\"secondary\">{purchase.category}</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(purchase.purchaseDate).toLocaleDateString(\"en-GB\")}\n                    </p>\n                    {purchase.description && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {purchase.description}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-semibold text-lg\">\n                      {formatCurrency(parseFloat(purchase.totalAmount))}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(purchase.id)}\n                      disabled={deleteStockPurchaseMutation.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16217},"client/src/pages/subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/header\";\nimport { Check, Crown, Zap, Tag, Calendar, Gift } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (!stripe || !elements) {\n      setIsLoading(false);\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Subscription Successful!\",\n        description: \"Welcome to Salon Success Manager Pro! You now have full access to all business tools.\",\n      });\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        className=\"w-full bg-primary text-white hover:bg-pink-600\"\n        disabled={!stripe || isLoading}\n      >\n        {isLoading ? \"Processing...\" : \"Subscribe Now - £23.97/month\"}\n      </Button>\n      <p className=\"text-xs text-center text-slate-500 mt-2\">\n        Cancel anytime • Secure payment via Stripe\n      </p>\n    </form>\n  );\n};\n\nconst PromoCodeForm = () => {\n  const { toast } = useToast();\n  const [promoCode, setPromoCode] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  const promoMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", \"/api/apply-promo-code\", { code });\n      return response.json();\n    },\n    onSuccess: (data, originalCode) => {\n      if (data.success) {\n        toast({\n          title: \"Promo Code Applied!\",\n          description: data.message,\n        });\n        \n        // If CLIENT6FREE code was used, simply refresh auth data\n        // The auth hook will detect free_access status and App.tsx will route correctly\n        if (originalCode.toUpperCase() === 'CLIENT6FREE') {\n          // Invalidate and refetch auth data immediately\n          queryClient.invalidateQueries({ queryKey: [\"/api/v2/auth/user\"] });\n          queryClient.refetchQueries({ queryKey: [\"/api/v2/auth/user\"] });\n          \n          // No redirect needed - let React routing handle this automatically\n          toast({\n            title: \"Redirecting to Dashboard...\",\n            description: \"Setting up your free access now!\",\n          });\n        } else {\n          // For other promo codes, refresh the page\n          window.location.reload();\n        }\n      } else {\n        toast({\n          title: \"Invalid Promo Code\",\n          description: data.message || \"Please check your code and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to apply promo code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (promoCode.trim()) {\n      promoMutation.mutate(promoCode.trim());\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"promoCode\">Promo Code</Label>\n        <Input\n          id=\"promoCode\"\n          type=\"text\"\n          placeholder=\"Enter your promo code\"\n          value={promoCode}\n          onChange={(e) => setPromoCode(e.target.value)}\n          className=\"mt-1\"\n        />\n      </div>\n      <Button \n        type=\"submit\" \n        variant=\"outline\"\n        className=\"w-full\"\n        disabled={promoMutation.isPending || !promoCode.trim()}\n      >\n        {promoMutation.isPending ? \"Applying...\" : \"Apply Promo Code\"}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    apiRequest(\"POST\", \"/api/create-subscription\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Subscription response:\", data);\n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else {\n          console.log(\"No client secret received:\", data);\n        }\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Subscription creation error:\", error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const features = [\n    \"Unlimited hourly rate calculations\",\n    \"Advanced profit margin analysis\", \n    \"Multi-business management\",\n    \"CEO numbers tracking & money pots\",\n    \"Revenue projections & forecasting\",\n    \"Comprehensive expense tracking\",\n    \"Professional reports & exports\",\n    \"Priority email support\"\n  ];\n\n  if (isLoading) {\n    return (\n      <>\n        <Header \n          title=\"Complete Your Subscription\" \n          description=\"Choose your preferred payment method\" \n        />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Header \n        title=\"Complete Your Subscription\" \n        description=\"Choose your preferred payment method\" \n      />\n      \n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          \n          {/* Payment Options */}\n          <div className=\"space-y-6\">\n            \n            {/* Stripe Payment Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Crown className=\"h-5 w-5 text-primary\" />\n                  Subscribe with Payment Card\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-6\">\n                  <div className=\"text-3xl font-bold text-slate-800\">£23.97<span className=\"text-lg font-normal text-slate-600\">/month</span></div>\n                  <p className=\"text-sm text-slate-600 mt-1\">Cancel anytime • Secure payment via Stripe</p>\n                </div>\n                \n                {clientSecret ? (\n                  <Elements stripe={stripePromise} options={{ clientSecret }}>\n                    <SubscribeForm />\n                  </Elements>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-slate-600\">Setting up payment form...</p>\n                    <Button \n                      onClick={() => window.location.reload()} \n                      variant=\"outline\" \n                      className=\"mt-2\"\n                    >\n                      Retry Payment Setup\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Promo Code Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Gift className=\"h-5 w-5 text-green-600\" />\n                  Have a Promo Code?\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-slate-600 mb-4\">\n                  Enter your promo code to get special access to all business tools.\n                </p>\n                <PromoCodeForm />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Features List */}\n          <div className=\"lg:sticky lg:top-8 lg:h-fit\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5 text-primary\" />\n                  What's Included\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start gap-3\">\n                      <Check className=\"h-5 w-5 text-green-500 flex-shrink-0 mt-0.5\" />\n                      <span className=\"text-sm text-slate-700\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                \n                <div className=\"mt-6 pt-6 border-t border-slate-200\">\n                  <p className=\"text-xs text-slate-500 text-center\">\n                    Join hundreds of beauty professionals growing their businesses with our proven system\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":10030},"client/src/pages/trial-demo.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport Header from \"@/components/header\";\nimport { Check, Crown, Zap, Calendar, Tag } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function TrialDemo() {\n  const [promoCode, setPromoCode] = useState(\"\");\n  const [promoApplied, setPromoApplied] = useState(false);\n  const { toast } = useToast();\n  \n  const features = [\n    \"Unlimited hourly rate calculations\",\n    \"Advanced profit margin analysis\", \n    \"Multi-business management\",\n    \"CEO numbers tracking & money pots\",\n    \"Revenue projections & forecasting\",\n    \"Comprehensive expense tracking\",\n    \"Professional reports & exports\",\n    \"Priority email support\"\n  ];\n\n  const promoMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", \"/api/apply-promo-code\", { code });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        setPromoApplied(true);\n        toast({\n          title: \"Promo Code Applied!\",\n          description: data.message,\n        });\n      } else {\n        toast({\n          title: \"Invalid Promo Code\",\n          description: data.message || \"Please check your code and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to apply promo code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePromoCode = () => {\n    if (promoCode.trim()) {\n      promoMutation.mutate(promoCode.trim());\n    }\n  };\n\n  return (\n    <>\n      <Header \n        title=\"Salon Success Manager Pro\" \n        description=\"14-Day Free Trial Available\" \n      />\n      \n      {/* 14-Day Trial Banner */}\n      <div className=\"bg-gradient-to-r from-pink-500 to-purple-600 text-white py-4\">\n        <div className=\"max-w-4xl mx-auto px-8 text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-2\">\n            <Calendar className=\"h-6 w-6\" />\n            <span className=\"text-xl font-bold\">14-Day FREE Trial</span>\n          </div>\n          <p className=\"text-pink-100\">Start your free trial today - no payment required until day 15!</p>\n        </div>\n      </div>\n      \n      <main className=\"flex-1 p-8 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Features */}\n            <div>\n              <Card className=\"h-full\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <Zap className=\"h-6 w-6 text-primary mr-2\" />\n                    <h3 className=\"text-xl font-bold text-slate-800\">Everything You Need</h3>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {features.map((feature, index) => (\n                      <div key={index} className=\"flex items-start space-x-3\">\n                        <Check className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-slate-600\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"mt-6 p-4 bg-pink-50 rounded-lg\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-slate-800\">£23.97</div>\n                      <div className=\"text-sm text-slate-600\">per month</div>\n                      <div className=\"text-xs text-slate-500 mt-1\">Cancel anytime</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Trial Start */}\n            <div>\n              <Card className=\"max-w-md mx-auto\">\n                <CardContent className=\"p-6 text-center\">\n                  <Crown className=\"mx-auto h-12 w-12 text-primary mb-4\" />\n                  <h3 className=\"text-lg font-bold text-slate-800 mb-2\">Start Your Free Trial</h3>\n                  <p className=\"text-slate-600 mb-6\">Get instant access to all business tools and features for 14 days completely free.</p>\n                  \n                  {/* Promo Code Section */}\n                  {!promoApplied && (\n                    <div className=\"mb-6 p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <Tag className=\"h-4 w-4 text-blue-600 mr-2\" />\n                        <span className=\"text-sm font-semibold text-blue-800\">Have a discount code?</span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Enter discount code\"\n                          value={promoCode}\n                          onChange={(e) => setPromoCode(e.target.value)}\n                          className=\"text-sm\"\n                        />\n                        <Button \n                          onClick={handlePromoCode}\n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"whitespace-nowrap\"\n                          disabled={promoMutation.isPending || !promoCode.trim()}\n                        >\n                          {promoMutation.isPending ? \"Applying...\" : \"Apply\"}\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Free Access from Promo Code */}\n                  {promoApplied && (\n                    <div className=\"mb-6 p-4 bg-green-50 rounded-lg border border-green-200\">\n                      <h4 className=\"text-sm font-bold text-green-800 mb-2\">🎉 Discount Code Applied!</h4>\n                      <p className=\"text-xs text-green-700 mb-3\">\n                        Congratulations! You now have FREE access to all premium features.\n                      </p>\n                      <Button \n                        className=\"bg-green-600 text-white hover:bg-green-700 w-full\"\n                        onClick={() => window.location.href = '/dashboard'}\n                      >\n                        Access Your Dashboard\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Regular Trial Button */}\n                  {!promoApplied && (\n                    <>\n                      <Button \n                        className=\"bg-primary text-white hover:bg-pink-600 w-full mb-2\"\n                      >\n                        Start 14-Day FREE Trial\n                      </Button>\n                      <p className=\"text-xs text-slate-500\">\n                        No payment required for 14 days. Then £23.97/month.\n                      </p>\n                    </>\n                  )}\n\n                  <div className=\"mt-6 p-4 bg-green-50 rounded-lg\">\n                    <h4 className=\"text-sm font-semibold text-green-800 mb-2\">✓ {promoApplied ? 'FREE Access' : '14-Day Trial'} Benefits:</h4>\n                    <div className=\"text-xs text-green-700 space-y-1\">\n                      <div>• Full access to all features</div>\n                      <div>• No credit card required</div>\n                      <div>• Cancel anytime{!promoApplied ? ' during trial' : ''}</div>\n                      {!promoApplied && <div>• Automatic billing after 14 days</div>}\n                      {promoApplied && <div>• Completely FREE forever</div>}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}","size_bytes":8106},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7294},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Users, \n  Crown, \n  Clock, \n  UserX, \n  Gift, \n  Search, \n  Settings,\n  LogOut,\n  Calendar,\n  TrendingUp,\n  Trash2\n} from \"lucide-react\";\n\ninterface User {\n  id: number;\n  email: string;\n  name: string;\n  businessType: string;\n  subscriptionStatus: string;\n  subscriptionEndDate: string | null;\n  createdAt: string;\n}\n\ninterface UserStats {\n  totalUsers: number;\n  activeSubscriptions: number;\n  trialUsers: number;\n  inactiveUsers: number;\n  freeUsers: number;\n  recentUsers: number;\n  businessTypes: Record<string, number>;\n}\n\ninterface UsersResponse {\n  users: User[];\n  total: number;\n  page: number;\n  totalPages: number;\n}\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const queryClient = useQueryClient();\n\n  const adminPassword = localStorage.getItem(\"adminPassword\");\n\n  useEffect(() => {\n    if (!adminPassword) {\n      setLocation(\"/admin\");\n    }\n  }, [adminPassword, setLocation]);\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    queryFn: async (): Promise<UserStats> => {\n      const response = await fetch(\"/api/admin/stats\", {\n        headers: {\n          \"x-admin-password\": adminPassword!,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch stats\");\n      }\n      \n      return response.json();\n    },\n    enabled: !!adminPassword,\n  });\n\n  const { data: usersData } = useQuery({\n    queryKey: [\"/api/admin/users\", page, searchTerm],\n    queryFn: async (): Promise<UsersResponse> => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: \"20\",\n        search: searchTerm,\n      });\n      \n      const response = await fetch(`/api/admin/users?${params}`, {\n        headers: {\n          \"x-admin-password\": adminPassword!,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch users\");\n      }\n      \n      return response.json();\n    },\n    enabled: !!adminPassword,\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, status, endDate }: { userId: number; status: string; endDate?: string }) => {\n      const response = await fetch(`/api/admin/users/${userId}/subscription`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-admin-password\": adminPassword!,\n        },\n        body: JSON.stringify({ status, endDate }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to update user\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: number) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"x-admin-password\": adminPassword!,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to delete user\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800\";\n      case \"trial\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"free\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Crown className=\"w-4 h-4\" />;\n      case \"trial\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"free\":\n        return <Gift className=\"w-4 h-4\" />;\n      case \"inactive\":\n        return <UserX className=\"w-4 h-4\" />;\n      default:\n        return <UserX className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminPassword\");\n    setLocation(\"/admin\");\n  };\n\n  if (!adminPassword) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center\">\n              <Settings className=\"w-8 h-8 text-blue-600 mr-3\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Admin Dashboard</h1>\n                <p className=\"text-sm text-gray-500\">Salon Success Manager</p>\n              </div>\n            </div>\n            <Button variant=\"outline\" onClick={handleLogout}>\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Stats Cards */}\n        {stats && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stats.totalUsers}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  +{stats.recentUsers} this week\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Active Subscriptions</CardTitle>\n                <Crown className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stats.activeSubscriptions}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {((stats.activeSubscriptions / stats.totalUsers) * 100).toFixed(1)}% conversion\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Trial Users</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stats.trialUsers}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  In trial period\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Free Access</CardTitle>\n                <Gift className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stats.freeUsers}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Promo code users\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Business Types */}\n        {stats && Object.keys(stats.businessTypes).length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Business Types</CardTitle>\n              <CardDescription>Distribution of user business types</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {Object.entries(stats.businessTypes).map(([type, count]) => (\n                  <div key={type} className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n                    <span className=\"text-sm font-medium\">{type}</span>\n                    <Badge variant=\"secondary\">{count}</Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* User Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Management</CardTitle>\n            <CardDescription>\n              Search and manage user accounts\n            </CardDescription>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search users by email, name, or business type...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {usersData && (\n              <>\n                <div className=\"space-y-4\">\n                  {usersData.users.map((user) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div>\n                            <p className=\"font-medium\">{user.name}</p>\n                            <p className=\"text-sm text-gray-500\">{user.email}</p>\n                            <p className=\"text-xs text-gray-400\">{user.businessType}</p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center space-x-2\">\n                            {getStatusIcon(user.subscriptionStatus)}\n                            <Badge className={getStatusColor(user.subscriptionStatus)}>\n                              {user.subscriptionStatus}\n                            </Badge>\n                          </div>\n                          {user.subscriptionEndDate && (\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              Ends: {new Date(user.subscriptionEndDate).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateUserMutation.mutate({ \n                              userId: user.id, \n                              status: \"active\",\n                              endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()\n                            })}\n                            disabled={updateUserMutation.isPending}\n                          >\n                            Activate\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateUserMutation.mutate({ \n                              userId: user.id, \n                              status: \"trial\" \n                            })}\n                            disabled={updateUserMutation.isPending}\n                          >\n                            Trial\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updateUserMutation.mutate({ \n                              userId: user.id, \n                              status: \"free\",\n                              endDate: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString()\n                            })}\n                            disabled={updateUserMutation.isPending}\n                          >\n                            Free 6mo\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => updateUserMutation.mutate({ \n                              userId: user.id, \n                              status: \"inactive\"\n                            })}\n                            disabled={updateUserMutation.isPending}\n                          >\n                            Revoke Access\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => {\n                              if (window.confirm(`Are you sure you want to permanently delete ${user.name} (${user.email})? This will remove all their data and cannot be undone.`)) {\n                                deleteUserMutation.mutate(user.id);\n                              }\n                            }}\n                            disabled={deleteUserMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {usersData.totalPages > 1 && (\n                  <div className=\"flex items-center justify-between mt-6\">\n                    <div className=\"text-sm text-gray-500\">\n                      Showing {usersData.users.length} of {usersData.total} users\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setPage(page - 1)}\n                        disabled={page === 1}\n                      >\n                        Previous\n                      </Button>\n                      <span className=\"flex items-center px-3 text-sm\">\n                        Page {page} of {usersData.totalPages}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setPage(page + 1)}\n                        disabled={page === usersData.totalPages}\n                      >\n                        Next\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15851},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, Shield } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: async (adminPassword: string) => {\n      const response = await fetch(\"/api/admin/stats\", {\n        headers: {\n          \"x-admin-password\": adminPassword,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Invalid admin password\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      localStorage.setItem(\"adminPassword\", password);\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      setError(error.message);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    loginMutation.mutate(password);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-slate-50 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <Shield className=\"w-12 h-12 mx-auto mb-4 text-blue-600\" />\n          <CardTitle className=\"text-2xl\">Admin Access</CardTitle>\n          <CardDescription>\n            Enter admin password to access user management dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Admin Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  className=\"pr-10\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700\"\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Verifying...\" : \"Access Admin Dashboard\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3306}},"version":1}